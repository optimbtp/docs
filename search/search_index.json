{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Centre de Documentation Optim","text":"<p>Bienvenue dans le portail de documentation compl\u00e8te pour tous les projets Optim. Ce centre fournit un acc\u00e8s centralis\u00e9 \u00e0 la documentation de tout notre \u00e9cosyst\u00e8me de projets.</p>"},{"location":"#navigation-rapide","title":"Navigation Rapide","text":""},{"location":"#projets","title":"\ud83d\ude80 Projets","text":"<ul> <li>Mobile - Documentation de l'application mobile</li> <li>Commandes - Outils et utilitaires en ligne de commande</li> <li>SAAS - Plateforme Software-as-a-Service</li> <li>Backoffice - Plateforme administrative et de gestion</li> </ul>"},{"location":"#ressources-partagees","title":"\ud83d\udcda Ressources Partag\u00e9es","text":"<ul> <li>Standards de D\u00e9veloppement - Standards de codage et meilleures pratiques</li> <li>Infrastructure - Guides d'infrastructure et de d\u00e9ploiement</li> <li>Outils - Outils de d\u00e9veloppement et de d\u00e9ploiement</li> </ul>"},{"location":"#modeles","title":"\ud83d\udcdd Mod\u00e8les","text":"<ul> <li>Mod\u00e8les de Documentation - Mod\u00e8les standardis\u00e9s pour nouveaux projets</li> </ul>"},{"location":"#premiers-pas","title":"Premiers Pas","text":"<ol> <li>Parcourir les Projets : Naviguez vers la documentation de projets sp\u00e9cifiques en utilisant le menu ci-dessus</li> <li>Rechercher : Utilisez la fonctionnalit\u00e9 de recherche pour trouver des sujets sp\u00e9cifiques dans tous les projets</li> <li>Contribuer : Suivez nos directives de contribution pour aider \u00e0 am\u00e9liorer la documentation</li> </ol>"},{"location":"#mises-a-jour-recentes","title":"Mises \u00e0 Jour R\u00e9centes","text":"<p>Meilleures Pratiques de Documentation</p> <p>Tous les projets suivent notre structure de documentation standardis\u00e9e pour la coh\u00e9rence et la facilit\u00e9 d'utilisation.</p>"},{"location":"#support","title":"Support","text":"<p>Pour les probl\u00e8mes de documentation ou questions :</p> <ul> <li>Cr\u00e9ez un probl\u00e8me dans le d\u00e9p\u00f4t de documentation</li> <li>Contactez l'\u00e9quipe de d\u00e9veloppement</li> </ul> <p>Derni\u00e8re mise \u00e0 jour : {{ git_revision_date_localized }}</p>"},{"location":"projects/","title":"Vue d'ensemble des Projets","text":"<p>Cette section contient la documentation pour tous les projets Optim actifs. Chaque projet suit une structure standardis\u00e9e pour la coh\u00e9rence et la facilit\u00e9 de navigation.</p>"},{"location":"projects/#projets-actifs","title":"Projets Actifs","text":""},{"location":"projects/#applications-mobiles","title":"Applications Mobiles","text":"<ul> <li>Plateforme Mobile - Suite d'applications mobiles multiplateformes \ud83d\udfe2</li> </ul>"},{"location":"projects/#plateformes-web","title":"Plateformes Web","text":"<ul> <li>Plateforme SAAS - Plateforme Software-as-a-Service multi-locataire \ud83d\udfe2</li> <li>Plateforme Backoffice - Tableau de bord administratif et syst\u00e8me de gestion \ud83d\udfe2</li> </ul>"},{"location":"projects/#outils-de-developpement","title":"Outils de D\u00e9veloppement","text":"<ul> <li>Commandes - Utilitaires en ligne de commande et outils d'automatisation \ud83d\udfe2</li> </ul>"},{"location":"projects/#structure-de-documentation-des-projets","title":"Structure de Documentation des Projets","text":"<p>Chaque documentation de projet inclut :</p> <ul> <li>Vue d'ensemble - Introduction et objectif du projet</li> <li>Premiers pas - Guide de configuration et d'installation rapide</li> <li>Guide Utilisateur - Documentation utilisateur final et tutoriels</li> <li>D\u00e9veloppement - Configuration d\u00e9veloppeur, architecture et directives de contribution</li> <li>R\u00e9f\u00e9rence API - Documentation technique API (le cas \u00e9ch\u00e9ant)</li> <li>D\u00e9ploiement - Guides de d\u00e9ploiement et op\u00e9rationnels</li> <li>Journal des modifications - Historique des versions et notes de version</li> </ul>"},{"location":"projects/#ajouter-de-nouveaux-projets","title":"Ajouter de Nouveaux Projets","text":"<p>Pour ajouter la documentation d'un nouveau projet :</p> <ol> <li>Cr\u00e9ez un nouveau dossier sous <code>docs/projects/nom-du-projet/</code></li> <li>Suivez le mod\u00e8le de projet</li> <li>Mettez \u00e0 jour la navigation dans <code>mkdocs.yml</code></li> <li>Ajoutez le projet \u00e0 cette page de vue d'ensemble</li> </ol>"},{"location":"projects/#legende-du-statut-des-projets","title":"L\u00e9gende du Statut des Projets","text":"<ul> <li>\ud83d\udfe2 D\u00e9veloppement Actif - Activement maintenu et d\u00e9velopp\u00e9</li> <li>\ud83d\udfe1 Mode Maintenance - Corrections de bugs et mises \u00e0 jour de s\u00e9curit\u00e9 uniquement</li> <li>\ud83d\udd34 D\u00e9pr\u00e9ci\u00e9 - Plus maintenu, migration recommand\u00e9e</li> </ul>"},{"location":"projects/backoffice/","title":"Backoffice Platform Documentation","text":"<p>Welcome to the Backoffice Platform documentation. This section covers our comprehensive administrative and management system for internal operations and client support.</p>"},{"location":"projects/backoffice/#overview","title":"Overview","text":"<p>The Backoffice Platform is a powerful administrative interface designed to manage all aspects of the Optim ecosystem. It provides centralized control, monitoring, and management capabilities for operations teams, customer support, and system administrators.</p>"},{"location":"projects/backoffice/#key-features","title":"Key Features","text":"<ul> <li>Multi-Platform Management: Unified control across all Optim products</li> <li>Customer Support Tools: Comprehensive support ticket and user management</li> <li>Analytics &amp; Reporting: Advanced insights and business intelligence</li> <li>System Administration: Platform configuration and maintenance</li> <li>Audit &amp; Compliance: Complete activity tracking and compliance reporting</li> <li>Role-Based Access: Granular permissions and access control</li> </ul>"},{"location":"projects/backoffice/#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started - Setup and onboarding guide</li> <li>User Guide - End-user documentation</li> <li>Admin Guide - Administrative features</li> <li>Development Guide - Developer documentation</li> <li>API Reference - Complete API documentation</li> <li>Support Tools - Customer support features</li> <li>Changelog - Version history and updates</li> </ul>"},{"location":"projects/backoffice/#architecture","title":"Architecture","text":"<pre><code>graph TB\n    A[Load Balancer] --&gt; B[Backoffice Gateway]\n    B --&gt; C[Authentication Service]\n    B --&gt; D[Admin API]\n    B --&gt; E[Support API]\n    B --&gt; F[Analytics API]\n\n    D --&gt; G[User Management]\n    D --&gt; H[Platform Configuration]\n    D --&gt; I[System Monitoring]\n\n    E --&gt; J[Ticket Management]\n    E --&gt; K[Customer Database]\n    E --&gt; L[Communication Hub]\n\n    F --&gt; M[Data Warehouse]\n    F --&gt; N[Report Generator]\n    F --&gt; O[Dashboard Engine]\n\n    P[External Systems] --&gt; B\n    Q[SAAS Platform] --&gt; B\n    R[Mobile Platform] --&gt; B\n</code></pre>"},{"location":"projects/backoffice/#core-modules","title":"Core Modules","text":""},{"location":"projects/backoffice/#dashboard-analytics","title":"\ud83c\udfaf Dashboard &amp; Analytics","text":"<ul> <li>Executive Dashboard: High-level KPIs and business metrics</li> <li>Operations Dashboard: System health and performance monitoring</li> <li>Custom Dashboards: Role-specific views and widgets</li> <li>Real-time Monitoring: Live system status and alerts</li> </ul>"},{"location":"projects/backoffice/#user-customer-management","title":"\ud83d\udc65 User &amp; Customer Management","text":"<ul> <li>Customer Database: Complete customer information and history</li> <li>User Administration: Account management across all platforms</li> <li>Subscription Management: Billing, plans, and usage tracking</li> <li>Access Control: Permissions and role management</li> </ul>"},{"location":"projects/backoffice/#support-helpdesk","title":"\ud83c\udfa7 Support &amp; Helpdesk","text":"<ul> <li>Ticket Management: Comprehensive support ticket system</li> <li>Knowledge Base: Internal documentation and procedures</li> <li>Communication Tools: Email, chat, and notification systems</li> <li>SLA Tracking: Service level agreement monitoring</li> </ul>"},{"location":"projects/backoffice/#system-administration","title":"\ud83d\udd27 System Administration","text":"<ul> <li>Platform Configuration: System-wide settings and parameters</li> <li>Feature Flags: A/B testing and feature rollout control</li> <li>Maintenance Tools: System updates and maintenance scheduling</li> <li>Integration Management: Third-party service configurations</li> </ul>"},{"location":"projects/backoffice/#reporting-analytics","title":"\ud83d\udcca Reporting &amp; Analytics","text":"<ul> <li>Business Intelligence: Advanced analytics and insights</li> <li>Custom Reports: Drag-and-drop report builder</li> <li>Automated Reporting: Scheduled report generation and delivery</li> <li>Data Export: Multiple format exports and API access</li> </ul>"},{"location":"projects/backoffice/#audit-compliance","title":"\ud83d\udd0d Audit &amp; Compliance","text":"<ul> <li>Activity Logging: Comprehensive audit trails</li> <li>Compliance Reporting: Regulatory compliance tracking</li> <li>Security Monitoring: Security events and threat detection</li> <li>Data Governance: Data handling and privacy controls</li> </ul>"},{"location":"projects/backoffice/#technology-stack","title":"Technology Stack","text":""},{"location":"projects/backoffice/#frontend","title":"Frontend","text":"<ul> <li>React 18 with TypeScript</li> <li>Ant Design for enterprise UI components</li> <li>Redux Toolkit for state management</li> <li>React Query for server state management</li> <li>Recharts for data visualization</li> </ul>"},{"location":"projects/backoffice/#backend","title":"Backend","text":"<ul> <li>Node.js with Express.js and TypeScript</li> <li>PostgreSQL for relational data</li> <li>MongoDB for document storage</li> <li>Redis for caching and sessions</li> <li>Elasticsearch for search and analytics</li> </ul>"},{"location":"projects/backoffice/#infrastructure","title":"Infrastructure","text":"<ul> <li>Docker containerization</li> <li>Kubernetes orchestration</li> <li>AWS/GCP cloud services</li> <li>Terraform infrastructure as code</li> <li>GitLab CI/CD for deployment</li> </ul>"},{"location":"projects/backoffice/#monitoring-security","title":"Monitoring &amp; Security","text":"<ul> <li>Prometheus/Grafana for metrics</li> <li>ELK Stack for centralized logging</li> <li>Auth0 for authentication</li> <li>Vault for secrets management</li> </ul>"},{"location":"projects/backoffice/#user-roles-permissions","title":"User Roles &amp; Permissions","text":""},{"location":"projects/backoffice/#super-admin","title":"Super Admin","text":"<ul> <li>Full system access and configuration</li> <li>User role management</li> <li>Platform-wide settings</li> <li>Security and compliance oversight</li> </ul>"},{"location":"projects/backoffice/#operations-manager","title":"Operations Manager","text":"<ul> <li>System monitoring and maintenance</li> <li>Performance optimization</li> <li>Incident response and resolution</li> <li>Infrastructure management</li> </ul>"},{"location":"projects/backoffice/#customer-success-manager","title":"Customer Success Manager","text":"<ul> <li>Customer account management</li> <li>Subscription and billing oversight</li> <li>Success metrics and retention</li> <li>Escalation handling</li> </ul>"},{"location":"projects/backoffice/#support-agent","title":"Support Agent","text":"<ul> <li>Ticket management and resolution</li> <li>Customer communication</li> <li>Knowledge base access</li> <li>Basic user account assistance</li> </ul>"},{"location":"projects/backoffice/#analytics-specialist","title":"Analytics Specialist","text":"<ul> <li>Report creation and management</li> <li>Data analysis and insights</li> <li>Dashboard configuration</li> <li>Business intelligence tools</li> </ul>"},{"location":"projects/backoffice/#compliance-officer","title":"Compliance Officer","text":"<ul> <li>Audit trail access</li> <li>Compliance reporting</li> <li>Data governance oversight</li> <li>Security policy enforcement</li> </ul>"},{"location":"projects/backoffice/#key-features_1","title":"Key Features","text":""},{"location":"projects/backoffice/#advanced-analytics","title":"\ud83d\udcc8 Advanced Analytics","text":"<pre><code>// Analytics capabilities\ninterface AnalyticsEngine {\n  customMetrics: MetricDefinition[];\n  realTimeData: StreamingData;\n  predictiveAnalytics: MLModels;\n  reportScheduler: ScheduledReports;\n}\n</code></pre>"},{"location":"projects/backoffice/#support-ticket-system","title":"\ud83c\udfab Support Ticket System","text":"<ul> <li>Multi-channel Support: Email, chat, phone integration</li> <li>Automated Routing: Intelligent ticket assignment</li> <li>SLA Management: Response time tracking and escalation</li> <li>Knowledge Integration: Contextual help and suggestions</li> </ul>"},{"location":"projects/backoffice/#security-audit","title":"\ud83d\udd10 Security &amp; Audit","text":"<ul> <li>Complete Audit Trail: Every action logged and traceable</li> <li>Role-based Security: Granular permission system</li> <li>Data Encryption: End-to-end encryption for sensitive data</li> <li>Compliance Tools: GDPR, SOC2, HIPAA compliance features</li> </ul>"},{"location":"projects/backoffice/#performance-monitoring","title":"\ud83d\ude80 Performance Monitoring","text":"<ul> <li>Real-time Metrics: System performance and health</li> <li>Alerting System: Proactive issue detection</li> <li>Capacity Planning: Resource usage and scaling insights</li> <li>Performance Analytics: Trend analysis and optimization</li> </ul>"},{"location":"projects/backoffice/#integration-capabilities","title":"Integration Capabilities","text":""},{"location":"projects/backoffice/#internal-platforms","title":"Internal Platforms","text":"<ul> <li>SAAS Platform: Direct management and monitoring</li> <li>Mobile Platform: App management and analytics</li> <li>Commands Platform: Tool administration and logs</li> </ul>"},{"location":"projects/backoffice/#external-services","title":"External Services","text":"<ul> <li>CRM Systems: Salesforce, HubSpot integration</li> <li>Communication: Slack, Teams, email providers</li> <li>Analytics: Google Analytics, Mixpanel</li> <li>Billing: Stripe, PayPal, enterprise billing systems</li> </ul>"},{"location":"projects/backoffice/#apis-webhooks","title":"APIs &amp; Webhooks","text":"<ul> <li>RESTful APIs: Comprehensive API coverage</li> <li>GraphQL: Flexible data querying</li> <li>Webhooks: Real-time event notifications</li> <li>Bulk Operations: Batch processing capabilities</li> </ul>"},{"location":"projects/backoffice/#getting-started","title":"Getting Started","text":""},{"location":"projects/backoffice/#for-administrators","title":"For Administrators","text":"<ol> <li>Access Setup: Obtain admin credentials and 2FA setup</li> <li>Role Configuration: Set up user roles and permissions</li> <li>Dashboard Setup: Configure monitoring dashboards</li> <li>Integration Config: Connect external systems and APIs</li> </ol>"},{"location":"projects/backoffice/#for-support-staff","title":"For Support Staff","text":"<ol> <li>Account Access: Get support role credentials</li> <li>Ticket Training: Learn ticket management workflows</li> <li>Knowledge Base: Familiarize with support documentation</li> <li>Communication Tools: Set up chat and email integration</li> </ol>"},{"location":"projects/backoffice/#for-analytics-users","title":"For Analytics Users","text":"<ol> <li>Data Access: Obtain analytics role permissions</li> <li>Dashboard Config: Set up custom dashboards</li> <li>Report Builder: Learn report creation tools</li> <li>Data Export: Configure automated reports</li> </ol>"},{"location":"projects/backoffice/#service-levels","title":"Service Levels","text":""},{"location":"projects/backoffice/#standard-features","title":"Standard Features","text":"<ul> <li>Basic dashboard and monitoring</li> <li>Standard reporting capabilities</li> <li>Email support integration</li> <li>Basic user management</li> </ul>"},{"location":"projects/backoffice/#professional-features","title":"Professional Features","text":"<ul> <li>Advanced analytics and insights</li> <li>Custom dashboard creation</li> <li>Multi-channel support integration</li> <li>API access and automation</li> </ul>"},{"location":"projects/backoffice/#enterprise-features","title":"Enterprise Features","text":"<ul> <li>White-label customization</li> <li>Advanced security features</li> <li>Custom integrations</li> <li>Dedicated support and training</li> </ul>"},{"location":"projects/backoffice/#security-compliance","title":"Security &amp; Compliance","text":""},{"location":"projects/backoffice/#security-features","title":"Security Features","text":"<ul> <li>Multi-factor Authentication: TOTP, SMS, hardware keys</li> <li>Session Management: Secure session handling and timeout</li> <li>IP Restrictions: Whitelist-based access control</li> <li>Audit Logging: Comprehensive activity tracking</li> </ul>"},{"location":"projects/backoffice/#compliance-standards","title":"Compliance Standards","text":"<ul> <li>SOC 2 Type II compliance</li> <li>GDPR data protection compliance</li> <li>HIPAA healthcare data security</li> <li>ISO 27001 security management</li> </ul>"},{"location":"projects/backoffice/#data-protection","title":"Data Protection","text":"<ul> <li>Encryption: AES-256 encryption at rest and in transit</li> <li>Data Backup: Automated backup and recovery</li> <li>Access Controls: Principle of least privilege</li> <li>Data Retention: Configurable retention policies</li> </ul>"},{"location":"projects/backoffice/#performance-scalability","title":"Performance &amp; Scalability","text":""},{"location":"projects/backoffice/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Response Time: &lt;200ms average API response</li> <li>Uptime: 99.9% availability SLA</li> <li>Concurrent Users: Support for 1000+ concurrent sessions</li> <li>Data Processing: Real-time analytics on large datasets</li> </ul>"},{"location":"projects/backoffice/#scalability-features","title":"Scalability Features","text":"<ul> <li>Horizontal Scaling: Auto-scaling based on load</li> <li>Caching Strategy: Multi-layer caching for performance</li> <li>Database Optimization: Query optimization and indexing</li> <li>CDN Integration: Global content delivery</li> </ul>"},{"location":"projects/backoffice/#support-resources","title":"Support &amp; Resources","text":""},{"location":"projects/backoffice/#documentation","title":"Documentation","text":"<ul> <li>User Manual - Complete user guide</li> <li>Admin Guide - Administrative procedures</li> <li>API Documentation - Complete API reference</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"projects/backoffice/#training-resources","title":"Training Resources","text":"<ul> <li>Video Tutorials: Step-by-step feature walkthroughs</li> <li>Live Training: Regular training sessions for new features</li> <li>Documentation: Comprehensive guides and procedures</li> <li>Best Practices: Optimization and efficiency guides</li> </ul>"},{"location":"projects/backoffice/#support-channels","title":"Support Channels","text":"<ul> <li>Help Desk: Internal support ticket system</li> <li>Live Chat: Real-time support during business hours</li> <li>Email Support: backoffice-support@optim.com</li> <li>Emergency Line: 24/7 for critical system issues</li> </ul>"},{"location":"projects/backoffice/#roadmap","title":"Roadmap","text":""},{"location":"projects/backoffice/#q4-2025","title":"Q4 2025","text":"<ul> <li>Enhanced mobile app for field support</li> <li>AI-powered ticket routing and insights</li> <li>Advanced automation workflows</li> <li>Improved integration marketplace</li> </ul>"},{"location":"projects/backoffice/#q1-2026","title":"Q1 2026","text":"<ul> <li>Machine learning analytics</li> <li>Predictive maintenance alerts</li> <li>Enhanced security features</li> <li>Multi-tenant dashboard improvements</li> </ul>"},{"location":"projects/backoffice/#q2-2026","title":"Q2 2026","text":"<ul> <li>Voice integration for support</li> <li>Advanced workflow automation</li> <li>Custom app development platform</li> <li>Enhanced reporting capabilities</li> </ul>"},{"location":"projects/backoffice/#best-practices","title":"Best Practices","text":""},{"location":"projects/backoffice/#administration","title":"Administration","text":"<ul> <li>Regular Backups: Automated daily backups with testing</li> <li>Security Reviews: Monthly security audits and updates</li> <li>Performance Monitoring: Continuous monitoring and optimization</li> <li>User Training: Regular training sessions for new features</li> </ul>"},{"location":"projects/backoffice/#support-operations","title":"Support Operations","text":"<ul> <li>SLA Adherence: Monitor and maintain response times</li> <li>Knowledge Management: Keep documentation current</li> <li>Escalation Procedures: Clear escalation paths and procedures</li> <li>Customer Communication: Proactive communication and updates</li> </ul>"},{"location":"projects/backoffice/#data-management","title":"Data Management","text":"<ul> <li>Data Quality: Regular data validation and cleanup</li> <li>Access Controls: Regular review of user permissions</li> <li>Backup Testing: Regular backup recovery testing</li> <li>Compliance Audits: Regular compliance reviews and updates</li> </ul>"},{"location":"projects/backoffice/#contributing","title":"Contributing","text":""},{"location":"projects/backoffice/#feature-requests","title":"Feature Requests","text":"<ul> <li>Submit requests through internal portal</li> <li>Provide detailed use cases and requirements</li> <li>Participate in feature review sessions</li> <li>Test beta features and provide feedback</li> </ul>"},{"location":"projects/backoffice/#bug-reports","title":"Bug Reports","text":"<ul> <li>Use internal bug tracking system</li> <li>Provide detailed reproduction steps</li> <li>Include screenshots and system information</li> <li>Work with development team on resolution</li> </ul>"},{"location":"projects/backoffice/#documentation_1","title":"Documentation","text":"<ul> <li>Contribute to knowledge base</li> <li>Update procedures and workflows</li> <li>Create training materials</li> <li>Review and improve existing documentation</li> </ul> <p>Project maintained by the Backoffice Platform Team | For support: backoffice-team@optim.com</p>"},{"location":"projects/backoffice/development/","title":"Backoffice Platform Development Guide","text":"<p>This guide provides comprehensive information for developers working on the Backoffice Platform, including architecture, development practices, and deployment procedures.</p>"},{"location":"projects/backoffice/development/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"projects/backoffice/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js (18.0 or higher)</li> <li>npm or yarn package manager</li> <li>PostgreSQL (14.0 or higher)</li> <li>MongoDB (5.0 or higher)</li> <li>Redis (6.0 or higher)</li> <li>Elasticsearch (8.0 or higher)</li> <li>Docker and Docker Compose</li> <li>Git for version control</li> </ul>"},{"location":"projects/backoffice/development/#local-development-setup","title":"Local Development Setup","text":"<ol> <li>Clone Repository</li> </ol> <pre><code>git clone https://github.com/optim/backoffice-platform.git\ncd backoffice-platform\n</code></pre> <ol> <li>Install Dependencies</li> </ol> <pre><code># Install root dependencies\nnpm install\n\n# Install frontend dependencies\ncd packages/frontend\nnpm install\n\n# Install backend dependencies\ncd ../backend\nnpm install\n\n# Install shared dependencies\ncd ../shared\nnpm install\n</code></pre> <ol> <li>Environment Configuration</li> </ol> <pre><code># Copy environment templates\ncp .env.example .env\ncp packages/frontend/.env.example packages/frontend/.env\ncp packages/backend/.env.example packages/backend/.env\n</code></pre> <ol> <li>Start Services with Docker</li> </ol> <pre><code># Start required services\ndocker-compose up -d postgres mongodb redis elasticsearch\n\n# Wait for services to be ready\nnpm run wait-for-services\n</code></pre> <ol> <li>Database Setup</li> </ol> <pre><code># Run database migrations\nnpm run migrate\n\n# Seed with development data\nnpm run seed:dev\n\n# Create initial admin user\nnpm run create-admin\n</code></pre> <ol> <li>Start Development Servers</li> </ol> <pre><code># Start all services in development mode\nnpm run dev\n\n# Or start individually:\n# Backend API\nnpm run dev:backend\n\n# Frontend\nnpm run dev:frontend\n\n# Background workers\nnpm run dev:workers\n</code></pre>"},{"location":"projects/backoffice/development/#project-structure","title":"Project Structure","text":"<pre><code>backoffice-platform/\n\u251c\u2500\u2500 packages/\n\u2502   \u251c\u2500\u2500 frontend/                # React admin interface\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 components/      # Reusable UI components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 pages/          # Page components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 layouts/        # Layout components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 hooks/          # Custom React hooks\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 services/       # API client services\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 store/          # Redux store\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 utils/          # Frontend utilities\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 types/          # TypeScript types\n\u2502   \u2502   \u251c\u2500\u2500 public/             # Static assets\n\u2502   \u2502   \u2514\u2500\u2500 tests/              # Frontend tests\n\u2502   \u251c\u2500\u2500 backend/                # Node.js API server\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 controllers/    # Request handlers\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 services/       # Business logic\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 models/         # Database models\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 middleware/     # Express middleware\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 routes/         # API routes\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 workers/        # Background jobs\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 utils/          # Backend utilities\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 types/          # TypeScript types\n\u2502   \u2502   \u251c\u2500\u2500 migrations/         # Database migrations\n\u2502   \u2502   \u251c\u2500\u2500 seeds/              # Development data\n\u2502   \u2502   \u2514\u2500\u2500 tests/              # Backend tests\n\u2502   \u2514\u2500\u2500 shared/                 # Shared code and types\n\u2502       \u251c\u2500\u2500 types/              # Common TypeScript types\n\u2502       \u251c\u2500\u2500 constants/          # Shared constants\n\u2502       \u251c\u2500\u2500 utils/              # Shared utilities\n\u2502       \u2514\u2500\u2500 validations/        # Shared validation schemas\n\u251c\u2500\u2500 infrastructure/             # Infrastructure as code\n\u251c\u2500\u2500 docs/                      # Technical documentation\n\u251c\u2500\u2500 scripts/                   # Build and deployment scripts\n\u2514\u2500\u2500 docker-compose.yml         # Development services\n</code></pre>"},{"location":"projects/backoffice/development/#architecture-overview","title":"Architecture Overview","text":""},{"location":"projects/backoffice/development/#microservices-architecture","title":"Microservices Architecture","text":"<pre><code>// Service registry and communication\ninterface ServiceRegistry {\n  userService: UserManagementService;\n  supportService: SupportTicketService;\n  analyticsService: AnalyticsService;\n  auditService: AuditLoggingService;\n  notificationService: NotificationService;\n}\n\n// Inter-service communication\nexport class ServiceBus {\n  async publish(event: DomainEvent): Promise&lt;void&gt; {\n    const subscribers = this.getSubscribers(event.type);\n    await Promise.all(\n      subscribers.map((subscriber) =&gt; subscriber.handle(event))\n    );\n  }\n\n  subscribe(eventType: string, handler: EventHandler): void {\n    this.subscribers.set(eventType, [\n      ...(this.subscribers.get(eventType) || []),\n      handler,\n    ]);\n  }\n}\n</code></pre>"},{"location":"projects/backoffice/development/#database-architecture","title":"Database Architecture","text":"<pre><code>-- Multi-database strategy\n-- PostgreSQL for relational data\nCREATE DATABASE backoffice_core;\nCREATE DATABASE backoffice_audit;\n\n-- Core business entities\nCREATE TABLE users (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  email VARCHAR(255) UNIQUE NOT NULL,\n  name VARCHAR(255) NOT NULL,\n  role VARCHAR(50) NOT NULL,\n  permissions JSONB DEFAULT '[]',\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE customers (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  company_name VARCHAR(255) NOT NULL,\n  contact_email VARCHAR(255) NOT NULL,\n  subscription_tier VARCHAR(50) NOT NULL,\n  status VARCHAR(50) DEFAULT 'active',\n  metadata JSONB DEFAULT '{}',\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Support ticket system\nCREATE TABLE support_tickets (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  customer_id UUID REFERENCES customers(id),\n  assigned_to UUID REFERENCES users(id),\n  title VARCHAR(500) NOT NULL,\n  description TEXT NOT NULL,\n  priority VARCHAR(20) DEFAULT 'medium',\n  status VARCHAR(50) DEFAULT 'open',\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- MongoDB for flexible document storage\ndb.analytics_events.createIndex({ timestamp: 1, event_type: 1 })\ndb.system_logs.createIndex({ timestamp: 1, level: 1, service: 1 })\ndb.user_sessions.createIndex({ user_id: 1, expires_at: 1 })\n</code></pre>"},{"location":"projects/backoffice/development/#event-driven-architecture","title":"Event-Driven Architecture","text":"<pre><code>// Domain events\nexport interface DomainEvent {\n  id: string;\n  type: string;\n  aggregateId: string;\n  data: any;\n  timestamp: Date;\n  version: number;\n}\n\n// Event handlers\nexport class UserEventHandler {\n  async handleUserCreated(event: UserCreatedEvent): Promise&lt;void&gt; {\n    // Send welcome email\n    await this.emailService.sendWelcomeEmail(event.data.email);\n\n    // Create audit log\n    await this.auditService.log({\n      action: \"user_created\",\n      userId: event.data.id,\n      metadata: event.data,\n    });\n\n    // Update analytics\n    await this.analyticsService.track(\"user_created\", event.data);\n  }\n\n  async handleUserRoleChanged(event: UserRoleChangedEvent): Promise&lt;void&gt; {\n    // Invalidate permissions cache\n    await this.cacheService.invalidate(`permissions:${event.aggregateId}`);\n\n    // Notify user of role change\n    await this.notificationService.notify(event.aggregateId, {\n      type: \"role_changed\",\n      message: `Your role has been updated to ${event.data.newRole}`,\n    });\n  }\n}\n</code></pre>"},{"location":"projects/backoffice/development/#frontend-development","title":"Frontend Development","text":""},{"location":"projects/backoffice/development/#component-architecture-with-ant-design","title":"Component Architecture with Ant Design","text":"<pre><code>// Admin dashboard component\nimport React from \"react\";\nimport { Card, Row, Col, Statistic, Table, Button } from \"antd\";\nimport {\n  UserOutlined,\n  TicketOutlined,\n  DashboardOutlined,\n} from \"@ant-design/icons\";\nimport { useQuery } from \"react-query\";\n\ninterface AdminDashboardProps {\n  dateRange: [Date, Date];\n  refreshInterval?: number;\n}\n\nexport const AdminDashboard: React.FC&lt;AdminDashboardProps&gt; = ({\n  dateRange,\n  refreshInterval = 30000,\n}) =&gt; {\n  const { data: metrics, isLoading } = useQuery(\n    [\"dashboard-metrics\", dateRange],\n    () =&gt; analyticsApi.getDashboardMetrics(dateRange),\n    { refetchInterval: refreshInterval }\n  );\n\n  const { data: recentTickets } = useQuery(\"recent-tickets\", () =&gt;\n    supportApi.getRecentTickets(10)\n  );\n\n  return (\n    &lt;div className=\"admin-dashboard\"&gt;\n      &lt;Row gutter={16} className=\"metrics-row\"&gt;\n        &lt;Col span={6}&gt;\n          &lt;Card&gt;\n            &lt;Statistic\n              title=\"Total Users\"\n              value={metrics?.totalUsers}\n              prefix={&lt;UserOutlined /&gt;}\n              loading={isLoading}\n            /&gt;\n          &lt;/Card&gt;\n        &lt;/Col&gt;\n        &lt;Col span={6}&gt;\n          &lt;Card&gt;\n            &lt;Statistic\n              title=\"Open Tickets\"\n              value={metrics?.openTickets}\n              prefix={&lt;TicketOutlined /&gt;}\n              loading={isLoading}\n            /&gt;\n          &lt;/Card&gt;\n        &lt;/Col&gt;\n        &lt;Col span={6}&gt;\n          &lt;Card&gt;\n            &lt;Statistic\n              title=\"System Health\"\n              value={metrics?.systemHealth}\n              suffix=\"%\"\n              prefix={&lt;DashboardOutlined /&gt;}\n              loading={isLoading}\n            /&gt;\n          &lt;/Card&gt;\n        &lt;/Col&gt;\n        &lt;Col span={6}&gt;\n          &lt;Card&gt;\n            &lt;Statistic\n              title=\"Revenue\"\n              value={metrics?.revenue}\n              prefix=\"$\"\n              precision={2}\n              loading={isLoading}\n            /&gt;\n          &lt;/Card&gt;\n        &lt;/Col&gt;\n      &lt;/Row&gt;\n\n      &lt;Card title=\"Recent Support Tickets\" className=\"recent-tickets\"&gt;\n        &lt;Table\n          dataSource={recentTickets}\n          columns={[\n            { title: \"ID\", dataIndex: \"id\", key: \"id\" },\n            { title: \"Customer\", dataIndex: \"customerName\", key: \"customer\" },\n            { title: \"Subject\", dataIndex: \"title\", key: \"title\" },\n            { title: \"Priority\", dataIndex: \"priority\", key: \"priority\" },\n            { title: \"Status\", dataIndex: \"status\", key: \"status\" },\n            {\n              title: \"Actions\",\n              key: \"actions\",\n              render: (_, record) =&gt; (\n                &lt;Button type=\"link\" href={`/support/tickets/${record.id}`}&gt;\n                  View\n                &lt;/Button&gt;\n              ),\n            },\n          ]}\n          pagination={false}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"projects/backoffice/development/#advanced-state-management","title":"Advanced State Management","text":"<pre><code>// Redux store with RTK Query\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// API slice for data fetching\nexport const backofficeApi = createApi({\n  reducerPath: \"backofficeApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/api/v1/\",\n    prepareHeaders: (headers, { getState }) =&gt; {\n      const token = (getState() as RootState).auth.token;\n      if (token) {\n        headers.set(\"authorization\", `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  tagTypes: [\"User\", \"Customer\", \"Ticket\", \"Analytics\"],\n  endpoints: (builder) =&gt; ({\n    getUsers: builder.query&lt;User[], UsersQuery&gt;({\n      query: (params) =&gt; ({\n        url: \"users\",\n        params,\n      }),\n      providesTags: [\"User\"],\n    }),\n    createUser: builder.mutation&lt;User, CreateUserRequest&gt;({\n      query: (user) =&gt; ({\n        url: \"users\",\n        method: \"POST\",\n        body: user,\n      }),\n      invalidatesTags: [\"User\"],\n    }),\n    getTickets: builder.query&lt;Ticket[], TicketsQuery&gt;({\n      query: (params) =&gt; ({\n        url: \"support/tickets\",\n        params,\n      }),\n      providesTags: [\"Ticket\"],\n    }),\n  }),\n});\n\n// UI state slice\ninterface UIState {\n  sidebarCollapsed: boolean;\n  currentTheme: \"light\" | \"dark\";\n  activeFilters: Record&lt;string, any&gt;;\n  notifications: Notification[];\n}\n\nexport const uiSlice = createSlice({\n  name: \"ui\",\n  initialState: {\n    sidebarCollapsed: false,\n    currentTheme: \"light\",\n    activeFilters: {},\n    notifications: [],\n  } as UIState,\n  reducers: {\n    toggleSidebar: (state) =&gt; {\n      state.sidebarCollapsed = !state.sidebarCollapsed;\n    },\n    setTheme: (state, action: PayloadAction&lt;\"light\" | \"dark\"&gt;) =&gt; {\n      state.currentTheme = action.payload;\n    },\n    setFilter: (state, action: PayloadAction&lt;{ key: string; value: any }&gt;) =&gt; {\n      state.activeFilters[action.payload.key] = action.payload.value;\n    },\n    addNotification: (state, action: PayloadAction&lt;Notification&gt;) =&gt; {\n      state.notifications.push(action.payload);\n    },\n  },\n});\n</code></pre>"},{"location":"projects/backoffice/development/#custom-hooks-for-business-logic","title":"Custom Hooks for Business Logic","text":"<pre><code>// Custom hook for user management\nexport const useUserManagement = () =&gt; {\n  const [createUser, { isLoading: isCreating }] =\n    backofficeApi.useCreateUserMutation();\n  const [updateUser, { isLoading: isUpdating }] =\n    backofficeApi.useUpdateUserMutation();\n  const [deleteUser, { isLoading: isDeleting }] =\n    backofficeApi.useDeleteUserMutation();\n\n  const handleCreateUser = useCallback(\n    async (userData: CreateUserRequest) =&gt; {\n      try {\n        const result = await createUser(userData).unwrap();\n        message.success(\"User created successfully\");\n        return result;\n      } catch (error) {\n        message.error(\"Failed to create user\");\n        throw error;\n      }\n    },\n    [createUser]\n  );\n\n  const handleBulkUserUpdate = useCallback(\n    async (updates: BulkUserUpdate[]) =&gt; {\n      const results = await Promise.allSettled(\n        updates.map((update) =&gt; updateUser(update).unwrap())\n      );\n\n      const successful = results.filter((r) =&gt; r.status === \"fulfilled\").length;\n      const failed = results.length - successful;\n\n      if (failed &gt; 0) {\n        message.warning(`${successful} users updated, ${failed} failed`);\n      } else {\n        message.success(`All ${successful} users updated successfully`);\n      }\n\n      return results;\n    },\n    [updateUser]\n  );\n\n  return {\n    createUser: handleCreateUser,\n    bulkUpdate: handleBulkUserUpdate,\n    isCreating,\n    isUpdating,\n    isDeleting,\n  };\n};\n\n// Custom hook for support ticket management\nexport const useSupportTickets = (filters?: TicketFilters) =&gt; {\n  const {\n    data: tickets,\n    isLoading,\n    refetch,\n  } = backofficeApi.useGetTicketsQuery(filters);\n  const [updateTicket] = backofficeApi.useUpdateTicketMutation();\n  const [assignTicket] = backofficeApi.useAssignTicketMutation();\n\n  const handleTicketAssignment = useCallback(\n    async (ticketId: string, assigneeId: string) =&gt; {\n      try {\n        await assignTicket({ ticketId, assigneeId }).unwrap();\n        message.success(\"Ticket assigned successfully\");\n      } catch (error) {\n        message.error(\"Failed to assign ticket\");\n      }\n    },\n    [assignTicket]\n  );\n\n  const handleBulkStatusUpdate = useCallback(\n    async (ticketIds: string[], status: TicketStatus) =&gt; {\n      const updates = ticketIds.map((id) =&gt; ({ id, status }));\n\n      try {\n        await Promise.all(\n          updates.map((update) =&gt; updateTicket(update).unwrap())\n        );\n        message.success(`${ticketIds.length} tickets updated`);\n        refetch();\n      } catch (error) {\n        message.error(\"Failed to update tickets\");\n      }\n    },\n    [updateTicket, refetch]\n  );\n\n  return {\n    tickets,\n    isLoading,\n    assignTicket: handleTicketAssignment,\n    bulkStatusUpdate: handleBulkStatusUpdate,\n    refetch,\n  };\n};\n</code></pre>"},{"location":"projects/backoffice/development/#backend-development","title":"Backend Development","text":""},{"location":"projects/backoffice/development/#service-layer-architecture","title":"Service Layer Architecture","text":"<pre><code>// Base service class\nexport abstract class BaseService {\n  protected logger: Logger;\n  protected cache: CacheService;\n  protected eventBus: EventBus;\n\n  constructor(logger: Logger, cache: CacheService, eventBus: EventBus) {\n    this.logger = logger;\n    this.cache = cache;\n    this.eventBus = eventBus;\n  }\n\n  protected async withTransaction&lt;T&gt;(\n    operation: (trx: Transaction) =&gt; Promise&lt;T&gt;\n  ): Promise&lt;T&gt; {\n    const trx = await this.db.transaction();\n    try {\n      const result = await operation(trx);\n      await trx.commit();\n      return result;\n    } catch (error) {\n      await trx.rollback();\n      throw error;\n    }\n  }\n}\n\n// User management service\nexport class UserService extends BaseService {\n  constructor(\n    private userRepository: UserRepository,\n    private roleService: RoleService,\n    logger: Logger,\n    cache: CacheService,\n    eventBus: EventBus\n  ) {\n    super(logger, cache, eventBus);\n  }\n\n  async createUser(userData: CreateUserRequest): Promise&lt;User&gt; {\n    return this.withTransaction(async (trx) =&gt; {\n      // Validate user data\n      const validation = await this.validateUserData(userData);\n      if (!validation.isValid) {\n        throw new ValidationError(validation.errors);\n      }\n\n      // Check for existing user\n      const existingUser = await this.userRepository.findByEmail(\n        userData.email,\n        trx\n      );\n      if (existingUser) {\n        throw new ConflictError(\"User already exists\");\n      }\n\n      // Create user\n      const user = await this.userRepository.create(\n        {\n          ...userData,\n          id: generateId(),\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n        trx\n      );\n\n      // Assign default role if not specified\n      if (!userData.role) {\n        await this.roleService.assignRole(user.id, \"user\", trx);\n      }\n\n      // Publish event\n      await this.eventBus.publish(new UserCreatedEvent(user));\n\n      // Invalidate cache\n      await this.cache.invalidate(\"users:*\");\n\n      this.logger.info(\"User created\", { userId: user.id, email: user.email });\n\n      return user;\n    });\n  }\n\n  async getUsersWithPagination(\n    query: UsersQuery\n  ): Promise&lt;PaginatedResult&lt;User&gt;&gt; {\n    const cacheKey = `users:query:${JSON.stringify(query)}`;\n\n    // Try cache first\n    const cached = await this.cache.get&lt;PaginatedResult&lt;User&gt;&gt;(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    // Query database\n    const result = await this.userRepository.findWithPagination(query);\n\n    // Cache result\n    await this.cache.set(cacheKey, result, 300); // 5 minutes\n\n    return result;\n  }\n\n  async updateUserRole(\n    userId: string,\n    newRole: string,\n    updatedBy: string\n  ): Promise&lt;User&gt; {\n    return this.withTransaction(async (trx) =&gt; {\n      const user = await this.userRepository.findById(userId, trx);\n      if (!user) {\n        throw new NotFoundError(\"User not found\");\n      }\n\n      const oldRole = user.role;\n      const updatedUser = await this.userRepository.update(\n        userId,\n        { role: newRole, updatedAt: new Date() },\n        trx\n      );\n\n      // Publish role change event\n      await this.eventBus.publish(\n        new UserRoleChangedEvent({\n          userId,\n          oldRole,\n          newRole,\n          updatedBy,\n        })\n      );\n\n      // Invalidate user cache\n      await this.cache.invalidate(`user:${userId}`);\n      await this.cache.invalidate(\"users:*\");\n\n      this.logger.info(\"User role updated\", {\n        userId,\n        oldRole,\n        newRole,\n        updatedBy,\n      });\n\n      return updatedUser;\n    });\n  }\n}\n</code></pre>"},{"location":"projects/backoffice/development/#advanced-authentication-authorization","title":"Advanced Authentication &amp; Authorization","text":"<pre><code>// JWT service with refresh tokens\nexport class AuthService {\n  constructor(\n    private userService: UserService,\n    private tokenRepository: TokenRepository,\n    private config: AuthConfig\n  ) {}\n\n  async authenticate(email: string, password: string): Promise&lt;AuthResult&gt; {\n    // Validate credentials\n    const user = await this.userService.validateCredentials(email, password);\n    if (!user) {\n      throw new AuthenticationError(\"Invalid credentials\");\n    }\n\n    // Check if account is active\n    if (user.status !== \"active\") {\n      throw new AuthenticationError(\"Account is not active\");\n    }\n\n    // Generate tokens\n    const accessToken = this.generateAccessToken(user);\n    const refreshToken = this.generateRefreshToken(user);\n\n    // Store refresh token\n    await this.tokenRepository.store(refreshToken, user.id, {\n      expiresAt: new Date(Date.now() + this.config.refreshTokenTTL),\n      userAgent: user.lastLoginUserAgent,\n      ipAddress: user.lastLoginIp,\n    });\n\n    // Update last login\n    await this.userService.updateLastLogin(user.id);\n\n    return {\n      user,\n      accessToken,\n      refreshToken,\n      expiresIn: this.config.accessTokenTTL,\n    };\n  }\n\n  async refreshToken(refreshToken: string): Promise&lt;AuthResult&gt; {\n    // Verify refresh token\n    const tokenData = await this.tokenRepository.findByToken(refreshToken);\n    if (!tokenData || tokenData.expiresAt &lt; new Date()) {\n      throw new AuthenticationError(\"Invalid refresh token\");\n    }\n\n    // Get user\n    const user = await this.userService.findById(tokenData.userId);\n    if (!user || user.status !== \"active\") {\n      throw new AuthenticationError(\"User not found or inactive\");\n    }\n\n    // Generate new tokens\n    const newAccessToken = this.generateAccessToken(user);\n    const newRefreshToken = this.generateRefreshToken(user);\n\n    // Replace refresh token\n    await this.tokenRepository.replace(refreshToken, newRefreshToken, {\n      expiresAt: new Date(Date.now() + this.config.refreshTokenTTL),\n    });\n\n    return {\n      user,\n      accessToken: newAccessToken,\n      refreshToken: newRefreshToken,\n      expiresIn: this.config.accessTokenTTL,\n    };\n  }\n\n  private generateAccessToken(user: User): string {\n    return jwt.sign(\n      {\n        sub: user.id,\n        email: user.email,\n        role: user.role,\n        permissions: user.permissions,\n        iat: Math.floor(Date.now() / 1000),\n      },\n      this.config.jwtSecret,\n      {\n        expiresIn: this.config.accessTokenTTL / 1000,\n        issuer: \"backoffice-platform\",\n        audience: \"backoffice-api\",\n      }\n    );\n  }\n}\n\n// Permission-based authorization\nexport class AuthorizationService {\n  constructor(private roleService: RoleService) {}\n\n  async checkPermission(\n    userId: string,\n    permission: string,\n    resource?: string\n  ): Promise&lt;boolean&gt; {\n    const userPermissions = await this.getUserPermissions(userId);\n\n    // Check direct permission\n    if (userPermissions.includes(permission)) {\n      return true;\n    }\n\n    // Check resource-specific permission\n    if (resource) {\n      const resourcePermission = `${permission}:${resource}`;\n      if (userPermissions.includes(resourcePermission)) {\n        return true;\n      }\n    }\n\n    // Check wildcard permissions\n    const wildcardPermission = permission.split(\":\")[0] + \":*\";\n    if (userPermissions.includes(wildcardPermission)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  async getUserPermissions(userId: string): Promise&lt;string[]&gt; {\n    const user = await this.userService.findById(userId);\n    if (!user) {\n      return [];\n    }\n\n    // Get role-based permissions\n    const rolePermissions = await this.roleService.getRolePermissions(\n      user.role\n    );\n\n    // Merge with user-specific permissions\n    const allPermissions = [...rolePermissions, ...user.permissions];\n\n    // Remove duplicates\n    return [...new Set(allPermissions)];\n  }\n}\n</code></pre>"},{"location":"projects/backoffice/development/#testing-strategy","title":"Testing Strategy","text":""},{"location":"projects/backoffice/development/#comprehensive-testing-approach","title":"Comprehensive Testing Approach","text":"<pre><code>// Unit tests with comprehensive mocking\ndescribe(\"UserService\", () =&gt; {\n  let userService: UserService;\n  let mockUserRepository: jest.Mocked&lt;UserRepository&gt;;\n  let mockRoleService: jest.Mocked&lt;RoleService&gt;;\n  let mockEventBus: jest.Mocked&lt;EventBus&gt;;\n  let mockCache: jest.Mocked&lt;CacheService&gt;;\n\n  beforeEach(() =&gt; {\n    mockUserRepository = createMockUserRepository();\n    mockRoleService = createMockRoleService();\n    mockEventBus = createMockEventBus();\n    mockCache = createMockCacheService();\n\n    userService = new UserService(\n      mockUserRepository,\n      mockRoleService,\n      createMockLogger(),\n      mockCache,\n      mockEventBus\n    );\n  });\n\n  describe(\"createUser\", () =&gt; {\n    const validUserData = {\n      email: \"test@example.com\",\n      name: \"Test User\",\n      role: \"user\",\n    };\n\n    it(\"should create a user successfully\", async () =&gt; {\n      mockUserRepository.findByEmail.mockResolvedValue(null);\n      mockUserRepository.create.mockResolvedValue({\n        id: \"user-1\",\n        ...validUserData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      });\n\n      const result = await userService.createUser(validUserData);\n\n      expect(result).toEqual(expect.objectContaining(validUserData));\n      expect(mockEventBus.publish).toHaveBeenCalledWith(\n        expect.any(UserCreatedEvent)\n      );\n      expect(mockCache.invalidate).toHaveBeenCalledWith(\"users:*\");\n    });\n\n    it(\"should throw error if user already exists\", async () =&gt; {\n      mockUserRepository.findByEmail.mockResolvedValue({\n        id: \"existing-user\",\n        email: validUserData.email,\n      } as User);\n\n      await expect(userService.createUser(validUserData)).rejects.toThrow(\n        ConflictError\n      );\n    });\n  });\n});\n\n// Integration tests\ndescribe(\"User API Integration\", () =&gt; {\n  let app: Application;\n  let testDb: TestDatabase;\n  let authToken: string;\n\n  beforeAll(async () =&gt; {\n    testDb = await createTestDatabase();\n    app = await createTestApp(testDb);\n    authToken = await createTestAuthToken(\"admin\");\n  });\n\n  afterAll(async () =&gt; {\n    await testDb.cleanup();\n  });\n\n  beforeEach(async () =&gt; {\n    await testDb.reset();\n  });\n\n  describe(\"POST /api/users\", () =&gt; {\n    it(\"should create a new user\", async () =&gt; {\n      const userData = {\n        email: \"newuser@example.com\",\n        name: \"New User\",\n        role: \"user\",\n      };\n\n      const response = await request(app)\n        .post(\"/api/users\")\n        .set(\"Authorization\", `Bearer ${authToken}`)\n        .send(userData)\n        .expect(201);\n\n      expect(response.body.data).toMatchObject(userData);\n\n      // Verify user was created in database\n      const createdUser = await testDb.users.findByEmail(userData.email);\n      expect(createdUser).toBeTruthy();\n    });\n\n    it(\"should return 409 for duplicate email\", async () =&gt; {\n      // Create user first\n      await testDb.users.create({\n        email: \"duplicate@example.com\",\n        name: \"Existing User\",\n        role: \"user\",\n      });\n\n      const response = await request(app)\n        .post(\"/api/users\")\n        .set(\"Authorization\", `Bearer ${authToken}`)\n        .send({\n          email: \"duplicate@example.com\",\n          name: \"New User\",\n          role: \"user\",\n        })\n        .expect(409);\n\n      expect(response.body.error).toContain(\"already exists\");\n    });\n  });\n});\n\n// End-to-end tests\ndescribe(\"User Management E2E\", () =&gt; {\n  let page: Page;\n\n  beforeAll(async () =&gt; {\n    page = await browser.newPage();\n    await page.goto(\"http://localhost:3000\");\n    await loginAsAdmin(page);\n  });\n\n  afterAll(async () =&gt; {\n    await page.close();\n  });\n\n  it(\"should create a new user through UI\", async () =&gt; {\n    // Navigate to users page\n    await page.click('[data-testid=\"nav-users\"]');\n    await page.waitForSelector('[data-testid=\"users-table\"]');\n\n    // Click create user button\n    await page.click('[data-testid=\"create-user-btn\"]');\n    await page.waitForSelector('[data-testid=\"create-user-form\"]');\n\n    // Fill out form\n    await page.fill('[data-testid=\"user-email\"]', \"e2e-test@example.com\");\n    await page.fill('[data-testid=\"user-name\"]', \"E2E Test User\");\n    await page.selectOption('[data-testid=\"user-role\"]', \"user\");\n\n    // Submit form\n    await page.click('[data-testid=\"submit-user\"]');\n\n    // Verify success message\n    await page.waitForSelector('[data-testid=\"success-message\"]');\n\n    // Verify user appears in table\n    await page.waitForSelector(\n      '[data-testid=\"users-table\"] td:has-text(\"e2e-test@example.com\")'\n    );\n  });\n});\n</code></pre>"},{"location":"projects/backoffice/development/#performance-optimization","title":"Performance Optimization","text":""},{"location":"projects/backoffice/development/#database-performance","title":"Database Performance","text":"<pre><code>// Query optimization with proper indexing\nexport class UserRepository {\n  async findUsersWithComplexFilters(filters: UserFilters): Promise&lt;User[]&gt; {\n    let query = this.db\n      .select(\"users.*\")\n      .from(\"users\")\n      .leftJoin(\"user_roles\", \"users.id\", \"user_roles.user_id\")\n      .leftJoin(\"roles\", \"user_roles.role_id\", \"roles.id\");\n\n    // Apply filters with proper indexing\n    if (filters.search) {\n      query = query.whereRaw(\n        `to_tsvector('english', users.name || ' ' || users.email) @@ plainto_tsquery('english', ?)`,\n        [filters.search]\n      );\n    }\n\n    if (filters.role) {\n      query = query.where(\"roles.name\", filters.role);\n    }\n\n    if (filters.status) {\n      query = query.where(\"users.status\", filters.status);\n    }\n\n    if (filters.createdAfter) {\n      query = query.where(\"users.created_at\", \"&gt;=\", filters.createdAfter);\n    }\n\n    // Optimize with proper ordering and limits\n    return query\n      .orderBy(\"users.created_at\", \"desc\")\n      .limit(filters.limit || 50)\n      .offset(filters.offset || 0);\n  }\n}\n\n// Caching strategy for frequently accessed data\nexport class CachedUserService extends UserService {\n  async getUserById(id: string): Promise&lt;User | null&gt; {\n    const cacheKey = `user:${id}`;\n\n    // Try cache first\n    const cached = await this.cache.get&lt;User&gt;(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    // Fetch from database\n    const user = await this.userRepository.findById(id);\n    if (user) {\n      // Cache for 10 minutes\n      await this.cache.set(cacheKey, user, 600);\n    }\n\n    return user;\n  }\n\n  async invalidateUserCache(userId: string): Promise&lt;void&gt; {\n    await Promise.all([\n      this.cache.invalidate(`user:${userId}`),\n      this.cache.invalidate(`user:permissions:${userId}`),\n      this.cache.invalidate(\"users:*\"), // Invalidate list caches\n    ]);\n  }\n}\n</code></pre>"},{"location":"projects/backoffice/development/#frontend-performance","title":"Frontend Performance","text":"<pre><code>// Component optimization with React.memo and useMemo\nexport const UserList = React.memo&lt;UserListProps&gt;(\n  ({ users, onUserSelect, filters }) =&gt; {\n    // Memoize expensive calculations\n    const filteredUsers = useMemo(() =&gt; {\n      return users\n        .filter((user) =&gt; {\n          if (filters.search) {\n            const searchLower = filters.search.toLowerCase();\n            return (\n              user.name.toLowerCase().includes(searchLower) ||\n              user.email.toLowerCase().includes(searchLower)\n            );\n          }\n          return true;\n        })\n        .sort((a, b) =&gt; a.name.localeCompare(b.name));\n    }, [users, filters.search]);\n\n    // Virtualized list for large datasets\n    const rowRenderer = useCallback(\n      ({ index, key, style }) =&gt; {\n        const user = filteredUsers[index];\n        return (\n          &lt;div key={key} style={style}&gt;\n            &lt;UserCard user={user} onSelect={onUserSelect} /&gt;\n          &lt;/div&gt;\n        );\n      },\n      [filteredUsers, onUserSelect]\n    );\n\n    return (\n      &lt;AutoSizer&gt;\n        {({ height, width }) =&gt; (\n          &lt;List\n            height={height}\n            width={width}\n            rowCount={filteredUsers.length}\n            rowHeight={120}\n            rowRenderer={rowRenderer}\n          /&gt;\n        )}\n      &lt;/AutoSizer&gt;\n    );\n  }\n);\n\n// Optimized data fetching with React Query\nexport const useOptimizedUsers = (filters: UserFilters) =&gt; {\n  return useQuery([\"users\", filters], () =&gt; userApi.getUsers(filters), {\n    // Stale time: consider data fresh for 5 minutes\n    staleTime: 5 * 60 * 1000,\n\n    // Cache time: keep in cache for 30 minutes\n    cacheTime: 30 * 60 * 1000,\n\n    // Background refetch on window focus\n    refetchOnWindowFocus: false,\n\n    // Retry failed requests 3 times\n    retry: 3,\n\n    // Enable if query key changes\n    keepPreviousData: true,\n\n    // Transform data\n    select: useCallback((data: ApiResponse&lt;User[]&gt;) =&gt; {\n      return data.data.map((user) =&gt; ({\n        ...user,\n        displayName: `${user.name} (${user.email})`,\n      }));\n    }, []),\n  });\n};\n</code></pre>"},{"location":"projects/backoffice/development/#deployment-devops","title":"Deployment &amp; DevOps","text":""},{"location":"projects/backoffice/development/#docker-multi-stage-build","title":"Docker Multi-stage Build","text":"<pre><code># Backend Dockerfile with multi-stage build\nFROM node:18-alpine AS dependencies\nWORKDIR /app\nCOPY package*.json ./\nCOPY packages/backend/package*.json ./packages/backend/\nCOPY packages/shared/package*.json ./packages/shared/\nRUN npm ci --only=production\n\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nCOPY packages/ ./packages/\nRUN npm ci\nRUN npm run build\n\nFROM node:18-alpine AS runtime\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nodejs -u 1001\n\nWORKDIR /app\nCOPY --from=dependencies /app/node_modules ./node_modules\nCOPY --from=builder /app/packages/backend/dist ./dist\nCOPY --from=builder /app/packages/shared/dist ./shared\n\nUSER nodejs\n\nEXPOSE 3000\nENV NODE_ENV production\n\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\nCMD [\"node\", \"dist/index.js\"]\n</code></pre>"},{"location":"projects/backoffice/development/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code># Complete Kubernetes deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backoffice-backend\n  labels:\n    app: backoffice-backend\n    version: v1\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: backoffice-backend\n  template:\n    metadata:\n      labels:\n        app: backoffice-backend\n        version: v1\n    spec:\n      containers:\n        - name: backend\n          image: optim/backoffice-backend:latest\n          ports:\n            - containerPort: 3000\n          env:\n            - name: NODE_ENV\n              value: production\n            - name: DATABASE_URL\n              valueFrom:\n                secretKeyRef:\n                  name: database-secret\n                  key: url\n            - name: REDIS_URL\n              valueFrom:\n                secretKeyRef:\n                  name: redis-secret\n                  key: url\n            - name: JWT_SECRET\n              valueFrom:\n                secretKeyRef:\n                  name: auth-secret\n                  key: jwt-secret\n          resources:\n            requests:\n              memory: \"1Gi\"\n              cpu: \"500m\"\n            limits:\n              memory: \"2Gi\"\n              cpu: \"1000m\"\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: 3000\n            initialDelaySeconds: 60\n            periodSeconds: 30\n            timeoutSeconds: 5\n            failureThreshold: 3\n          readinessProbe:\n            httpGet:\n              path: /ready\n              port: 3000\n            initialDelaySeconds: 10\n            periodSeconds: 10\n            timeoutSeconds: 5\n            successThreshold: 1\n            failureThreshold: 3\n          volumeMounts:\n            - name: config\n              mountPath: /app/config\n              readOnly: true\n      volumes:\n        - name: config\n          configMap:\n            name: backoffice-config\n      imagePullSecrets:\n        - name: registry-secret\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: backoffice-backend-service\nspec:\n  selector:\n    app: backoffice-backend\n  ports:\n    - port: 80\n      targetPort: 3000\n      protocol: TCP\n  type: ClusterIP\n</code></pre>"},{"location":"projects/backoffice/development/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"projects/backoffice/development/#comprehensive-logging","title":"Comprehensive Logging","text":"<pre><code>// Structured logging with correlation IDs\nexport class StructuredLogger {\n  constructor(private serviceName: string) {}\n\n  info(message: string, context: LogContext = {}): void {\n    this.log(\"info\", message, context);\n  }\n\n  error(message: string, error: Error, context: LogContext = {}): void {\n    this.log(\"error\", message, {\n      ...context,\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n      },\n    });\n  }\n\n  private log(level: LogLevel, message: string, context: LogContext): void {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      service: this.serviceName,\n      correlationId: context.correlationId || generateCorrelationId(),\n      userId: context.userId,\n      requestId: context.requestId,\n      ...context,\n    };\n\n    console.log(JSON.stringify(logEntry));\n  }\n}\n\n// Request correlation middleware\nexport const correlationMiddleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): void =&gt; {\n  const correlationId =\n    (req.headers[\"x-correlation-id\"] as string) || generateCorrelationId();\n\n  req.correlationId = correlationId;\n  res.setHeader(\"x-correlation-id\", correlationId);\n\n  // Add to async local storage for deeper correlation\n  correlationStorage.run(correlationId, () =&gt; {\n    next();\n  });\n};\n</code></pre>"},{"location":"projects/backoffice/development/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>// Performance metrics collection\nexport class MetricsCollector {\n  private metrics = new Map&lt;string, number&gt;();\n\n  recordDuration(name: string, duration: number): void {\n    this.metrics.set(`${name}_duration`, duration);\n  }\n\n  increment(name: string, value: number = 1): void {\n    const current = this.metrics.get(name) || 0;\n    this.metrics.set(name, current + value);\n  }\n\n  gauge(name: string, value: number): void {\n    this.metrics.set(name, value);\n  }\n\n  getMetrics(): Record&lt;string, number&gt; {\n    return Object.fromEntries(this.metrics);\n  }\n}\n\n// Performance monitoring middleware\nexport const performanceMiddleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n): void =&gt; {\n  const start = Date.now();\n\n  res.on(\"finish\", () =&gt; {\n    const duration = Date.now() - start;\n\n    metricsCollector.recordDuration(\"http_request_duration\", duration);\n    metricsCollector.increment(`http_requests_total_${res.statusCode}`);\n\n    if (duration &gt; 1000) {\n      logger.warn(\"Slow request detected\", {\n        method: req.method,\n        url: req.url,\n        duration,\n        statusCode: res.statusCode,\n      });\n    }\n  });\n\n  next();\n};\n</code></pre> <p>For development questions or support, contact the Backoffice Development Team at backoffice-dev@optim.com</p>"},{"location":"projects/backoffice/getting-started/","title":"Getting Started with Backoffice Platform","text":"<p>This guide will help you get up and running with the Backoffice Platform quickly, whether you're an administrator, support agent, or analytics user.</p>"},{"location":"projects/backoffice/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Valid Account: Backoffice Platform account with appropriate role</li> <li>Modern Browser: Chrome 90+, Firefox 88+, Safari 14+, or Edge 90+</li> <li>VPN Access: Secure connection to internal network (if required)</li> <li>2FA Device: Authenticator app or SMS-capable device for security</li> </ul>"},{"location":"projects/backoffice/getting-started/#account-access","title":"Account Access","text":""},{"location":"projects/backoffice/getting-started/#first-time-login","title":"First-Time Login","text":"<ol> <li>Receive Credentials</li> </ol> <pre><code>Check your email for invitation from admin\nClick \"Accept Invitation\" link\nSet up your password (minimum 12 characters, mixed case, numbers, symbols)\nConfigure two-factor authentication\n</code></pre> <ol> <li>Initial Setup <pre><code>Complete security verification\nSet up your profile information\nChoose notification preferences\nAccept terms of service and security policies\n</code></pre></li> </ol>"},{"location":"projects/backoffice/getting-started/#regular-login-process","title":"Regular Login Process","text":"<ol> <li> <p>Access Portal</p> </li> <li> <p>Navigate to https://backoffice.optim.com</p> </li> <li>Enter your email address</li> <li>Enter your password</li> <li> <p>Complete 2FA verification</p> </li> <li> <p>Role Selection (if multiple roles)</p> </li> <li>Choose your active role for the session</li> <li>Confirm access level and permissions</li> <li>Proceed to dashboard</li> </ol>"},{"location":"projects/backoffice/getting-started/#dashboard-overview","title":"Dashboard Overview","text":""},{"location":"projects/backoffice/getting-started/#main-dashboard-components","title":"Main Dashboard Components","text":"<p>Executive Dashboard (Admin/Manager roles)</p> <ul> <li>Key Performance Indicators (KPIs)</li> <li>System health overview</li> <li>Recent critical alerts</li> <li>Quick action buttons</li> </ul> <p>Operations Dashboard (Operations roles)</p> <ul> <li>System performance metrics</li> <li>Active incidents and alerts</li> <li>Resource utilization charts</li> <li>Maintenance schedules</li> </ul> <p>Support Dashboard (Support roles)</p> <ul> <li>Open ticket summary</li> <li>Response time metrics</li> <li>Queue assignments</li> <li>Customer satisfaction scores</li> </ul> <p>Analytics Dashboard (Analytics roles)</p> <ul> <li>Data insights and trends</li> <li>Custom report widgets</li> <li>Scheduled report status</li> <li>Data quality indicators</li> </ul>"},{"location":"projects/backoffice/getting-started/#navigation-structure","title":"Navigation Structure","text":"<pre><code>Backoffice Platform\n\u251c\u2500\u2500 Dashboard\n\u2502   \u251c\u2500\u2500 Executive View\n\u2502   \u251c\u2500\u2500 Operations View\n\u2502   \u2514\u2500\u2500 My Dashboard (customizable)\n\u251c\u2500\u2500 User Management\n\u2502   \u251c\u2500\u2500 Customers\n\u2502   \u251c\u2500\u2500 Internal Users\n\u2502   \u2514\u2500\u2500 Role Management\n\u251c\u2500\u2500 Support Center\n\u2502   \u251c\u2500\u2500 Tickets\n\u2502   \u251c\u2500\u2500 Knowledge Base\n\u2502   \u2514\u2500\u2500 Communication Tools\n\u251c\u2500\u2500 System Admin\n\u2502   \u251c\u2500\u2500 Platform Settings\n\u2502   \u251c\u2500\u2500 Feature Flags\n\u2502   \u2514\u2500\u2500 Integrations\n\u251c\u2500\u2500 Analytics\n\u2502   \u251c\u2500\u2500 Reports\n\u2502   \u251c\u2500\u2500 Dashboards\n\u2502   \u2514\u2500\u2500 Data Explorer\n\u2514\u2500\u2500 Audit &amp; Compliance\n    \u251c\u2500\u2500 Activity Logs\n    \u251c\u2500\u2500 Security Events\n    \u2514\u2500\u2500 Compliance Reports\n</code></pre>"},{"location":"projects/backoffice/getting-started/#role-specific-quick-start","title":"Role-Specific Quick Start","text":""},{"location":"projects/backoffice/getting-started/#for-system-administrators","title":"For System Administrators","text":"<p>Initial Setup Tasks</p> <ol> <li>User Management</li> </ol> <pre><code>Navigate to User Management &gt; Internal Users\nReview existing user accounts and roles\nSet up new team member accounts\nConfigure role-based permissions\n</code></pre> <ol> <li>System Configuration</li> </ol> <pre><code>Access System Admin &gt; Platform Settings\nReview and configure system parameters\nSet up monitoring thresholds and alerts\nConfigure backup and maintenance schedules\n</code></pre> <ol> <li>Integration Setup <pre><code>Navigate to System Admin &gt; Integrations\nConfigure external service connections\nTest API connections and webhooks\nSet up monitoring for integration health\n</code></pre></li> </ol> <p>Essential Admin Tasks</p> <ul> <li>Daily system health check</li> <li>Weekly security audit review</li> <li>Monthly user access review</li> <li>Quarterly compliance assessment</li> </ul>"},{"location":"projects/backoffice/getting-started/#for-support-agents","title":"For Support Agents","text":"<p>Getting Started with Tickets</p> <ol> <li>Ticket Queue Access</li> </ol> <pre><code>Navigate to Support Center &gt; Tickets\nReview your assigned ticket queue\nUnderstand priority levels and SLA requirements\nSet up ticket filters and views\n</code></pre> <ol> <li>Customer Information Access</li> </ol> <pre><code>Access User Management &gt; Customers\nLearn customer search and filtering\nUnderstand customer account structure\nReview billing and subscription information\n</code></pre> <ol> <li>Communication Tools <pre><code>Set up email integration in Support Center\nConfigure chat system access\nTest knowledge base search functionality\nSet up notification preferences\n</code></pre></li> </ol> <p>Daily Support Workflow</p> <pre><code>1. Check overnight tickets and escalations\n2. Review SLA compliance dashboard\n3. Process new tickets by priority\n4. Update customer communications\n5. Document solutions in knowledge base\n6. End-of-day queue review and handoff\n</code></pre>"},{"location":"projects/backoffice/getting-started/#for-analytics-users","title":"For Analytics Users","text":"<p>Report Access Setup</p> <ol> <li>Dashboard Configuration</li> </ol> <pre><code>Navigate to Analytics &gt; Dashboards\nExplore pre-built dashboard templates\nCreate custom dashboard for your needs\nSet up automated refresh schedules\n</code></pre> <ol> <li>Report Builder</li> </ol> <pre><code>Access Analytics &gt; Reports\nLearn report builder interface\nCreate your first custom report\nSet up scheduled report delivery\n</code></pre> <ol> <li>Data Explorer <pre><code>Navigate to Analytics &gt; Data Explorer\nUnderstand available data sources\nPractice query building and filtering\nExport sample data for analysis\n</code></pre></li> </ol> <p>Analytics Workflow</p> <ul> <li>Morning: Review overnight automated reports</li> <li>Daily: Monitor key business metrics</li> <li>Weekly: Generate trend analysis reports</li> <li>Monthly: Prepare executive summaries</li> </ul>"},{"location":"projects/backoffice/getting-started/#for-operations-managers","title":"For Operations Managers","text":"<p>System Monitoring Setup</p> <ol> <li>Operations Dashboard</li> </ol> <pre><code>Configure real-time monitoring widgets\nSet up critical alert notifications\nReview system performance baselines\nCreate custom monitoring views\n</code></pre> <ol> <li>Incident Management</li> </ol> <pre><code>Understand incident classification system\nSet up escalation procedures\nConfigure automated alert routing\nTest incident response workflows\n</code></pre> <ol> <li>Resource Management <pre><code>Monitor system resource utilization\nSet up capacity planning alerts\nReview and plan maintenance windows\nConfigure auto-scaling policies\n</code></pre></li> </ol>"},{"location":"projects/backoffice/getting-started/#common-tasks","title":"Common Tasks","text":""},{"location":"projects/backoffice/getting-started/#user-account-management","title":"User Account Management","text":"<p>Creating New User Account</p> <pre><code>1. Navigate to User Management &gt; Internal Users\n2. Click \"Add New User\" button\n3. Fill in user information:\n   - Full name and email\n   - Department and manager\n   - Role and permissions\n   - Access level and restrictions\n4. Send invitation email\n5. Follow up on account activation\n</code></pre> <p>Managing Customer Accounts</p> <pre><code>1. Go to User Management &gt; Customers\n2. Search for customer by name, email, or ID\n3. View account details:\n   - Subscription information\n   - Usage statistics\n   - Support history\n   - Billing information\n4. Make necessary updates or escalate issues\n</code></pre>"},{"location":"projects/backoffice/getting-started/#support-ticket-management","title":"Support Ticket Management","text":"<p>Processing New Tickets</p> <pre><code>1. Access Support Center &gt; Tickets\n2. Review new ticket queue\n3. For each ticket:\n   - Assess priority and SLA requirements\n   - Research customer account and history\n   - Provide initial response within SLA\n   - Document troubleshooting steps\n   - Escalate if necessary\n   - Follow up until resolution\n</code></pre> <p>Escalation Procedures</p> <pre><code>Level 1: Standard support agent\nLevel 2: Senior support specialist\nLevel 3: Technical team lead\nLevel 4: Engineering team\nEmergency: On-call manager\n</code></pre>"},{"location":"projects/backoffice/getting-started/#analytics-and-reporting","title":"Analytics and Reporting","text":"<p>Creating Custom Reports</p> <pre><code>1. Navigate to Analytics &gt; Reports\n2. Click \"Create New Report\"\n3. Select data sources and date ranges\n4. Choose visualization type (table, chart, graph)\n5. Apply filters and grouping\n6. Preview and test report\n7. Save and schedule delivery\n</code></pre> <p>Setting Up Automated Dashboards</p> <pre><code>1. Go to Analytics &gt; Dashboards\n2. Create new dashboard or clone existing\n3. Add widgets for key metrics\n4. Configure refresh intervals\n5. Set up alert thresholds\n6. Share with appropriate team members\n</code></pre>"},{"location":"projects/backoffice/getting-started/#system-configuration","title":"System Configuration","text":""},{"location":"projects/backoffice/getting-started/#environment-settings","title":"Environment Settings","text":"<p>Development Environment</p> <ul> <li>URL: https://backoffice-dev.optim.com</li> <li>Purpose: Testing and development</li> <li>Data: Test data only</li> <li>Access: Development team</li> </ul> <p>Staging Environment</p> <ul> <li>URL: https://backoffice-staging.optim.com</li> <li>Purpose: Pre-production testing</li> <li>Data: Sanitized production copy</li> <li>Access: QA and selected users</li> </ul> <p>Production Environment</p> <ul> <li>URL: https://backoffice.optim.com</li> <li>Purpose: Live operations</li> <li>Data: Real customer data</li> <li>Access: Authorized personnel only</li> </ul>"},{"location":"projects/backoffice/getting-started/#security-configuration","title":"Security Configuration","text":"<p>Two-Factor Authentication</p> <pre><code>1. Navigate to Profile &gt; Security Settings\n2. Choose 2FA method:\n   - Authenticator app (recommended)\n   - SMS text message\n   - Hardware security key\n3. Scan QR code or enter secret key\n4. Verify setup with test code\n5. Save backup codes in secure location\n</code></pre> <p>Session Management</p> <ul> <li>Session timeout: 8 hours of inactivity</li> <li>Concurrent sessions: Maximum 3 devices</li> <li>Device registration: Required for new devices</li> <li>Session monitoring: All sessions logged and monitored</li> </ul>"},{"location":"projects/backoffice/getting-started/#integration-setup","title":"Integration Setup","text":""},{"location":"projects/backoffice/getting-started/#external-system-connections","title":"External System Connections","text":"<p>CRM Integration</p> <pre><code>1. Navigate to System Admin &gt; Integrations\n2. Select CRM provider (Salesforce, HubSpot, etc.)\n3. Enter API credentials and endpoints\n4. Configure data sync settings\n5. Test connection and data flow\n6. Set up monitoring and alerts\n</code></pre> <p>Communication Tools</p> <pre><code>Slack Integration:\n- Webhook URL configuration\n- Channel assignment rules\n- Alert severity mapping\n- User mention settings\n\nEmail Integration:\n- SMTP server configuration\n- Template customization\n- Delivery monitoring\n- Bounce handling\n</code></pre>"},{"location":"projects/backoffice/getting-started/#api-configuration","title":"API Configuration","text":"<p>Internal APIs</p> <ul> <li>SAAS Platform API</li> <li>Mobile Platform API</li> <li>Commands Platform API</li> <li>Analytics API</li> </ul> <p>External APIs</p> <ul> <li>Payment processors</li> <li>Communication services</li> <li>Monitoring tools</li> <li>Compliance services</li> </ul>"},{"location":"projects/backoffice/getting-started/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"projects/backoffice/getting-started/#login-problems","title":"Login Problems","text":"<p>Cannot Access Account</p> <ol> <li>Verify correct URL for your environment</li> <li>Check username/email spelling</li> <li>Try password reset if needed</li> <li>Verify 2FA device is working</li> <li>Contact admin if account is locked</li> </ol> <p>2FA Issues</p> <ol> <li>Ensure device time is synchronized</li> <li>Try backup codes if primary method fails</li> <li>Regenerate codes if device is lost</li> <li>Contact admin for emergency access</li> </ol>"},{"location":"projects/backoffice/getting-started/#performance-issues","title":"Performance Issues","text":"<p>Slow Loading</p> <ol> <li>Check internet connection speed</li> <li>Clear browser cache and cookies</li> <li>Disable browser extensions temporarily</li> <li>Try different browser or device</li> <li>Check system status page</li> </ol> <p>Data Not Loading</p> <ol> <li>Verify user permissions for data access</li> <li>Check if data source is available</li> <li>Try refreshing the page or clearing cache</li> <li>Review any active maintenance windows</li> <li>Contact technical support if persistent</li> </ol>"},{"location":"projects/backoffice/getting-started/#report-issues","title":"Report Issues","text":"<p>Report Not Generating</p> <ol> <li>Check data source availability</li> <li>Verify date range parameters</li> <li>Ensure sufficient permissions</li> <li>Review filter criteria for conflicts</li> <li>Check scheduled report queue status</li> </ol> <p>Incorrect Data</p> <ol> <li>Verify data source and time range</li> <li>Check filter and grouping settings</li> <li>Compare with source system data</li> <li>Review any recent data changes</li> <li>Contact analytics team for validation</li> </ol>"},{"location":"projects/backoffice/getting-started/#best-practices","title":"Best Practices","text":""},{"location":"projects/backoffice/getting-started/#security-best-practices","title":"Security Best Practices","text":"<p>Account Security</p> <ul> <li>Use strong, unique passwords</li> <li>Enable 2FA on all accounts</li> <li>Regularly review active sessions</li> <li>Log out when not in use</li> <li>Report suspicious activity immediately</li> </ul> <p>Data Handling</p> <ul> <li>Follow data classification guidelines</li> <li>Use secure communication channels</li> <li>Implement least privilege access</li> <li>Document data access and changes</li> <li>Regular security training participation</li> </ul>"},{"location":"projects/backoffice/getting-started/#operational-best-practices","title":"Operational Best Practices","text":"<p>Daily Operations</p> <ul> <li>Start with dashboard health check</li> <li>Review overnight alerts and incidents</li> <li>Process high-priority tickets first</li> <li>Update stakeholders on critical issues</li> <li>End-of-day status review and handoff</li> </ul> <p>Documentation</p> <ul> <li>Document all procedures and changes</li> <li>Update knowledge base regularly</li> <li>Share learnings with team</li> <li>Maintain accurate contact lists</li> <li>Keep runbooks current</li> </ul>"},{"location":"projects/backoffice/getting-started/#performance-optimization","title":"Performance Optimization","text":"<p>System Performance</p> <ul> <li>Use filters to limit data queries</li> <li>Schedule large reports during off-peak hours</li> <li>Cache frequently accessed data</li> <li>Monitor and report performance issues</li> <li>Regular cleanup of old data</li> </ul> <p>User Experience</p> <ul> <li>Customize dashboards for role-specific needs</li> <li>Use bookmarks for frequently accessed pages</li> <li>Set up appropriate notifications</li> <li>Regular training on new features</li> <li>Provide feedback for improvements</li> </ul>"},{"location":"projects/backoffice/getting-started/#getting-help","title":"Getting Help","text":""},{"location":"projects/backoffice/getting-started/#support-resources","title":"Support Resources","text":"<p>Internal Help Desk</p> <ul> <li>Portal: https://helpdesk.optim.com</li> <li>Email: internal-support@optim.com</li> <li>Phone: (555) 123-HELP</li> <li>Hours: 24/7 for critical issues</li> </ul> <p>Documentation</p> <ul> <li>User guides and procedures</li> <li>Video tutorials and training</li> <li>FAQ and troubleshooting guides</li> <li>System status and maintenance updates</li> </ul> <p>Training and Development</p> <ul> <li>New user onboarding sessions</li> <li>Regular feature training webinars</li> <li>Best practices workshops</li> <li>Certification programs</li> </ul>"},{"location":"projects/backoffice/getting-started/#emergency-procedures","title":"Emergency Procedures","text":"<p>Critical System Issues</p> <ol> <li>Immediately contact on-call manager</li> <li>Document issue details and impact</li> <li>Follow incident response procedures</li> <li>Communicate with affected stakeholders</li> <li>Participate in post-incident review</li> </ol> <p>Security Incidents</p> <ol> <li>Report immediately to security team</li> <li>Do not attempt to investigate alone</li> <li>Preserve evidence and log details</li> <li>Follow company security policies</li> <li>Participate in incident response</li> </ol>"},{"location":"projects/backoffice/getting-started/#next-steps","title":"Next Steps","text":"<p>After completing initial setup:</p> <ol> <li>User Guide - Explore detailed feature documentation</li> <li>Admin Guide - Advanced administrative procedures</li> <li>API Documentation - Integration and automation</li> <li>Support Tools - Customer support features</li> <li>Best Practices - Optimization and efficiency</li> </ol> <p>For additional support or questions, contact the Backoffice Platform Team at backoffice-support@optim.com</p>"},{"location":"projects/commands/","title":"Documentation du Projet Commands","text":"<p>Bienvenue dans la documentation du projet Commands. Cette section couvre nos utilitaires en ligne de commande et nos outils d'automatisation.</p>"},{"location":"projects/commands/#apercu","title":"Aper\u00e7u","text":"<p>Le projet Commands fournit une suite d'outils en ligne de commande con\u00e7us pour rationaliser les t\u00e2ches de d\u00e9veloppement, de d\u00e9ploiement et op\u00e9rationnelles dans l'\u00e9cosyst\u00e8me Optim.</p>"},{"location":"projects/commands/#commandes-disponibles","title":"Commandes Disponibles","text":""},{"location":"projects/commands/#commandes-principales","title":"Commandes Principales","text":"<ul> <li><code>docker build</code> - Automatisation de construction et packaging</li> <li><code>docker compose up -d</code> - Lancement des conteneurs</li> <li><code>docker compose down</code> - Fermeture des conteneurs</li> </ul>"},{"location":"projects/commands/#commandes-de-developpement","title":"Commandes de D\u00e9veloppement","text":"<ul> <li><code>optim-dev</code> - Configuration de l'environnement de d\u00e9veloppement</li> <li><code>optim-lint</code> - Qualit\u00e9 de code et linting</li> <li><code>optim-format</code> - Utilitaires de formatage de code</li> <li><code>optim-analyze</code> - Analyse de code et m\u00e9triques --&gt;</li> </ul>"},{"location":"projects/commands/#commandes-doperations","title":"Commandes d'Op\u00e9rations","text":""},{"location":"projects/commands/#demarrage-rapide","title":"D\u00e9marrage Rapide","text":""},{"location":"projects/commands/#installation","title":"Installation","text":""},{"location":"projects/commands/#utilisation-de-base","title":"Utilisation de Base","text":"<pre><code># Afficher l'aide\noptim --help\n\n# V\u00e9rifier la version\noptim --version\n\n# Construire le projet\noptim-build --env production\n\n# Ex\u00e9cuter les tests\noptim-test --coverage\n\n# D\u00e9ployer l'application\noptim-deploy --target staging\n</code></pre>"},{"location":"projects/commands/#reference-des-commandes","title":"R\u00e9f\u00e9rence des Commandes","text":""},{"location":"projects/commands/#commandes-de-construction","title":"Commandes de Construction","text":"<pre><code># Construire avec un environnement sp\u00e9cifique\noptim-build --env [development|staging|production]\n\n# Construire avec une configuration personnalis\u00e9e\noptim-build --config ./custom-build.json\n\n# Construire avec sortie d\u00e9taill\u00e9e\noptim-build --verbose\n\n# Nettoyer les artefacts de construction\noptim-build --clean\n</code></pre>"},{"location":"projects/commands/#commandes-de-test","title":"Commandes de Test","text":"<pre><code># Ex\u00e9cuter tous les tests\noptim-test\n\n# Ex\u00e9cuter une suite de tests sp\u00e9cifique\noptim-test --suite unit\n\n# Ex\u00e9cuter avec couverture\noptim-test --coverage\n\n# Ex\u00e9cuter en mode surveillance\noptim-test --watch\n\n# G\u00e9n\u00e9rer un rapport de test\noptim-test --report html\n</code></pre>"},{"location":"projects/commands/#commandes-de-deploiement","title":"Commandes de D\u00e9ploiement","text":"<pre><code># D\u00e9ployer vers staging\noptim-deploy --target staging\n\n# D\u00e9ployer avec capacit\u00e9 de rollback\noptim-deploy --target production --enable-rollback\n\n# D\u00e9ploiement en mode simulation\noptim-deploy --dry-run\n\n# D\u00e9ployer une version sp\u00e9cifique\noptim-deploy --version 1.2.3\n\n# Effectuer un rollback\noptim-deploy --rollback\n</code></pre>"},{"location":"projects/commands/#configuration","title":"Configuration","text":""},{"location":"projects/commands/#configuration-globale","title":"Configuration Globale","text":"<p>Cr\u00e9er un fichier de configuration globale \u00e0 <code>~/.optim/config.json</code> :</p> <pre><code>{\n  \"defaultEnvironment\": \"development\",\n  \"buildOutputDir\": \"./dist\",\n  \"testTimeout\": 30000,\n  \"deploymentTargets\": {\n    \"staging\": {\n      \"url\": \"https://staging.optim.com\",\n      \"apiKey\": \"staging-api-key\"\n    },\n    \"production\": {\n      \"url\": \"https://optim.com\",\n      \"apiKey\": \"production-api-key\"\n    }\n  }\n}\n</code></pre>"},{"location":"projects/commands/#configuration-de-projet","title":"Configuration de Projet","text":"<p>Cr\u00e9er un fichier de configuration sp\u00e9cifique au projet \u00e0 <code>./optim.json</code> :</p> <pre><code>{\n  \"name\": \"mon-projet\",\n  \"version\": \"1.0.0\",\n  \"build\": {\n    \"entry\": \"./src/index.js\",\n    \"outputDir\": \"./dist\",\n    \"sourceMap\": true\n  },\n  \"test\": {\n    \"testDir\": \"./tests\",\n    \"coverage\": {\n      \"threshold\": 80\n    }\n  },\n  \"deploy\": {\n    \"beforeDeploy\": [\"optim-test\", \"optim-build\"],\n    \"afterDeploy\": [\"optim-monitor --health-check\"]\n  }\n}\n</code></pre>"},{"location":"projects/commands/#utilisation-avancee","title":"Utilisation Avanc\u00e9e","text":""},{"location":"projects/commands/#scripts-personnalises","title":"Scripts Personnalis\u00e9s","text":""},{"location":"projects/commands/#variables-denvironnement","title":"Variables d'Environnement","text":"<pre><code># D\u00e9finir des variables sp\u00e9cifiques \u00e0 l'environnement\nexport OPTIM_ENV=production\nexport OPTIM_API_KEY=votre-cle-api\nexport OPTIM_LOG_LEVEL=debug\n\n# Utiliser dans les commandes\noptim-deploy --env $OPTIM_ENV\n</code></pre>"},{"location":"projects/commands/#hooks-et-plugins","title":"Hooks et Plugins","text":"<pre><code># Installer un plugin\noptim-config install-plugin @optim/eslint-plugin\n\n# Configurer des hooks\noptim-config set-hook pre-commit \"optim-lint &amp;&amp; optim-test\"\n\n# Ex\u00e9cuter les hooks manuellement\noptim-config run-hook pre-deploy\n</code></pre>"},{"location":"projects/commands/#exemples-dintegration","title":"Exemples d'Int\u00e9gration","text":""},{"location":"projects/commands/#integration-cicd","title":"Int\u00e9gration CI/CD","text":"<pre><code># Exemple GitHub Actions\nname: D\u00e9ployer\non:\n  push:\n    branches: [main]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Configurer Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: \"16\"\n      - name: Installer les d\u00e9pendances\n        run: npm ci\n      - name: Installer Optim CLI\n        run: npm install -g @optim/commands\n      - name: Ex\u00e9cuter les tests\n        run: optim-test --coverage\n      - name: Construire l'application\n        run: optim-build --env production\n      - name: D\u00e9ployer\n        run: optim-deploy --target production\n        env:\n          OPTIM_API_KEY: ${{ secrets.OPTIM_API_KEY }}\n</code></pre>"},{"location":"projects/commands/#integration-docker","title":"Int\u00e9gration Docker","text":"<pre><code># Exemple Dockerfile\nFROM node:16-alpine\n\n# Installer Optim CLI\nRUN npm install -g @optim/commands\n\n# Copier les fichiers du projet\nCOPY . /app\nWORKDIR /app\n\n# Installer les d\u00e9pendances\nRUN npm ci\n\n# Construire l'application\nRUN optim-build --env production\n\n# D\u00e9marrer l'application\nCMD [\"optim\", \"run\", \"start\"]\n</code></pre>"},{"location":"projects/commands/#depannage","title":"D\u00e9pannage","text":""},{"location":"projects/commands/#problemes-courants","title":"Probl\u00e8mes Courants","text":"<ol> <li>Commande Introuvable</li> </ol> <pre><code># Assurer l'installation globale\nnpm install -g @optim/commands\n\n# V\u00e9rifier le PATH\necho $PATH\n</code></pre> <ol> <li>Erreurs de Permission</li> </ol> <pre><code># Utiliser sudo pour l'installation globale\nsudo npm install -g @optim/commands\n\n# Ou configurer le pr\u00e9fixe npm\nnpm config set prefix ~/.npm-global\n</code></pre> <ol> <li>\u00c9checs de Construction</li> </ol> <pre><code># Nettoyer et reconstruire\noptim-build --clean\noptim-build --verbose\n\n# V\u00e9rifier les d\u00e9pendances\nnpm audit\n</code></pre>"},{"location":"projects/commands/#mode-debug","title":"Mode Debug","text":"<pre><code># Activer la journalisation de debug\nexport DEBUG=optim:*\noptim-build --verbose\n\n# V\u00e9rifier la configuration\noptim-config show\n\n# Valider l'environnement\noptim-config validate\n</code></pre>"},{"location":"projects/commands/#developpement","title":"D\u00e9veloppement","text":""},{"location":"projects/commands/#contribuer","title":"Contribuer","text":"<ol> <li>Forker le d\u00e9p\u00f4t</li> <li>Cr\u00e9er une branche de fonctionnalit\u00e9</li> <li>Impl\u00e9menter les changements avec des tests</li> <li>Soumettre une pull request</li> </ol>"},{"location":"projects/commands/#developpement-local","title":"D\u00e9veloppement Local","text":"<pre><code># Cloner le d\u00e9p\u00f4t\ngit clone https://github.com/optim/commands.git\ncd commands\n\n# Installer les d\u00e9pendances\nnpm install\n\n# Lier pour les tests locaux\nnpm link\n\n# Ex\u00e9cuter les tests\nnpm test\n\n# Construire\nnpm run build\n</code></pre>"},{"location":"projects/commands/#creer-de-nouvelles-commandes","title":"Cr\u00e9er de Nouvelles Commandes","text":"<pre><code>// lib/commands/ma-commande.js\nconst { Command } = require(\"@optim/commands-core\");\n\nclass MaCommande extends Command {\n  constructor() {\n    super(\"ma-commande\", \"Description de ma commande\");\n\n    this.option(\"-f, --force\", \"Forcer l'ex\u00e9cution\");\n    this.option(\"-o, --output &lt;dir&gt;\", \"R\u00e9pertoire de sortie\");\n  }\n\n  async execute(options) {\n    // Impl\u00e9mentation de la commande\n    console.log(\"Ex\u00e9cution de ma commande avec les options:\", options);\n  }\n}\n\nmodule.exports = MaCommande;\n</code></pre>"},{"location":"projects/commands/#reference-api","title":"R\u00e9f\u00e9rence API","text":""},{"location":"projects/commands/#classes-principales","title":"Classes Principales","text":"<ul> <li><code>Command</code> - Classe de base pour toutes les commandes</li> <li><code>Config</code> - Gestion de la configuration</li> <li><code>Logger</code> - Utilitaires de journalisation</li> <li><code>Utils</code> - Fonctions utilitaires communes</li> </ul>"},{"location":"projects/commands/#systeme-de-hooks","title":"Syst\u00e8me de Hooks","text":"<ul> <li><code>pre-build</code> - Avant l'ex\u00e9cution de la construction</li> <li><code>post-build</code> - Apr\u00e8s la completion de la construction</li> <li><code>pre-test</code> - Avant l'ex\u00e9cution des tests</li> <li><code>post-test</code> - Apr\u00e8s la completion des tests</li> <li><code>pre-deploy</code> - Avant le d\u00e9ploiement</li> <li><code>post-deploy</code> - Apr\u00e8s le d\u00e9ploiement</li> </ul>"},{"location":"projects/commands/#ressources","title":"Ressources","text":"<ul> <li>D\u00e9p\u00f4t GitHub</li> <li>Documentation API</li> <li>D\u00e9p\u00f4t d'Exemples</li> <li>Registre de Plugins</li> </ul> <p>Pour les questions ou le support, contactez l'\u00c9quipe Outils ou cr\u00e9ez un ticket dans le d\u00e9p\u00f4t.</p>"},{"location":"projects/commands/legacy/","title":"Welcome to Commands","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"projects/commands/legacy/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"projects/commands/legacy/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"projects/commands/legacy/#test-unitaire","title":"Test Unitaire","text":"<pre><code>browser.yml   # Yaml Config\n</code></pre>"},{"location":"projects/mobile/","title":"Mobile Platform Documentation","text":"<p>Welcome to the Mobile Platform documentation. This section covers our cross-platform mobile application suite.</p>"},{"location":"projects/mobile/#overview","title":"Overview","text":"<p>The Mobile Platform provides a unified mobile experience across iOS and Android devices, featuring:</p> <ul> <li>Cross-platform compatibility</li> <li>Native performance optimization</li> <li>Secure authentication and data handling</li> <li>Offline-first architecture</li> <li>Real-time synchronization</li> </ul>"},{"location":"projects/mobile/#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started - Setup and installation guide</li> <li>Development Guide - Developer documentation</li> <li>User Manual - End-user instructions</li> <li>API Reference - Technical API documentation</li> <li>Deployment - Deployment and operations</li> <li>Changelog - Version history</li> </ul>"},{"location":"projects/mobile/#architecture","title":"Architecture","text":"<pre><code>graph TB\n    A[Mobile App] --&gt; B[API Gateway]\n    B --&gt; C[Authentication Service]\n    B --&gt; D[Business Logic]\n    D --&gt; E[Database]\n    D --&gt; F[File Storage]\n    A --&gt; G[Local Storage]\n    A --&gt; H[Push Notifications]\n</code></pre>"},{"location":"projects/mobile/#key-features","title":"Key Features","text":""},{"location":"projects/mobile/#security","title":"\ud83d\udd10 Security","text":"<ul> <li>End-to-end encryption</li> <li>Biometric authentication</li> <li>Secure token management</li> </ul>"},{"location":"projects/mobile/#cross-platform","title":"\ud83d\udcf1 Cross-Platform","text":"<ul> <li>React Native framework</li> <li>Shared business logic</li> <li>Platform-specific optimizations</li> </ul>"},{"location":"projects/mobile/#synchronization","title":"\ud83d\udd04 Synchronization","text":"<ul> <li>Real-time data sync</li> <li>Offline capability</li> <li>Conflict resolution</li> </ul>"},{"location":"projects/mobile/#analytics","title":"\ud83d\udcca Analytics","text":"<ul> <li>Usage tracking</li> <li>Performance monitoring</li> <li>Error reporting</li> </ul>"},{"location":"projects/mobile/#support","title":"Support","text":"<p>For mobile platform support:</p> <ul> <li>Check the troubleshooting guide</li> <li>Review known issues</li> <li>Contact the mobile team</li> </ul> <p>Project maintained by the Mobile Development Team</p>"},{"location":"projects/mobile/development/","title":"Mobile Platform Development Guide","text":"<p>This guide provides comprehensive information for developers working on the Mobile Platform.</p>"},{"location":"projects/mobile/development/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"projects/mobile/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js (16.0 or higher)</li> <li>React Native CLI (latest)</li> <li>Xcode (for iOS development)</li> <li>Android Studio (for Android development)</li> <li>Git (for version control)</li> </ul>"},{"location":"projects/mobile/development/#installation","title":"Installation","text":"<ol> <li>Clone Repository</li> </ol> <pre><code>git clone https://github.com/optim/mobile-platform.git\ncd mobile-platform\n</code></pre> <ol> <li>Install Dependencies</li> </ol> <pre><code>npm install\n# or\nyarn install\n</code></pre> <ol> <li>iOS Setup</li> </ol> <pre><code>cd ios\npod install\ncd ..\n</code></pre> <ol> <li>Environment Configuration <pre><code>cp .env.example .env\n# Edit .env with your configuration\n</code></pre></li> </ol>"},{"location":"projects/mobile/development/#project-structure","title":"Project Structure","text":"<pre><code>mobile-platform/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/          # Reusable UI components\n\u2502   \u251c\u2500\u2500 screens/            # Screen components\n\u2502   \u251c\u2500\u2500 navigation/         # Navigation configuration\n\u2502   \u251c\u2500\u2500 services/           # API and business logic\n\u2502   \u251c\u2500\u2500 utils/              # Utility functions\n\u2502   \u251c\u2500\u2500 hooks/              # Custom React hooks\n\u2502   \u2514\u2500\u2500 types/              # TypeScript type definitions\n\u251c\u2500\u2500 ios/                    # iOS-specific code\n\u251c\u2500\u2500 android/                # Android-specific code\n\u251c\u2500\u2500 __tests__/             # Test files\n\u2514\u2500\u2500 docs/                  # Documentation\n</code></pre>"},{"location":"projects/mobile/development/#development-workflow","title":"Development Workflow","text":""},{"location":"projects/mobile/development/#running-the-app","title":"Running the App","text":"<ol> <li>Start Metro Bundler</li> </ol> <pre><code>npm start\n# or\nyarn start\n</code></pre> <ol> <li>Run on iOS</li> </ol> <pre><code>npm run ios\n# or\nyarn ios\n</code></pre> <ol> <li>Run on Android <pre><code>npm run android\n# or\nyarn android\n</code></pre></li> </ol>"},{"location":"projects/mobile/development/#development-commands","title":"Development Commands","text":"<pre><code># Type checking\nnpm run type-check\n\n# Linting\nnpm run lint\nnpm run lint:fix\n\n# Testing\nnpm run test\nnpm run test:watch\nnpm run test:coverage\n\n# Build\nnpm run build:ios\nnpm run build:android\n</code></pre>"},{"location":"projects/mobile/development/#architecture","title":"Architecture","text":""},{"location":"projects/mobile/development/#component-architecture","title":"Component Architecture","text":"<p>The app follows a component-based architecture with:</p> <ul> <li>Atomic Design - Components organized by complexity</li> <li>Container/Presenter - Separation of logic and presentation</li> <li>Hooks - Custom hooks for business logic</li> </ul>"},{"location":"projects/mobile/development/#state-management","title":"State Management","text":"<pre><code>// Using Redux Toolkit\ninterface AppState {\n  auth: AuthState;\n  documents: DocumentState;\n  sync: SyncState;\n  ui: UIState;\n}\n</code></pre>"},{"location":"projects/mobile/development/#navigation","title":"Navigation","text":"<pre><code>// React Navigation v6\ntype RootStackParamList = {\n  Auth: undefined;\n  Main: undefined;\n  Document: { documentId: string };\n};\n</code></pre>"},{"location":"projects/mobile/development/#api-integration","title":"API Integration","text":""},{"location":"projects/mobile/development/#service-layer","title":"Service Layer","text":"<pre><code>// services/api.ts\nclass APIService {\n  async getDocuments(): Promise&lt;Document[]&gt; {\n    const response = await fetch(\"/api/documents\");\n    return response.json();\n  }\n}\n</code></pre>"},{"location":"projects/mobile/development/#error-handling","title":"Error Handling","text":"<pre><code>// utils/errorHandler.ts\nexport const handleAPIError = (error: APIError) =&gt; {\n  // Centralized error handling logic\n};\n</code></pre>"},{"location":"projects/mobile/development/#testing","title":"Testing","text":""},{"location":"projects/mobile/development/#test-structure","title":"Test Structure","text":"<pre><code>__tests__/\n\u251c\u2500\u2500 components/         # Component tests\n\u251c\u2500\u2500 screens/           # Screen tests\n\u251c\u2500\u2500 services/          # Service tests\n\u251c\u2500\u2500 utils/             # Utility tests\n\u2514\u2500\u2500 __mocks__/         # Mock files\n</code></pre>"},{"location":"projects/mobile/development/#testing-best-practices","title":"Testing Best Practices","text":"<ol> <li>Unit Tests - Test individual components and functions</li> <li>Integration Tests - Test component interactions</li> <li>E2E Tests - Test complete user workflows</li> </ol>"},{"location":"projects/mobile/development/#example-test","title":"Example Test","text":"<pre><code>import { render, fireEvent } from \"@testing-library/react-native\";\nimport { LoginScreen } from \"../src/screens/LoginScreen\";\n\ndescribe(\"LoginScreen\", () =&gt; {\n  it(\"should handle login submission\", () =&gt; {\n    const mockLogin = jest.fn();\n    const { getByTestId } = render(&lt;LoginScreen onLogin={mockLogin} /&gt;);\n\n    fireEvent.press(getByTestId(\"login-button\"));\n    expect(mockLogin).toHaveBeenCalled();\n  });\n});\n</code></pre>"},{"location":"projects/mobile/development/#build-and-deployment","title":"Build and Deployment","text":""},{"location":"projects/mobile/development/#ios-build","title":"iOS Build","text":"<ol> <li>Configure Signing</li> </ol> <pre><code># Update provisioning profiles\n# Configure certificates in Xcode\n</code></pre> <ol> <li>Build for Release <pre><code>npm run build:ios:release\n</code></pre></li> </ol>"},{"location":"projects/mobile/development/#android-build","title":"Android Build","text":"<ol> <li>Generate Keystore</li> </ol> <pre><code>keytool -genkey -v -keystore release-key.keystore -alias release-key -keyalg RSA -keysize 2048 -validity 10000\n</code></pre> <ol> <li>Build for Release <pre><code>npm run build:android:release\n</code></pre></li> </ol>"},{"location":"projects/mobile/development/#code-style-guidelines","title":"Code Style Guidelines","text":""},{"location":"projects/mobile/development/#typescript","title":"TypeScript","text":"<ul> <li>Use strict TypeScript configuration</li> <li>Define interfaces for all data structures</li> <li>Prefer type inference where possible</li> </ul>"},{"location":"projects/mobile/development/#react-native","title":"React Native","text":"<ul> <li>Use functional components with hooks</li> <li>Follow React Native naming conventions</li> <li>Use TypeScript for prop types</li> </ul>"},{"location":"projects/mobile/development/#styling","title":"Styling","text":"<pre><code>// Use StyleSheet.create for styles\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n  },\n});\n</code></pre>"},{"location":"projects/mobile/development/#performance-optimization","title":"Performance Optimization","text":""},{"location":"projects/mobile/development/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Image Optimization</p> </li> <li> <p>Use appropriate image formats</p> </li> <li>Implement lazy loading</li> <li> <p>Optimize image sizes</p> </li> <li> <p>List Performance</p> </li> <li> <p>Use FlatList for large datasets</p> </li> <li>Implement proper keyExtractor</li> <li> <p>Use getItemLayout when possible</p> </li> <li> <p>Bundle Size</p> </li> <li>Use dynamic imports</li> <li>Implement code splitting</li> <li>Remove unused dependencies</li> </ol>"},{"location":"projects/mobile/development/#debugging","title":"Debugging","text":""},{"location":"projects/mobile/development/#development-tools","title":"Development Tools","text":"<ul> <li>Flipper - Debugging and inspection</li> <li>Reactotron - React Native debugging</li> <li>VS Code Debugger - Breakpoint debugging</li> </ul>"},{"location":"projects/mobile/development/#common-issues","title":"Common Issues","text":"<ol> <li>Metro Bundle Issues</li> </ol> <pre><code>npm start -- --reset-cache\n</code></pre> <ol> <li>iOS Build Issues</li> </ol> <pre><code>cd ios &amp;&amp; pod install\n</code></pre> <ol> <li>Android Build Issues <pre><code>cd android &amp;&amp; ./gradlew clean\n</code></pre></li> </ol>"},{"location":"projects/mobile/development/#contributing","title":"Contributing","text":""},{"location":"projects/mobile/development/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create feature branch from <code>develop</code></li> <li>Implement changes with tests</li> <li>Update documentation</li> <li>Submit PR for review</li> </ol>"},{"location":"projects/mobile/development/#commit-message-format","title":"Commit Message Format","text":"<pre><code>type(scope): description\n\nfeat(auth): add biometric authentication\nfix(sync): resolve offline data sync issue\ndocs(api): update API documentation\n</code></pre>"},{"location":"projects/mobile/development/#resources","title":"Resources","text":"<ul> <li>React Native Documentation</li> <li>TypeScript Handbook</li> <li>Testing Library</li> <li>Redux Toolkit</li> </ul> <p>For development questions, contact the Mobile Development Team or create an issue in the repository.</p>"},{"location":"projects/mobile/getting-started/","title":"Getting Started with Mobile Platform","text":"<p>This guide will help you get up and running with the Mobile Platform quickly.</p>"},{"location":"projects/mobile/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>iOS device (iOS 12.0+) or Android device (API level 21+)</li> <li>Stable internet connection for initial setup</li> <li>Valid Optim account credentials</li> </ul>"},{"location":"projects/mobile/getting-started/#installation","title":"Installation","text":""},{"location":"projects/mobile/getting-started/#ios-installation","title":"iOS Installation","text":"<ol> <li>App Store Download</li> </ol> <pre><code>Search for \"Optim Mobile\" in the App Store\nTap \"Get\" to download and install\n</code></pre> <ol> <li>TestFlight (Beta) <pre><code>Install TestFlight from the App Store\nUse the invitation link provided by your administrator\n</code></pre></li> </ol>"},{"location":"projects/mobile/getting-started/#android-installation","title":"Android Installation","text":"<ol> <li>Google Play Store</li> </ol> <pre><code>Search for \"Optim Mobile\" in Google Play\nTap \"Install\" to download\n</code></pre> <ol> <li>Direct APK (Enterprise) <pre><code>Download APK from internal distribution\nEnable \"Unknown Sources\" in Settings\nInstall the APK file\n</code></pre></li> </ol>"},{"location":"projects/mobile/getting-started/#initial-setup","title":"Initial Setup","text":""},{"location":"projects/mobile/getting-started/#first-launch","title":"First Launch","text":"<ol> <li> <p>Accept Permissions</p> </li> <li> <p>Camera access (for document scanning)</p> </li> <li>Location services (for location-based features)</li> <li> <p>Notifications (for real-time updates)</p> </li> <li> <p>Account Setup</p> </li> </ol> <pre><code>Enter your Optim username\nEnter your password\nComplete two-factor authentication if enabled\n</code></pre> <ol> <li>Profile Configuration</li> <li>Set up your profile information</li> <li>Configure notification preferences</li> <li>Set up biometric authentication (recommended)</li> </ol>"},{"location":"projects/mobile/getting-started/#data-synchronization","title":"Data Synchronization","text":"<p>The app will automatically sync your data during first setup:</p> <ol> <li> <p>Initial Sync</p> </li> <li> <p>Wait for the sync indicator to complete</p> </li> <li>Ensure stable internet connection</li> <li> <p>May take 2-5 minutes depending on data volume</p> </li> <li> <p>Verification</p> </li> <li>Check that your data appears correctly</li> <li>Verify recent documents are available</li> <li>Test basic functionality</li> </ol>"},{"location":"projects/mobile/getting-started/#quick-tour","title":"Quick Tour","text":""},{"location":"projects/mobile/getting-started/#main-navigation","title":"Main Navigation","text":"<ul> <li>Dashboard - Overview of recent activity</li> <li>Documents - File management and viewing</li> <li>Messages - Communication hub</li> <li>Settings - App configuration and preferences</li> </ul>"},{"location":"projects/mobile/getting-started/#essential-features","title":"Essential Features","text":"<ol> <li>Document Scanning</li> </ol> <pre><code>Tap the \"+\" button in Documents\nSelect \"Scan Document\"\nPosition document in frame\nTap capture button\n</code></pre> <ol> <li>Offline Mode</li> </ol> <pre><code>Documents sync automatically for offline access\nGreen indicator = Available offline\nGray indicator = Online only\n</code></pre> <ol> <li>Search <pre><code>Use the search bar at the top\nSearch across all documents and messages\nUse filters to narrow results\n</code></pre></li> </ol>"},{"location":"projects/mobile/getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"projects/mobile/getting-started/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Login Problems</p> </li> <li> <p>Verify username/password</p> </li> <li>Check internet connection</li> <li> <p>Clear app cache if needed</p> </li> <li> <p>Sync Issues</p> </li> <li> <p>Force close and restart app</p> </li> <li>Check storage space</li> <li> <p>Verify network connectivity</p> </li> <li> <p>Performance Issues</p> </li> <li>Restart the app</li> <li>Update to latest version</li> <li>Clear cache in Settings</li> </ol>"},{"location":"projects/mobile/getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>In-App Help - Tap \"?\" in Settings</li> <li>Support Portal - Access via Settings &gt; Support</li> <li>Emergency Contact - Use the emergency contact feature</li> </ul>"},{"location":"projects/mobile/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>User Guide - Detailed feature documentation</li> <li>Advanced Features - Power user capabilities</li> <li>Tips &amp; Tricks - Productivity enhancements</li> </ul> <p>Need additional help? Contact your system administrator or check our FAQ.</p>"},{"location":"projects/mobile/legacy/","title":"Welcome to Mobile","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"projects/mobile/legacy/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"projects/mobile/legacy/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"projects/mobile/legacy/#test-unitaire","title":"Test Unitaire","text":"<pre><code>browser.yml   # Yaml Config\n</code></pre>"},{"location":"projects/saas/","title":"Documentation de la Plateforme SAAS","text":"<p>Bienvenue dans la documentation de la Plateforme SAAS. Cette section couvre notre solution Software-as-a-Service qui fournit des services multi-locataires \u00e9volutifs \u00e0 nos clients.</p>"},{"location":"projects/saas/#apercu","title":"Aper\u00e7u","text":"<p>La Plateforme SAAS est une solution multi-locataire compl\u00e8te con\u00e7ue pour fournir des services logiciels \u00e9volutifs aux entreprises de toutes tailles. Elle comprend :</p> <ul> <li>Multi-location : Isolation s\u00e9curis\u00e9e des locataires et s\u00e9gr\u00e9gation des donn\u00e9es</li> <li>Architecture \u00c9volutive : Mise \u00e0 l'\u00e9chelle automatique selon la demande</li> <li>Gestion des Abonnements : Mod\u00e8les de facturation et d'abonnement flexibles</li> <li>Conception API-First : APIs RESTful avec documentation compl\u00e8te</li> <li>Analytiques en Temps R\u00e9el : Rapports avanc\u00e9s et insights</li> <li>Hub d'Int\u00e9gration : Int\u00e9grations de services tiers</li> </ul>"},{"location":"projects/saas/#liens-rapides","title":"Liens Rapides","text":"<ul> <li>Premiers Pas - Guide de configuration et d'int\u00e9gration</li> <li>Guide Utilisateur - Documentation utilisateur final</li> <li>Guide Administrateur - Fonctionnalit\u00e9s administratives</li> <li>Guide de D\u00e9veloppement - Documentation d\u00e9veloppeur</li> <li>R\u00e9f\u00e9rence API - Documentation API compl\u00e8te</li> <li>D\u00e9ploiement - D\u00e9ploiement et op\u00e9rations</li> <li>Journal des Modifications - Historique des versions et mises \u00e0 jour</li> </ul>"},{"location":"projects/saas/#architecture","title":"Architecture","text":"<pre><code>graph TB\n    A[\u00c9quilibreur de Charge] --&gt; B[Passerelle API]\n    B --&gt; C[Service d'Authentification]\n    B --&gt; D[Gestionnaire de Locataires]\n    B --&gt; E[Services Principaux]\n    E --&gt; F[Gestion des Utilisateurs]\n    E --&gt; G[Service d'Abonnement]\n    E --&gt; H[Moteur d'Analytiques]\n    E --&gt; I[Service de Notification]\n    D --&gt; J[Base de Donn\u00e9es Locataires]\n    F --&gt; K[Base de Donn\u00e9es Utilisateurs]\n    G --&gt; L[Base de Donn\u00e9es Facturation]\n    H --&gt; M[Base de Donn\u00e9es Analytiques]\n    N[Stockage de Fichiers] --&gt; E\n    O[Couche de Cache] --&gt; E\n</code></pre>"},{"location":"projects/saas/#fonctionnalites-cles","title":"Fonctionnalit\u00e9s Cl\u00e9s","text":""},{"location":"projects/saas/#architecture-multi-locataire","title":"\ud83c\udfe2 Architecture Multi-Locataire","text":"<ul> <li>Isolation des Locataires : S\u00e9paration compl\u00e8te des donn\u00e9es et ressources</li> <li>Image de Marque Personnalis\u00e9e : Solutions en marque blanche pour les clients entreprise</li> <li>Gestion des Ressources : Attribution et limites de ressources par locataire</li> <li>S\u00e9curit\u00e9 : S\u00e9curit\u00e9 avanc\u00e9e avec contr\u00f4les d'acc\u00e8s au niveau locataire</li> </ul>"},{"location":"projects/saas/#gestion-des-abonnements","title":"\ud83d\udcb3 Gestion des Abonnements","text":"<ul> <li>Plans Flexibles : Plusieurs niveaux d'abonnement et plans personnalis\u00e9s</li> <li>Suivi d'Utilisation : Surveillance et facturation de l'utilisation en temps r\u00e9el</li> <li>Int\u00e9gration de Paiement : Stripe, PayPal et facturation entreprise</li> <li>Gestion des Essais : Essais gratuits et workflows de mise \u00e0 niveau</li> </ul>"},{"location":"projects/saas/#analytiques-et-rapports","title":"\ud83d\udcca Analytiques et Rapports","text":"<ul> <li>Tableaux de Bord Temps R\u00e9el : M\u00e9triques et KPI en direct</li> <li>Rapports Personnalis\u00e9s : Capacit\u00e9s de rapports sp\u00e9cifiques aux locataires</li> <li>Export de Donn\u00e9es : Exports de donn\u00e9es CSV, PDF et API</li> <li>Analytiques d'Utilisation : Mod\u00e8les d'utilisation d\u00e9taill\u00e9s et insights</li> </ul>"},{"location":"projects/saas/#ecosysteme-dintegration","title":"\ud83d\udd0c \u00c9cosyst\u00e8me d'Int\u00e9gration","text":"<ul> <li>APIs REST : Couverture API compl\u00e8te</li> <li>Webhooks : Notifications d'\u00e9v\u00e9nements en temps r\u00e9el</li> <li>Int\u00e9grations Tierces : Outils CRM, ERP et de productivit\u00e9</li> <li>Support SSO : SAML, OAuth et Active Directory</li> </ul>"},{"location":"projects/saas/#performance-et-evolutivite","title":"\ud83d\ude80 Performance et \u00c9volutivit\u00e9","text":"<ul> <li>Mise \u00e0 l'\u00c9chelle Automatique : Mise \u00e0 l'\u00e9chelle horizontale et verticale</li> <li>Int\u00e9gration CDN : Livraison de contenu globale</li> <li>Strat\u00e9gie de Cache : Cache multi-niveaux pour performance optimale</li> <li>\u00c9quilibrage de Charge : Distribution intelligente du trafic</li> </ul>"},{"location":"projects/saas/#stack-technologique","title":"Stack Technologique","text":""},{"location":"projects/saas/#frontend","title":"Frontend","text":"<ul> <li>React 18 avec TypeScript</li> <li>Material-UI pour un design coh\u00e9rent</li> <li>Redux Toolkit pour la gestion d'\u00e9tat</li> <li>React Query pour la r\u00e9cup\u00e9ration de donn\u00e9es</li> </ul>"},{"location":"projects/saas/#backend","title":"Backend","text":"<ul> <li>Node.js avec Express.js</li> <li>TypeScript pour la s\u00e9curit\u00e9 des types</li> <li>PostgreSQL avec sch\u00e9ma multi-locataire</li> <li>Redis pour le cache et les sessions</li> </ul>"},{"location":"projects/saas/#infrastructure","title":"Infrastructure","text":"<ul> <li>Docker containerisation</li> <li>Kubernetes orchestration</li> <li>AWS/GCP fournisseurs cloud</li> <li>Terraform pour l'infrastructure en tant que code</li> </ul>"},{"location":"projects/saas/#surveillance-et-securite","title":"Surveillance et S\u00e9curit\u00e9","text":"<ul> <li>Prometheus/Grafana pour la surveillance</li> <li>Stack ELK pour les logs</li> <li>Auth0 pour l'authentification</li> <li>Vault pour la gestion des secrets</li> </ul>"},{"location":"projects/saas/#premiers-pas","title":"Premiers Pas","text":""},{"location":"projects/saas/#pour-les-utilisateurs-finaux","title":"Pour les Utilisateurs Finaux","text":"<ol> <li>Configuration du Compte : Inscrivez-vous ou recevez une invitation de l'administrateur</li> <li>S\u00e9lection de Locataire : Choisissez ou cr\u00e9ez votre espace de travail</li> <li>Configuration du Profil : Configurez votre profil utilisateur et pr\u00e9f\u00e9rences</li> <li>Visite des Fonctionnalit\u00e9s : Explorez la plateforme avec des tutoriels guid\u00e9s</li> </ol>"},{"location":"projects/saas/#pour-les-developpeurs","title":"Pour les D\u00e9veloppeurs","text":"<ol> <li>Environnement de D\u00e9veloppement : Configurez l'environnement de d\u00e9veloppement local</li> <li>Acc\u00e8s API : Obtenez les cl\u00e9s API et consultez la documentation</li> <li>Guide d'Int\u00e9gration : Suivez les mod\u00e8les et exemples d'int\u00e9gration</li> <li>Tests : Utilisez l'environnement sandbox pour les tests</li> </ol>"},{"location":"projects/saas/#pour-les-administrateurs","title":"Pour les Administrateurs","text":"<ol> <li>Gestion des Locataires : Cr\u00e9ez et configurez les instances de locataires</li> <li>Administration des Utilisateurs : G\u00e9rez les utilisateurs, r\u00f4les et permissions</li> <li>Configuration des Abonnements : Configurez la facturation et les plans d'abonnement</li> <li>Configuration Syst\u00e8me : Param\u00e8tres et personnalisations \u00e0 l'\u00e9chelle de la plateforme</li> </ol>"},{"location":"projects/saas/#niveaux-de-service","title":"Niveaux de Service","text":""},{"location":"projects/saas/#plan-debutant","title":"Plan D\u00e9butant","text":"<ul> <li>Jusqu'\u00e0 10 utilisateurs</li> <li>Fonctionnalit\u00e9s de base</li> <li>Support par email</li> <li>SLA de disponibilit\u00e9 99.5%</li> </ul>"},{"location":"projects/saas/#plan-professionnel","title":"Plan Professionnel","text":"<ul> <li>Jusqu'\u00e0 100 utilisateurs</li> <li>Fonctionnalit\u00e9s avanc\u00e9es</li> <li>Support prioritaire</li> <li>SLA de disponibilit\u00e9 99.9%</li> </ul>"},{"location":"projects/saas/#plan-entreprise","title":"Plan Entreprise","text":"<ul> <li>Utilisateurs illimit\u00e9s</li> <li>Fonctionnalit\u00e9s personnalis\u00e9es</li> <li>Support d\u00e9di\u00e9</li> <li>SLA de disponibilit\u00e9 99.99%</li> <li>Int\u00e9grations personnalis\u00e9es</li> </ul>"},{"location":"projects/saas/#securite-et-conformite","title":"S\u00e9curit\u00e9 et Conformit\u00e9","text":""},{"location":"projects/saas/#fonctionnalites-de-securite","title":"Fonctionnalit\u00e9s de S\u00e9curit\u00e9","text":"<ul> <li>Chiffrement de Bout en Bout : Chiffrement des donn\u00e9es en transit et au repos</li> <li>Authentification Multi-Facteurs : 2FA bas\u00e9 sur TOTP et SMS</li> <li>Contr\u00f4le d'Acc\u00e8s Bas\u00e9 sur les R\u00f4les : Gestion granulaire des permissions</li> <li>Journalisation d'Audit : Journalisation compl\u00e8te des activit\u00e9s</li> </ul>"},{"location":"projects/saas/#standards-de-conformite","title":"Standards de Conformit\u00e9","text":"<ul> <li>Certifi\u00e9 SOC 2 Type II</li> <li>Traitement des donn\u00e9es conforme RGPD</li> <li>Pr\u00eat HIPAA pour les locataires de sant\u00e9</li> <li>Gestion de s\u00e9curit\u00e9 ISO 27001</li> </ul>"},{"location":"projects/saas/#support-et-ressources","title":"Support et Ressources","text":""},{"location":"projects/saas/#documentation","title":"Documentation","text":"<ul> <li>Manuel Utilisateur - Documentation utilisateur compl\u00e8te</li> <li>Documentation API - Documentation API interactive</li> <li>Guide d'Int\u00e9gration - Int\u00e9grations tierces</li> <li>D\u00e9pannage - Probl\u00e8mes courants et solutions</li> </ul>"},{"location":"projects/saas/#canaux-de-support","title":"Canaux de Support","text":"<ul> <li>Centre d'Aide - Base de connaissances en libre-service</li> <li>Chat en Direct - Support en temps r\u00e9el pendant les heures ouvrables</li> <li>Support Email - support@optim.com</li> <li>Support T\u00e9l\u00e9phonique - Disponible pour les plans Entreprise</li> </ul>"},{"location":"projects/saas/#communaute","title":"Communaut\u00e9","text":"<ul> <li>Forum D\u00e9veloppeur - Discussions communautaires et Q&amp;R</li> <li>Canal Slack - Chat d\u00e9veloppeur en temps r\u00e9el</li> <li>Webinaires - Mises \u00e0 jour produit et formations r\u00e9guli\u00e8res</li> <li>Groupes d'Utilisateurs - Rencontres locales et virtuelles</li> </ul>"},{"location":"projects/saas/#feuille-de-route","title":"Feuille de Route","text":""},{"location":"projects/saas/#q4-2025","title":"Q4 2025","text":"<ul> <li>Tableau de bord analytiques avanc\u00e9</li> <li>Application mobile compagnon</li> <li>Limitation de taux API am\u00e9lior\u00e9e</li> <li>Nouveaux partenariats d'int\u00e9gration</li> </ul>"},{"location":"projects/saas/#q1-2026","title":"Q1 2026","text":"<ul> <li>Insights aliment\u00e9s par IA</li> <li>Automatisation de workflow avanc\u00e9e</li> <li>D\u00e9ploiement multi-r\u00e9gion</li> <li>Fonctionnalit\u00e9s de s\u00e9curit\u00e9 am\u00e9lior\u00e9es</li> </ul>"},{"location":"projects/saas/#q2-2026","title":"Q2 2026","text":"<ul> <li>Support de domaine personnalis\u00e9</li> <li>Constructeur de rapports avanc\u00e9</li> <li>Int\u00e9grations marketplace</li> <li>Optimisations de performance</li> </ul>"},{"location":"projects/saas/#contribution","title":"Contribution","text":"<p>Nous accueillons les contributions de notre communaut\u00e9 :</p> <ol> <li>Rapports de Bugs - Soumettez les probl\u00e8mes via GitHub</li> <li>Demandes de Fonctionnalit\u00e9s - Proposez de nouvelles fonctionnalit\u00e9s</li> <li>Documentation - Aidez \u00e0 am\u00e9liorer notre documentation</li> <li>Contributions de Code - Soumettez des pull requests</li> </ol> <p>Pour des directives de contribution d\u00e9taill\u00e9es, consultez notre Guide de Contribution.</p> <p>Projet maintenu par l'\u00c9quipe Plateforme SAAS | Pour le support : saas-team@optim.com</p>"},{"location":"projects/saas/development/","title":"SAAS Platform Development Guide","text":"<p>This guide provides comprehensive information for developers working on the SAAS Platform, including architecture, development practices, and deployment procedures.</p>"},{"location":"projects/saas/development/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"projects/saas/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js (18.0 or higher)</li> <li>npm or yarn package manager</li> <li>PostgreSQL (14.0 or higher)</li> <li>Redis (6.0 or higher)</li> <li>Docker and Docker Compose</li> <li>Git for version control</li> </ul>"},{"location":"projects/saas/development/#local-development-setup","title":"Local Development Setup","text":"<ol> <li>Clone Repository</li> </ol> <pre><code>git clone https://github.com/optim/saas-platform.git\ncd saas-platform\n</code></pre> <ol> <li>Install Dependencies</li> </ol> <pre><code># Backend dependencies\ncd backend\nnpm install\n\n# Frontend dependencies\ncd ../frontend\nnpm install\n\n# Return to root\ncd ..\n</code></pre> <ol> <li>Environment Configuration</li> </ol> <pre><code># Copy environment templates\ncp backend/.env.example backend/.env\ncp frontend/.env.example frontend/.env\n\n# Configure environment variables\n# Edit .env files with your local settings\n</code></pre> <ol> <li>Database Setup</li> </ol> <pre><code># Start PostgreSQL and Redis with Docker\ndocker-compose up -d postgres redis\n\n# Run database migrations\ncd backend\nnpm run migrate\n\n# Seed with development data\nnpm run seed\n</code></pre> <ol> <li>Start Development Servers</li> </ol> <pre><code># Terminal 1: Backend API\ncd backend\nnpm run dev\n\n# Terminal 2: Frontend\ncd frontend\nnpm run dev\n\n# Terminal 3: Background jobs (optional)\ncd backend\nnpm run worker\n</code></pre>"},{"location":"projects/saas/development/#project-structure","title":"Project Structure","text":"<pre><code>saas-platform/\n\u251c\u2500\u2500 backend/                    # Node.js API server\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 controllers/        # Request handlers\n\u2502   \u2502   \u251c\u2500\u2500 services/          # Business logic\n\u2502   \u2502   \u251c\u2500\u2500 models/            # Database models\n\u2502   \u2502   \u251c\u2500\u2500 middleware/        # Express middleware\n\u2502   \u2502   \u251c\u2500\u2500 routes/            # API routes\n\u2502   \u2502   \u251c\u2500\u2500 utils/             # Utility functions\n\u2502   \u2502   \u2514\u2500\u2500 types/             # TypeScript types\n\u2502   \u251c\u2500\u2500 migrations/            # Database migrations\n\u2502   \u251c\u2500\u2500 seeds/                 # Development data\n\u2502   \u2514\u2500\u2500 tests/                 # Backend tests\n\u251c\u2500\u2500 frontend/                  # React application\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 components/        # React components\n\u2502   \u2502   \u251c\u2500\u2500 pages/            # Page components\n\u2502   \u2502   \u251c\u2500\u2500 hooks/            # Custom hooks\n\u2502   \u2502   \u251c\u2500\u2500 services/         # API client\n\u2502   \u2502   \u251c\u2500\u2500 store/            # Redux store\n\u2502   \u2502   \u251c\u2500\u2500 utils/            # Frontend utilities\n\u2502   \u2502   \u2514\u2500\u2500 types/            # TypeScript types\n\u2502   \u251c\u2500\u2500 public/               # Static assets\n\u2502   \u2514\u2500\u2500 tests/                # Frontend tests\n\u251c\u2500\u2500 shared/                   # Shared code and types\n\u251c\u2500\u2500 infrastructure/           # Infrastructure as code\n\u251c\u2500\u2500 docs/                    # Technical documentation\n\u2514\u2500\u2500 scripts/                 # Build and deployment scripts\n</code></pre>"},{"location":"projects/saas/development/#architecture-overview","title":"Architecture Overview","text":""},{"location":"projects/saas/development/#multi-tenant-architecture","title":"Multi-Tenant Architecture","text":"<pre><code>// Tenant isolation strategy\ninterface TenantContext {\n  tenantId: string;\n  schema: string;\n  features: Feature[];\n  limits: ResourceLimits;\n}\n\n// Middleware for tenant resolution\nexport const resolveTenant = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) =&gt; {\n  const tenantId = extractTenantId(req);\n  const tenant = await getTenantById(tenantId);\n\n  if (!tenant) {\n    return res.status(404).json({ error: \"Tenant not found\" });\n  }\n\n  req.tenant = tenant;\n  next();\n};\n</code></pre>"},{"location":"projects/saas/development/#database-schema-design","title":"Database Schema Design","text":"<pre><code>-- Multi-tenant schema design\nCREATE SCHEMA tenant_core;\nCREATE SCHEMA tenant_data;\n\n-- Core tables (shared across tenants)\nCREATE TABLE tenant_core.tenants (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(255) NOT NULL,\n  domain VARCHAR(255) UNIQUE,\n  schema_name VARCHAR(63) NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW(),\n  settings JSONB DEFAULT '{}'\n);\n\n-- Tenant-specific tables (per tenant schema)\nCREATE TABLE tenant_data.users (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  tenant_id UUID REFERENCES tenant_core.tenants(id),\n  email VARCHAR(255) NOT NULL,\n  name VARCHAR(255) NOT NULL,\n  role VARCHAR(50) DEFAULT 'user',\n  created_at TIMESTAMP DEFAULT NOW()\n);\n</code></pre>"},{"location":"projects/saas/development/#api-design-patterns","title":"API Design Patterns","text":""},{"location":"projects/saas/development/#restful-api-structure","title":"RESTful API Structure","text":"<pre><code>// User controller example\nexport class UserController {\n  async getUsers(req: AuthenticatedRequest, res: Response) {\n    try {\n      const { tenant } = req;\n      const { page = 1, limit = 20, search } = req.query;\n\n      const users = await this.userService.getUsers(tenant.id, {\n        page: Number(page),\n        limit: Number(limit),\n        search: search as string,\n      });\n\n      res.json({\n        data: users.data,\n        pagination: users.pagination,\n      });\n    } catch (error) {\n      this.handleError(error, res);\n    }\n  }\n\n  async createUser(req: AuthenticatedRequest, res: Response) {\n    try {\n      const { tenant } = req;\n      const userData = this.validateUserData(req.body);\n\n      const user = await this.userService.createUser(tenant.id, userData);\n\n      res.status(201).json({ data: user });\n    } catch (error) {\n      this.handleError(error, res);\n    }\n  }\n}\n</code></pre>"},{"location":"projects/saas/development/#graphql-implementation","title":"GraphQL Implementation","text":"<pre><code>// GraphQL resolver example\nexport const userResolvers = {\n  Query: {\n    users: async (\n      _: any,\n      args: { filter?: UserFilter; pagination?: Pagination },\n      context: AuthContext\n    ) =&gt; {\n      await requirePermission(context, \"read:users\");\n\n      return userService.getUsers(context.tenant.id, args);\n    },\n  },\n\n  Mutation: {\n    createUser: async (\n      _: any,\n      args: { input: CreateUserInput },\n      context: AuthContext\n    ) =&gt; {\n      await requirePermission(context, \"create:users\");\n\n      return userService.createUser(context.tenant.id, args.input);\n    },\n  },\n};\n</code></pre>"},{"location":"projects/saas/development/#frontend-development","title":"Frontend Development","text":""},{"location":"projects/saas/development/#component-architecture","title":"Component Architecture","text":"<pre><code>// Feature-based component structure\ninterface UserListProps {\n  tenantId: string;\n  filters?: UserFilters;\n  onUserSelect?: (user: User) =&gt; void;\n}\n\nexport const UserList: React.FC&lt;UserListProps&gt; = ({\n  tenantId,\n  filters,\n  onUserSelect,\n}) =&gt; {\n  const { data: users, isLoading, error } = useUsers(tenantId, filters);\n  const { mutate: deleteUser } = useDeleteUser();\n\n  if (isLoading) return &lt;LoadingSpinner /&gt;;\n  if (error) return &lt;ErrorMessage error={error} /&gt;;\n\n  return (\n    &lt;div className=\"user-list\"&gt;\n      {users?.map((user) =&gt; (\n        &lt;UserCard\n          key={user.id}\n          user={user}\n          onSelect={onUserSelect}\n          onDelete={() =&gt; deleteUser(user.id)}\n        /&gt;\n      ))}\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"projects/saas/development/#state-management","title":"State Management","text":"<pre><code>// Redux store configuration\nexport interface AppState {\n  auth: AuthState;\n  tenant: TenantState;\n  users: UsersState;\n  ui: UIState;\n}\n\n// Tenant slice\nexport const tenantSlice = createSlice({\n  name: \"tenant\",\n  initialState: {\n    current: null as Tenant | null,\n    settings: {},\n    features: [],\n    loading: false,\n  },\n  reducers: {\n    setCurrentTenant: (state, action) =&gt; {\n      state.current = action.payload;\n    },\n    updateTenantSettings: (state, action) =&gt; {\n      if (state.current) {\n        state.current.settings = {\n          ...state.current.settings,\n          ...action.payload,\n        };\n      }\n    },\n  },\n});\n</code></pre>"},{"location":"projects/saas/development/#custom-hooks","title":"Custom Hooks","text":"<pre><code>// Custom hook for API data fetching\nexport const useUsers = (tenantId: string, filters?: UserFilters) =&gt; {\n  return useQuery(\n    [\"users\", tenantId, filters],\n    () =&gt; userApi.getUsers(tenantId, filters),\n    {\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      cacheTime: 10 * 60 * 1000, // 10 minutes\n      refetchOnWindowFocus: false,\n    }\n  );\n};\n\n// Custom hook for mutations\nexport const useCreateUser = () =&gt; {\n  const queryClient = useQueryClient();\n\n  return useMutation((data: CreateUserData) =&gt; userApi.createUser(data), {\n    onSuccess: (newUser) =&gt; {\n      queryClient.invalidateQueries([\"users\"]);\n      toast.success(\"User created successfully\");\n    },\n    onError: (error) =&gt; {\n      toast.error(\"Failed to create user\");\n      console.error(\"User creation error:\", error);\n    },\n  });\n};\n</code></pre>"},{"location":"projects/saas/development/#authentication-authorization","title":"Authentication &amp; Authorization","text":""},{"location":"projects/saas/development/#jwt-implementation","title":"JWT Implementation","text":"<pre><code>// JWT service\nexport class AuthService {\n  private readonly jwtSecret = process.env.JWT_SECRET!;\n\n  generateToken(user: User, tenant: Tenant): string {\n    const payload = {\n      userId: user.id,\n      tenantId: tenant.id,\n      email: user.email,\n      role: user.role,\n      permissions: this.getUserPermissions(user, tenant),\n    };\n\n    return jwt.sign(payload, this.jwtSecret, {\n      expiresIn: \"24h\",\n      issuer: \"saas-platform\",\n      audience: tenant.domain,\n    });\n  }\n\n  verifyToken(token: string): TokenPayload {\n    try {\n      return jwt.verify(token, this.jwtSecret) as TokenPayload;\n    } catch (error) {\n      throw new AuthenticationError(\"Invalid token\");\n    }\n  }\n}\n</code></pre>"},{"location":"projects/saas/development/#permission-system","title":"Permission System","text":"<pre><code>// Permission definitions\nexport enum Permission {\n  READ_USERS = \"read:users\",\n  CREATE_USERS = \"create:users\",\n  UPDATE_USERS = \"update:users\",\n  DELETE_USERS = \"delete:users\",\n  MANAGE_TENANT = \"manage:tenant\",\n  VIEW_ANALYTICS = \"view:analytics\",\n}\n\n// Role-based permissions\nexport const ROLE_PERMISSIONS: Record&lt;string, Permission[]&gt; = {\n  admin: Object.values(Permission),\n  manager: [\n    Permission.READ_USERS,\n    Permission.CREATE_USERS,\n    Permission.UPDATE_USERS,\n    Permission.VIEW_ANALYTICS,\n  ],\n  user: [Permission.READ_USERS],\n};\n\n// Permission middleware\nexport const requirePermission = (permission: Permission) =&gt; {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) =&gt; {\n    if (!req.user.permissions.includes(permission)) {\n      return res.status(403).json({ error: \"Insufficient permissions\" });\n    }\n    next();\n  };\n};\n</code></pre>"},{"location":"projects/saas/development/#testing-strategy","title":"Testing Strategy","text":""},{"location":"projects/saas/development/#backend-testing","title":"Backend Testing","text":"<pre><code>// Unit test example\ndescribe(\"UserService\", () =&gt; {\n  let userService: UserService;\n  let mockRepository: jest.Mocked&lt;UserRepository&gt;;\n\n  beforeEach(() =&gt; {\n    mockRepository = createMockUserRepository();\n    userService = new UserService(mockRepository);\n  });\n\n  describe(\"createUser\", () =&gt; {\n    it(\"should create a user with valid data\", async () =&gt; {\n      const userData = {\n        email: \"test@example.com\",\n        name: \"Test User\",\n        role: \"user\",\n      };\n\n      const expectedUser = { id: \"123\", ...userData };\n      mockRepository.create.mockResolvedValue(expectedUser);\n\n      const result = await userService.createUser(\"tenant-1\", userData);\n\n      expect(result).toEqual(expectedUser);\n      expect(mockRepository.create).toHaveBeenCalledWith(\"tenant-1\", userData);\n    });\n  });\n});\n\n// Integration test example\ndescribe(\"User API\", () =&gt; {\n  let app: Application;\n  let tenantId: string;\n  let authToken: string;\n\n  beforeAll(async () =&gt; {\n    app = await createTestApp();\n    const { tenant, token } = await setupTestTenant();\n    tenantId = tenant.id;\n    authToken = token;\n  });\n\n  describe(\"POST /api/users\", () =&gt; {\n    it(\"should create a new user\", async () =&gt; {\n      const userData = {\n        email: \"newuser@example.com\",\n        name: \"New User\",\n        role: \"user\",\n      };\n\n      const response = await request(app)\n        .post(\"/api/users\")\n        .set(\"Authorization\", `Bearer ${authToken}`)\n        .send(userData)\n        .expect(201);\n\n      expect(response.body.data).toMatchObject(userData);\n    });\n  });\n});\n</code></pre>"},{"location":"projects/saas/development/#frontend-testing","title":"Frontend Testing","text":"<pre><code>// Component test example\nimport { render, screen, fireEvent } from \"@testing-library/react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { UserList } from \"../UserList\";\n\ndescribe(\"UserList\", () =&gt; {\n  const mockUsers = [\n    { id: \"1\", name: \"John Doe\", email: \"john@example.com\" },\n    { id: \"2\", name: \"Jane Smith\", email: \"jane@example.com\" },\n  ];\n\n  const renderWithProviders = (component: React.ReactElement) =&gt; {\n    const queryClient = new QueryClient({\n      defaultOptions: { queries: { retry: false } },\n    });\n\n    return render(\n      &lt;QueryClientProvider client={queryClient}&gt;\n        {component}\n      &lt;/QueryClientProvider&gt;\n    );\n  };\n\n  it(\"should render user list\", async () =&gt; {\n    jest.spyOn(userApi, \"getUsers\").mockResolvedValue(mockUsers);\n\n    renderWithProviders(&lt;UserList tenantId=\"tenant-1\" /&gt;);\n\n    expect(await screen.findByText(\"John Doe\")).toBeInTheDocument();\n    expect(await screen.findByText(\"Jane Smith\")).toBeInTheDocument();\n  });\n});\n</code></pre>"},{"location":"projects/saas/development/#performance-optimization","title":"Performance Optimization","text":""},{"location":"projects/saas/development/#database-optimization","title":"Database Optimization","text":"<pre><code>// Query optimization\nexport class UserRepository {\n  async getUsersWithPagination(\n    tenantId: string,\n    options: PaginationOptions\n  ): Promise&lt;PaginatedResult&lt;User&gt;&gt; {\n    const { page, limit, search } = options;\n    const offset = (page - 1) * limit;\n\n    // Optimized query with proper indexing\n    const query = this.db\n      .select(\"*\")\n      .from(\"users\")\n      .where(\"tenant_id\", tenantId)\n      .andWhere((builder) =&gt; {\n        if (search) {\n          builder\n            .where(\"name\", \"ilike\", `%${search}%`)\n            .orWhere(\"email\", \"ilike\", `%${search}%`);\n        }\n      })\n      .orderBy(\"created_at\", \"desc\")\n      .limit(limit)\n      .offset(offset);\n\n    const [users, totalCount] = await Promise.all([\n      query,\n      this.getUserCount(tenantId, search),\n    ]);\n\n    return {\n      data: users,\n      pagination: {\n        page,\n        limit,\n        total: totalCount,\n        pages: Math.ceil(totalCount / limit),\n      },\n    };\n  }\n}\n</code></pre>"},{"location":"projects/saas/development/#caching-strategy","title":"Caching Strategy","text":"<pre><code>// Redis caching implementation\nexport class CacheService {\n  private redis: Redis;\n\n  constructor() {\n    this.redis = new Redis(process.env.REDIS_URL);\n  }\n\n  async get&lt;T&gt;(key: string): Promise&lt;T | null&gt; {\n    const cached = await this.redis.get(key);\n    return cached ? JSON.parse(cached) : null;\n  }\n\n  async set(key: string, value: any, ttl: number = 3600): Promise&lt;void&gt; {\n    await this.redis.setex(key, ttl, JSON.stringify(value));\n  }\n\n  async invalidate(pattern: string): Promise&lt;void&gt; {\n    const keys = await this.redis.keys(pattern);\n    if (keys.length &gt; 0) {\n      await this.redis.del(...keys);\n    }\n  }\n}\n\n// Cache decorator\nexport const cached = (ttl: number = 3600) =&gt; {\n  return (\n    target: any,\n    propertyName: string,\n    descriptor: PropertyDescriptor\n  ) =&gt; {\n    const method = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      const cacheKey = `${\n        target.constructor.name\n      }:${propertyName}:${JSON.stringify(args)}`;\n\n      let result = await this.cacheService.get(cacheKey);\n      if (!result) {\n        result = await method.apply(this, args);\n        await this.cacheService.set(cacheKey, result, ttl);\n      }\n\n      return result;\n    };\n  };\n};\n</code></pre>"},{"location":"projects/saas/development/#deployment","title":"Deployment","text":""},{"location":"projects/saas/development/#docker-configuration","title":"Docker Configuration","text":"<pre><code># Backend Dockerfile\nFROM node:18-alpine AS builder\n\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nFROM node:18-alpine AS runtime\n\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nodejs -u 1001\n\nWORKDIR /app\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY --chown=nodejs:nodejs . .\n\nUSER nodejs\n\nEXPOSE 3000\nENV NODE_ENV production\n\nCMD [\"npm\", \"start\"]\n</code></pre>"},{"location":"projects/saas/development/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code># Kubernetes deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: saas-backend\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: saas-backend\n  template:\n    metadata:\n      labels:\n        app: saas-backend\n    spec:\n      containers:\n        - name: backend\n          image: optim/saas-backend:latest\n          ports:\n            - containerPort: 3000\n          env:\n            - name: DATABASE_URL\n              valueFrom:\n                secretKeyRef:\n                  name: db-secret\n                  key: url\n            - name: REDIS_URL\n              valueFrom:\n                secretKeyRef:\n                  name: redis-secret\n                  key: url\n          resources:\n            requests:\n              memory: \"512Mi\"\n              cpu: \"250m\"\n            limits:\n              memory: \"1Gi\"\n              cpu: \"500m\"\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: 3000\n            initialDelaySeconds: 30\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /ready\n              port: 3000\n            initialDelaySeconds: 5\n            periodSeconds: 5\n</code></pre>"},{"location":"projects/saas/development/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"projects/saas/development/#logging","title":"Logging","text":"<p>Pour la journalisation et la gestion des erreurs, nous utilisons Sentry pour capturer et tracker les erreurs c\u00f4t\u00e9 API (FastAPI) et frontend (React + TypeScript).</p> <p>\ud83d\udcd6 Consultez le guide complet de journalisation et Sentry</p> <p>Ce guide d\u00e9taill\u00e9 couvre :</p> <ul> <li>Configuration FastAPI avec Sentry SDK</li> <li>Int\u00e9gration React + TypeScript avec Sentry</li> <li>Upload des sourcemaps et configuration des releases</li> <li>Exemples pratiques et bonnes pratiques</li> <li>Gestion des variables d'environnement</li> <li>Checklist de d\u00e9ploiement</li> </ul>"},{"location":"projects/saas/development/#metrics","title":"Metrics","text":"<pre><code>// Prometheus metrics\nimport client from \"prom-client\";\n\nexport const metrics = {\n  httpRequestDuration: new client.Histogram({\n    name: \"http_request_duration_seconds\",\n    help: \"HTTP request duration in seconds\",\n    labelNames: [\"method\", \"route\", \"status_code\", \"tenant_id\"],\n  }),\n\n  activeConnections: new client.Gauge({\n    name: \"active_connections_total\",\n    help: \"Total number of active connections\",\n  }),\n\n  databaseConnections: new client.Gauge({\n    name: \"database_connections_active\",\n    help: \"Number of active database connections\",\n  }),\n};\n\n// Metrics middleware\nexport const metricsMiddleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) =&gt; {\n  const start = Date.now();\n\n  res.on(\"finish\", () =&gt; {\n    const duration = (Date.now() - start) / 1000;\n\n    metrics.httpRequestDuration.observe(\n      {\n        method: req.method,\n        route: req.route?.path || req.path,\n        status_code: res.statusCode.toString(),\n        tenant_id: req.tenant?.id || \"unknown\",\n      },\n      duration\n    );\n  });\n\n  next();\n};\n</code></pre>"},{"location":"projects/saas/development/#security-best-practices","title":"Security Best Practices","text":""},{"location":"projects/saas/development/#input-validation","title":"Input Validation","text":"<pre><code>// Request validation with Joi\nimport Joi from \"joi\";\n\nexport const userSchema = Joi.object({\n  email: Joi.string().email().required(),\n  name: Joi.string().min(2).max(100).required(),\n  role: Joi.string().valid(\"admin\", \"manager\", \"user\").default(\"user\"),\n  permissions: Joi.array().items(Joi.string()).optional(),\n});\n\nexport const validateRequest = (schema: Joi.ObjectSchema) =&gt; {\n  return (req: Request, res: Response, next: NextFunction) =&gt; {\n    const { error, value } = schema.validate(req.body);\n\n    if (error) {\n      return res.status(400).json({\n        error: \"Validation failed\",\n        details: error.details.map((d) =&gt; d.message),\n      });\n    }\n\n    req.body = value;\n    next();\n  };\n};\n</code></pre>"},{"location":"projects/saas/development/#rate-limiting","title":"Rate Limiting","text":"<pre><code>// Rate limiting implementation\nimport rateLimit from \"express-rate-limit\";\nimport RedisStore from \"rate-limit-redis\";\n\nexport const createRateLimiter = (\n  windowMs: number,\n  max: number,\n  keyGenerator?: (req: Request) =&gt; string\n) =&gt; {\n  return rateLimit({\n    store: new RedisStore({\n      client: redis,\n      prefix: \"rl:\",\n    }),\n    windowMs,\n    max,\n    keyGenerator: keyGenerator || ((req) =&gt; req.ip),\n    message: \"Too many requests from this IP, please try again later.\",\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n};\n\n// Apply different limits based on endpoint\nexport const apiLimiter = createRateLimiter(15 * 60 * 1000, 100); // 100 requests per 15 minutes\nexport const authLimiter = createRateLimiter(15 * 60 * 1000, 5); // 5 login attempts per 15 minutes\n</code></pre>"},{"location":"projects/saas/development/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"projects/saas/development/#code-standards","title":"Code Standards","text":"<ul> <li>TypeScript: Use strict type checking</li> <li>ESLint: Follow configured linting rules</li> <li>Prettier: Consistent code formatting</li> <li>Tests: Maintain &gt;80% code coverage</li> <li>Documentation: Update docs for new features</li> </ul>"},{"location":"projects/saas/development/#git-workflow","title":"Git Workflow","text":"<pre><code># Feature development workflow\ngit checkout -b feature/user-management-improvements\ngit commit -m \"feat(users): add bulk user import functionality\"\ngit push origin feature/user-management-improvements\n\n# Create pull request with proper template\n# Wait for code review and CI checks\n# Merge after approval\n</code></pre>"},{"location":"projects/saas/development/#pull-request-template","title":"Pull Request Template","text":"<pre><code>## Description\n\nBrief description of changes\n\n## Type of Change\n\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n\n- [ ] Unit tests pass\n- [ ] Integration tests pass\n- [ ] Manual testing completed\n\n## Checklist\n\n- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] Breaking changes documented\n</code></pre> <p>For development questions or support, contact the SAAS Development Team at saas-dev@optim.com</p>"},{"location":"projects/saas/getting-started/","title":"Getting Started with SAAS Platform","text":"<p>This guide will help you get up and running with the SAAS Platform quickly, whether you're an end user, administrator, or developer.</p>"},{"location":"projects/saas/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Valid Account: SAAS Platform account with appropriate permissions</li> <li>Modern Browser: Chrome 90+, Firefox 88+, Safari 14+, or Edge 90+</li> <li>Stable Internet: Reliable internet connection for optimal performance</li> <li>Email Access: Access to your registered email for notifications</li> </ul>"},{"location":"projects/saas/getting-started/#quick-start-for-end-users","title":"Quick Start for End Users","text":""},{"location":"projects/saas/getting-started/#1-account-access","title":"1. Account Access","text":"<p>First-time Users</p> <pre><code>1. Check your email for the invitation link\n2. Click \"Accept Invitation\" in the email\n3. Set up your password and security preferences\n4. Complete the onboarding wizard\n</code></pre> <p>Existing Users</p> <pre><code>1. Navigate to https://app.optim.com\n2. Enter your email and password\n3. Complete 2FA if enabled\n4. Select your workspace/tenant\n</code></pre>"},{"location":"projects/saas/getting-started/#2-initial-setup","title":"2. Initial Setup","text":"<p>Profile Configuration</p> <ol> <li> <p>Personal Information</p> </li> <li> <p>Update your profile picture</p> </li> <li>Set your display name and contact information</li> <li> <p>Configure your timezone and language preferences</p> </li> <li> <p>Notification Preferences</p> </li> <li> <p>Choose email notification settings</p> </li> <li>Configure in-app notification preferences</li> <li> <p>Set up mobile push notifications (if using mobile app)</p> </li> <li> <p>Security Settings</p> </li> <li>Enable two-factor authentication (highly recommended)</li> <li>Review active sessions and devices</li> <li>Set up backup authentication methods</li> </ol>"},{"location":"projects/saas/getting-started/#3-dashboard-overview","title":"3. Dashboard Overview","text":"<p>Main Dashboard Components</p> <ul> <li>Quick Actions: Most-used features and shortcuts</li> <li>Recent Activity: Your latest actions and updates</li> <li>Notifications: System and tenant notifications</li> <li>Analytics Widget: Key metrics and insights</li> <li>Task Summary: Pending tasks and assignments</li> </ul> <p>Navigation</p> <ul> <li>Left Sidebar: Main navigation menu</li> <li>Top Bar: Search, notifications, and user menu</li> <li>Breadcrumbs: Current page location</li> <li>Quick Access: Favorite features and bookmarks</li> </ul>"},{"location":"projects/saas/getting-started/#4-essential-features","title":"4. Essential Features","text":"<p>User Management (if you have permissions)</p> <pre><code>1. Navigate to Users section\n2. Invite new users via email\n3. Assign roles and permissions\n4. Manage user groups and teams\n</code></pre> <p>Data Management</p> <pre><code>1. Import existing data using CSV uploads\n2. Connect third-party integrations\n3. Set up automated data synchronization\n4. Configure data validation rules\n</code></pre> <p>Reporting</p> <pre><code>1. Access pre-built report templates\n2. Create custom reports using the report builder\n3. Schedule automated report delivery\n4. Export data in multiple formats\n</code></pre>"},{"location":"projects/saas/getting-started/#quick-start-for-administrators","title":"Quick Start for Administrators","text":""},{"location":"projects/saas/getting-started/#1-tenant-setup","title":"1. Tenant Setup","text":"<p>Initial Configuration</p> <pre><code>1. Access Admin Panel at https://admin.optim.com\n2. Complete tenant configuration wizard\n3. Set up custom branding and domain\n4. Configure security policies and settings\n</code></pre> <p>User Management</p> <pre><code>1. Import user list via CSV or directory sync\n2. Set up user roles and permission matrices\n3. Configure SSO integration (if applicable)\n4. Establish user onboarding workflows\n</code></pre>"},{"location":"projects/saas/getting-started/#2-subscription-management","title":"2. Subscription Management","text":"<p>Plan Configuration</p> <ol> <li> <p>Choose Subscription Tier</p> </li> <li> <p>Review available plans and features</p> </li> <li>Select appropriate tier for your organization</li> <li> <p>Configure billing preferences and payment methods</p> </li> <li> <p>Usage Monitoring</p> </li> <li> <p>Set up usage alerts and limits</p> </li> <li>Configure auto-scaling policies</li> <li> <p>Monitor license compliance</p> </li> <li> <p>Billing Setup</p> </li> <li>Configure billing contacts and addresses</li> <li>Set up payment methods and invoicing</li> <li>Establish purchase order workflows (Enterprise)</li> </ol>"},{"location":"projects/saas/getting-started/#3-integration-setup","title":"3. Integration Setup","text":"<p>Core Integrations</p> <pre><code># SSO Integration (SAML/OAuth)\n1. Configure identity provider settings\n2. Map user attributes and roles\n3. Test SSO login workflow\n4. Enable automatic user provisioning\n\n# Third-party Services\n1. Connect CRM systems (Salesforce, HubSpot)\n2. Integrate communication tools (Slack, Teams)\n3. Set up file storage connections (Google Drive, OneDrive)\n4. Configure analytics and reporting tools\n</code></pre>"},{"location":"projects/saas/getting-started/#4-security-configuration","title":"4. Security Configuration","text":"<p>Security Policies</p> <ul> <li>Password Requirements: Complexity, rotation, and history</li> <li>Session Management: Timeout, concurrent sessions, and device limits</li> <li>Access Controls: IP restrictions, VPN requirements, and geographic limits</li> <li>Data Policies: Retention, backup, and compliance settings</li> </ul> <p>Audit and Compliance</p> <ul> <li>Enable comprehensive audit logging</li> <li>Set up compliance reporting and alerts</li> <li>Configure data retention policies</li> <li>Establish incident response procedures</li> </ul>"},{"location":"projects/saas/getting-started/#quick-start-for-developers","title":"Quick Start for Developers","text":""},{"location":"projects/saas/getting-started/#1-development-environment","title":"1. Development Environment","text":"<p>Local Setup</p> <pre><code># Clone the repository\ngit clone https://github.com/optim/saas-platform.git\ncd saas-platform\n\n# Install dependencies\nnpm install\n\n# Copy environment configuration\ncp .env.example .env\n\n# Configure environment variables\n# Edit .env with your settings\n\n# Start development server\nnpm run dev\n</code></pre> <p>Environment Variables</p> <pre><code># Database Configuration\nDATABASE_URL=postgresql://user:pass@localhost:5432/saas_dev\nREDIS_URL=redis://localhost:6379\n\n# Authentication\nJWT_SECRET=your-jwt-secret\nAUTH0_DOMAIN=your-auth0-domain\nAUTH0_CLIENT_ID=your-client-id\n\n# Third-party Services\nSTRIPE_SECRET_KEY=sk_test_your-stripe-key\nSENDGRID_API_KEY=your-sendgrid-key\n\n# Feature Flags\nENABLE_ANALYTICS=true\nENABLE_INTEGRATIONS=true\n</code></pre>"},{"location":"projects/saas/getting-started/#2-api-access","title":"2. API Access","text":"<p>Authentication</p> <pre><code>// Obtain API token\nconst response = await fetch(\"/api/auth/token\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    email: \"your-email@example.com\",\n    password: \"your-password\",\n  }),\n});\n\nconst { token } = await response.json();\n\n// Use token in subsequent requests\nconst apiResponse = await fetch(\"/api/users\", {\n  headers: {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json\",\n  },\n});\n</code></pre> <p>Basic API Usage</p> <pre><code>// Create a new user\nconst newUser = await fetch(\"/api/users\", {\n  method: \"POST\",\n  headers: {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    email: \"newuser@example.com\",\n    name: \"New User\",\n    role: \"user\",\n  }),\n});\n\n// Get tenant information\nconst tenant = await fetch(\"/api/tenant\", {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n});\n\n// Update subscription\nconst subscription = await fetch(\"/api/subscription\", {\n  method: \"PUT\",\n  headers: {\n    Authorization: `Bearer ${token}`,\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    plan: \"professional\",\n    billing_cycle: \"monthly\",\n  }),\n});\n</code></pre>"},{"location":"projects/saas/getting-started/#3-custom-development","title":"3. Custom Development","text":"<p>Component Development</p> <pre><code>// Custom React component\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { getTenantUsers } from \"../api/users\";\n\nexport const UserList: React.FC = () =&gt; {\n  const { data: users, isLoading } = useQuery(\"users\", getTenantUsers);\n\n  if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;;\n\n  return (\n    &lt;div&gt;\n      {users?.map((user) =&gt; (\n        &lt;div key={user.id}&gt;\n          &lt;h3&gt;{user.name}&lt;/h3&gt;\n          &lt;p&gt;{user.email}&lt;/p&gt;\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  );\n};\n</code></pre> <p>API Endpoint Development</p> <pre><code>// Custom API endpoint\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { authenticate, authorize } from \"../../../lib/auth\";\nimport { getTenantUsers } from \"../../../lib/database\";\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  if (req.method !== \"GET\") {\n    return res.status(405).json({ message: \"Method not allowed\" });\n  }\n\n  try {\n    const user = await authenticate(req);\n    await authorize(user, \"read:users\");\n\n    const users = await getTenantUsers(user.tenantId);\n    res.status(200).json(users);\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n  }\n}\n</code></pre>"},{"location":"projects/saas/getting-started/#testing-environment","title":"Testing Environment","text":""},{"location":"projects/saas/getting-started/#sandbox-access","title":"Sandbox Access","text":"<ul> <li>URL: https://sandbox.optim.com</li> <li>Test Data: Pre-populated with sample data</li> <li>API Testing: Full API access with test credentials</li> <li>No Charges: All sandbox usage is free</li> </ul>"},{"location":"projects/saas/getting-started/#test-credentials","title":"Test Credentials","text":"<pre><code>Admin User:\nEmail: admin@sandbox.optim.com\nPassword: SandboxAdmin123!\n\nRegular User:\nEmail: user@sandbox.optim.com\nPassword: SandboxUser123!\n\nAPI Key: sk_test_sandbox_key_12345\n</code></pre>"},{"location":"projects/saas/getting-started/#common-first-steps","title":"Common First Steps","text":""},{"location":"projects/saas/getting-started/#1-data-import","title":"1. Data Import","text":"<pre><code># CSV Import via API\ncurl -X POST https://api.optim.com/import \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: multipart/form-data\" \\\n  -F \"file=@users.csv\" \\\n  -F \"type=users\"\n\n# Bulk import via UI\n1. Navigate to Data Import section\n2. Select import type (Users, Products, etc.)\n3. Upload CSV file\n4. Map columns to fields\n5. Review and confirm import\n</code></pre>"},{"location":"projects/saas/getting-started/#2-customization","title":"2. Customization","text":"<ul> <li>Branding: Upload logo, set colors, customize themes</li> <li>Workflows: Configure approval processes and automation</li> <li>Integrations: Connect external systems and APIs</li> <li>Reports: Create custom dashboards and reports</li> </ul>"},{"location":"projects/saas/getting-started/#3-training-resources","title":"3. Training Resources","text":"<ul> <li>Video Tutorials: Step-by-step feature walkthroughs</li> <li>Documentation: Comprehensive user guides</li> <li>Webinars: Live training sessions and Q&amp;A</li> <li>Support: Dedicated onboarding assistance</li> </ul>"},{"location":"projects/saas/getting-started/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"projects/saas/getting-started/#login-problems","title":"Login Problems","text":"<ol> <li> <p>Password Reset</p> </li> <li> <p>Use \"Forgot Password\" link on login page</p> </li> <li>Check spam folder for reset email</li> <li> <p>Contact admin if still unable to access</p> </li> <li> <p>2FA Issues</p> </li> <li>Use backup codes if primary method fails</li> <li>Contact support to reset 2FA settings</li> <li>Ensure device time is synchronized</li> </ol>"},{"location":"projects/saas/getting-started/#performance-issues","title":"Performance Issues","text":"<ol> <li> <p>Slow Loading</p> </li> <li> <p>Clear browser cache and cookies</p> </li> <li>Disable browser extensions temporarily</li> <li> <p>Check internet connection speed</p> </li> <li> <p>Feature Not Working</p> </li> <li>Verify user permissions for the feature</li> <li>Check system status page</li> <li>Try in incognito/private browser mode</li> </ol>"},{"location":"projects/saas/getting-started/#data-issues","title":"Data Issues","text":"<ol> <li> <p>Import Failures</p> </li> <li> <p>Verify CSV format matches template</p> </li> <li>Check for special characters or encoding issues</li> <li> <p>Ensure data meets validation requirements</p> </li> <li> <p>Sync Problems</p> </li> <li>Check integration status and credentials</li> <li>Verify network connectivity</li> <li>Review sync logs for error details</li> </ol>"},{"location":"projects/saas/getting-started/#next-steps","title":"Next Steps","text":"<p>After completing the initial setup:</p> <ol> <li>User Guide - Explore all platform features</li> <li>Admin Guide - Advanced administrative features</li> <li>API Documentation - Integrate with external systems</li> <li>Best Practices - Optimization and security tips</li> <li>Support Resources - Additional help and resources</li> </ol>"},{"location":"projects/saas/getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Help Center: Built-in help and documentation</li> <li>Support Tickets: Submit requests through the platform</li> <li>Live Chat: Available during business hours</li> <li>Community Forum: User discussions and tips</li> <li>Emergency Support: 24/7 for Enterprise customers</li> </ul> <p>Need additional assistance? Contact our support team at saas-support@optim.com or through the in-app help system.</p>"},{"location":"projects/saas/logging/","title":"Journalisation et Sentry","text":""},{"location":"projects/saas/logging/#vue-densemble","title":"Vue d'ensemble","text":"<p>Nous utilisons Sentry pour la collecte, l'agr\u00e9gation et le suivi des erreurs c\u00f4t\u00e9 API (FastAPI) et c\u00f4t\u00e9 frontend (React + TypeScript). Ce document d\u00e9crit la configuration, des exemples d'utilisation, le d\u00e9ploiement des sourcemaps / symboles et les bonnes pratiques.</p> <p>Objectifs</p> <ul> <li>Capturer les exceptions non g\u00e9r\u00e9es et les erreurs applicatives.</li> <li>Enrichir les \u00e9v\u00e9nements avec le contexte (utilisateur, requ\u00eate, tags, transactions).</li> <li>Faciliter le debug via les stack traces et sourcemaps (frontend) / symbolication (backend).</li> <li>Fournir le suivi des performances (optionnel) via Sentry Performance.</li> </ul>"},{"location":"projects/saas/logging/#concepts-importants","title":"Concepts importants","text":"<ul> <li>DSN : l'identifiant de projet Sentry (ne pas le committer dans le code public). Utiliser des variables d'environnement.</li> <li>Environnement : <code>production</code>, <code>recette</code> \u2014 utile pour filtrer les erreurs.</li> <li>Tags : paires cl\u00e9/valeur pour cat\u00e9goriser les \u00e9v\u00e9nements (ex : <code>feature</code>, <code>region</code>).</li> <li>Breadcrumbs : \u00e9v\u00e9nements menant \u00e0 l'erreur (logs, requ\u00eates, interactions utilisateur).</li> </ul>"},{"location":"projects/saas/logging/#securite-et-variables-denvironnement","title":"S\u00e9curit\u00e9 et variables d'environnement","text":"<p>Stocker la DSN et la configuration Sentry dans les variables d'environnement. Exemple :</p> <ul> <li><code>SENTRY_DSN</code> \u2014 DSN publique pour l'envoi d'\u00e9v\u00e9nements.</li> <li><code>SENTRY_ENV</code> \u2014 environnement (<code>production</code> / <code>recette</code> ).</li> <li><code>SENTRY_RELEASE</code> \u2014 version/release (fortement recommand\u00e9 pour corr\u00e9ler sourcemaps et releases).</li> </ul> <p>Ne pas exposer la DSN priv\u00e9e (si vous utilisez des cl\u00e9s d'authentification c\u00f4t\u00e9 serveur). Pour le frontend, une DSN publique (client key) est attendue par Sentry.</p>"},{"location":"projects/saas/logging/#fastapi-configuration-et-exemples","title":"FastAPI \u2014 configuration et exemples","text":"<ol> <li>Installation (backend Python)</li> </ol> <pre><code>pip install sentry-sdk\n</code></pre> <ol> <li>Initialisation dans l'application FastAPI</li> </ol> <p>Cr\u00e9ez / modifiez l'initialisation de votre application (par exemple <code>app/main.py</code>) :</p> <pre><code>import os\nfrom fastapi import FastAPI\nimport sentry_sdk\nfrom sentry_sdk.integrations.asgi import SentryAsgiMiddleware\nfrom sentry_sdk.integrations.logging import LoggingIntegration\n\n# R\u00e9cup\u00e9rer la DSN depuis l'environnement\nSENTRY_DSN = os.environ.get(\"SENTRY_DSN\")\nSENTRY_ENV = os.environ.get(\"SENTRY_ENV\", \"production\")\nSENTRY_RELEASE = os.environ.get(\"SENTRY_RELEASE\")\n\n# Int\u00e9gration pour capturer logs INFO/WARN/ERROR\nlogging_integration = LoggingIntegration(\n    level=None,          # capture nothing by default from the logging module\n    event_level=\"ERROR\" # capture e.g. ERROR as events\n)\n\nsentry_sdk.init(\n    dsn=SENTRY_DSN,\n    environment=SENTRY_ENV,\n    release=SENTRY_RELEASE,\n    integrations=[logging_integration],\n    # traces_sample_rate=0.1,  # activer Sentry Performance si besoin\n)\n\napp = FastAPI()\n# Optionnel : middleware ASGI de Sentry pour capturer exceptions et transactions\napp.add_middleware(SentryAsgiMiddleware)\n\n\n@app.get(\"/health\")\nasync def health():\n    return {\"status\": \"ok\"}\n\n\n@app.get(\"/debug-sentry\")\nasync def trigger_error():\n    # Exemple : capture d'une exception non g\u00e9r\u00e9e\n    raise RuntimeError(\"Test Sentry: exception d\u00e9clench\u00e9e volontairement\")\n</code></pre> <ol> <li>Capturer des exceptions manuellement et ajouter du contexte</li> </ol> <pre><code>from sentry_sdk import capture_exception, set_user, set_tag\n\ntry:\n    # code qui peut lever\n    risky_operation()\nexcept Exception as exc:\n    # ajouter du contexte\n    set_user({\"id\": \"123\", \"email\": \"user@example.com\"})\n    set_tag(\"module\", \"importer\")\n    capture_exception(exc)\n    raise\n</code></pre> <ol> <li> <p>Bonnes pratiques backend</p> </li> <li> <p>Ne pas envoyer d'informations sensibles (mots de passe, tokens) dans les \u00e9v\u00e9nements.</p> </li> <li>Utiliser <code>SENTRY_RELEASE</code> lors des d\u00e9ploiements pour relier erreurs \u2192 release.</li> <li>Configurer le sampling <code>traces_sample_rate</code> uniquement si vous activez Performance.</li> </ol>"},{"location":"projects/saas/logging/#react-typescript-configuration-et-exemples","title":"React + TypeScript \u2014 configuration et exemples","text":"<ol> <li>Installation (frontend)</li> </ol> <pre><code>npm install @sentry/react @sentry/tracing\n# ou yarn add @sentry/react @sentry/tracing\n</code></pre> <ol> <li>Initialisation (ex : <code>src/sentry.ts</code>)</li> </ol> <pre><code>import * as Sentry from \"@sentry/react\";\nimport { BrowserTracing } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn: process.env.REACT_APP_SENTRY_DSN,\n  environment: process.env.REACT_APP_SENTRY_ENV ?? \"production\",\n  release: process.env.REACT_APP_SENTRY_RELEASE,\n  integrations: [new BrowserTracing()],\n  tracesSampleRate: 0.05, // ajuster selon le volume\n  // beforeSend: (event) =&gt; { // filtrer/masquer des donn\u00e9es sensibles\n  //   return event;\n  // }\n});\n\nexport default Sentry;\n</code></pre> <ol> <li>Rattacher Sentry au tout d\u00e9but de l'application (ex : <code>src/index.tsx</code>)</li> </ol> <pre><code>import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport Sentry from \"./sentry\";\nimport { ErrorBoundary } from \"@sentry/react\";\n\nconst container = document.getElementById(\"root\")!;\nconst root = createRoot(container);\n\nroot.render(\n  &lt;ErrorBoundary fallback={&lt;div&gt;Une erreur est survenue&lt;/div&gt;}&gt;\n    &lt;App /&gt;\n  &lt;/ErrorBoundary&gt;\n);\n</code></pre> <ol> <li>Capturer une erreur manuellement</li> </ol> <pre><code>try {\n  riskyFunction();\n} catch (err) {\n  Sentry.captureException(err);\n}\n\n// Ajouter du contexte utilisateur\nSentry.setUser({ id: \"123\", email: \"user@example.com\" });\nSentry.setTag(\"section\", \"checkout\");\n\n// Ajouter des breadcrumbs personnalis\u00e9s\nSentry.addBreadcrumb({ message: \"User clicked buy\", level: \"info\" });\n</code></pre> <ol> <li>Sourcemaps et release</li> </ol> <p>Pour que les stack traces JavaScript soient lisibles, il faut :</p> <ul> <li>publier un <code>release</code> dans Sentry avec la m\u00eame valeur <code>release</code> que celle configur\u00e9e dans l'application (ex : <code>my-app@1.2.3</code>).</li> <li>uploader les sourcemaps lors du build (ou utiliser l'int\u00e9gration Sentry CLI) :</li> </ul> <p>Exemple (CI) :</p> <pre><code># installer sentry-cli (ou utiliser l'image fournie par Sentry)\nnpm install -g @sentry/cli\n\n# lors du build frontend\nexport SENTRY_AUTH_TOKEN=...         # token stock\u00e9 en CI\nexport SENTRY_ORG=your-org\nexport SENTRY_PROJECT=your-project\nexport SENTRY_RELEASE=my-app@1.2.3\n\nsentry-cli releases new $SENTRY_RELEASE\nsentry-cli releases files $SENTRY_RELEASE upload-sourcemaps ./build --url-prefix \"~\" --validate\nsentry-cli releases finalize $SENTRY_RELEASE\n</code></pre> <p>Adapter l'URL prefix \u00e0 votre configuration d'h\u00e9bergement (ex: <code>~/static/js</code>).</p> <ol> <li> <p>Bonnes pratiques frontend</p> </li> <li> <p>Minifier le taux de traces (tracesSampleRate) pour limiter le co\u00fbt.</p> </li> <li>Filtrer donn\u00e9es sensibles avec <code>beforeSend</code>.</li> <li>Mettre <code>release</code> et uploader sourcemaps \u00e0 chaque d\u00e9ploiement.</li> <li>Profiter des <code>breadcrumbs</code> et <code>tags</code> pour faciliter le tri et le debug.</li> </ol>"},{"location":"projects/saas/logging/#exemples-dusage-concret","title":"Exemples d'usage concret","text":"<ul> <li>Suivi d'une erreur d'API : lorsqu'une requ\u00eate fetch/axios renvoie 500, capturer l'erreur, ajouter des tags (route, utilisateur) et envoyer \u00e0 Sentry.</li> <li>Erreur frontend : captureException + redirection vers une page d'erreur tout en gardant le tracking dans Sentry.</li> </ul> <p>Exemple fetch + Sentry :</p> <pre><code>import Sentry from \"./sentry\";\n\nasync function callApi(endpoint: string) {\n  try {\n    const res = await fetch(endpoint);\n    if (!res.ok) {\n      const err = new Error(`API error ${res.status}`);\n      Sentry.captureException(err);\n      throw err;\n    }\n    return await res.json();\n  } catch (err) {\n    Sentry.captureException(err);\n    throw err;\n  }\n}\n</code></pre>"},{"location":"projects/saas/logging/#edge-cases-et-points-dattention","title":"Edge cases et points d'attention","text":"<ul> <li>Volume d'\u00e9v\u00e9nements \u00e9lev\u00e9s : configurer sampling, filtres et rate-limits.</li> <li>Donn\u00e9es sensibles : appliquer <code>beforeSend</code> pour redaction.</li> <li>Environnements multiples : utiliser <code>environment</code> pour s\u00e9parer les erreurs.</li> <li>Versions/release : sans <code>release</code>, les sourcemaps ne s'appliquent pas correctement.</li> </ul>"},{"location":"projects/saas/logging/#resume-rapide-checklist-avant-deploiement","title":"R\u00e9sum\u00e9 rapide (checklist avant d\u00e9ploiement)","text":"<ul> <li>[ ] DSN configur\u00e9e via variable d'environnement.</li> <li>[ ] <code>SENTRY_RELEASE</code> renseign\u00e9 et matching entre CI et app.</li> <li>[ ] Sourcemaps upload\u00e9es pour le frontend.</li> <li>[ ] <code>beforeSend</code> impl\u00e9ment\u00e9 si n\u00e9cessaire pour filtrer les donn\u00e9es sensibles.</li> <li>[ ] Traces sampling configur\u00e9 si activation Performance.</li> </ul> <p>Si tu veux, je peux :</p> <ul> <li>G\u00e9n\u00e9rer des snippets plus adapt\u00e9s \u00e0 la structure existante du projet (donne-moi les chemins d'entr\u00e9e : ex <code>src/main.py</code>, <code>src/index.tsx</code>).</li> <li>Ajouter des exemples CI/CD (GitLab CI, GitHub Actions) pour uploader automatiquement les sourcemaps.</li> </ul>"},{"location":"shared/infrastructure/","title":"Documentation Infrastructure","text":"<p>Cette section couvre la configuration de l'infrastructure, les processus de d\u00e9ploiement et les proc\u00e9dures op\u00e9rationnelles pour tous les projets Optim.</p>"},{"location":"shared/infrastructure/#apercu","title":"Aper\u00e7u","text":"<p>Notre infrastructure est con\u00e7ue pour l'\u00e9volutivit\u00e9, la fiabilit\u00e9 et la s\u00e9curit\u00e9 dans plusieurs environnements.</p>"},{"location":"shared/infrastructure/#strategie-denvironnement","title":"Strat\u00e9gie d'Environnement","text":""},{"location":"shared/infrastructure/#types-denvironnements","title":"Types d'Environnements","text":"Environnement Objectif Acc\u00e8s D\u00e9ploiement D\u00e9veloppement D\u00e9veloppement local et tests Tous les d\u00e9veloppeurs Manuel/automatique Recette Tests de pr\u00e9-production Consultants, d\u00e9veloppeurs Manuel Production Syst\u00e8me en direct Distributeurs, clients Approbation manuelle requise"},{"location":"shared/infrastructure/#configuration-des-environnements","title":"Configuration des Environnements","text":"<pre><code># environments.yml\ndevelopment:\n  api_url: \"http://localhost:3000\"\n  database_url: \"postgres://localhost:5432/optim_dev\"\n  redis_url: \"redis://localhost:6379\"\n  log_level: \"debug\"\n\nstaging:\n  api_url: \"https://staging-api.optim.com\"\n  database_url: \"${STAGING_DATABASE_URL}\"\n  redis_url: \"${STAGING_REDIS_URL}\"\n  log_level: \"info\"\n\nproduction:\n  api_url: \"https://api.optim.com\"\n  database_url: \"${PRODUCTION_DATABASE_URL}\"\n  redis_url: \"${PRODUCTION_REDIS_URL}\"\n  log_level: \"warn\"\n</code></pre>"},{"location":"shared/infrastructure/#architecture-de-deploiement","title":"Architecture de D\u00e9ploiement","text":""},{"location":"shared/infrastructure/#architecture-de-haut-niveau","title":"Architecture de Haut Niveau","text":"<pre><code>graph TB\n    A[\u00c9quilibreur de Charge] --&gt; B[Passerelle API]\n    B --&gt; C[Service d'Authentification]\n    B --&gt; D[Services M\u00e9tier]\n    D --&gt; E[Cluster de Base de Donn\u00e9es]\n    D --&gt; F[Couche de Cache]\n    D --&gt; G[Stockage de Fichiers]\n    H[Pipeline CI/CD] --&gt; I[Registre de Conteneurs]\n    I --&gt; J[Cluster Kubernetes]\n    J --&gt; D\n</code></pre>"},{"location":"shared/infrastructure/#stack-technologique","title":"Stack Technologique","text":"<p>Orchestration de Conteneurs</p> <ul> <li>Kubernetes (EKS/GKE)</li> <li>Conteneurs Docker</li> <li>Charts Helm pour le d\u00e9ploiement</li> </ul> <p>Bases de Donn\u00e9es</p> <ul> <li>PostgreSQL (base de donn\u00e9es principale)</li> <li>Redis (cache et sessions)</li> <li>MongoDB (stockage de documents)</li> </ul> <p>Infrastructure</p> <ul> <li>Fournisseurs cloud AWS/GCP</li> <li>Terraform pour l'infrastructure en tant que code</li> <li>CDN pour les ressources statiques</li> </ul> <p>Surveillance et Journalisation</p> <ul> <li>Prometheus/Grafana pour les m\u00e9triques</li> <li>Stack ELK pour la journalisation</li> <li>Sentry pour le suivi des erreurs</li> </ul>"},{"location":"shared/infrastructure/#processus-de-deploiement","title":"Processus de D\u00e9ploiement","text":""},{"location":"shared/infrastructure/#pipeline-cicd","title":"Pipeline CI/CD","text":"<pre><code># .github/workflows/deploy.yml\nname: D\u00e9ployer\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Ex\u00e9cuter les tests\n        run: |\n          npm ci\n          npm run test:coverage\n          npm run lint\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Construire l'image Docker\n        run: |\n          docker build -t optim/app:${{ github.sha }} .\n          docker push optim/app:${{ github.sha }}\n\n  deploy-staging:\n    needs: build\n    if: github.ref == 'refs/heads/develop'\n    runs-on: ubuntu-latest\n    steps:\n      - name: D\u00e9ployer en staging\n        run: |\n          helm upgrade --install optim-app ./helm/optim-app \\\n            --set image.tag=${{ github.sha }} \\\n            --namespace staging\n\n  deploy-production:\n    needs: build\n    if: github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    environment: production\n    steps:\n      - name: D\u00e9ployer en production\n        run: |\n          helm upgrade --install optim-app ./helm/optim-app \\\n            --set image.tag=${{ github.sha }} \\\n            --namespace production\n</code></pre>"},{"location":"shared/infrastructure/#etapes-de-deploiement","title":"\u00c9tapes de D\u00e9ploiement","text":"<ol> <li>Fusion de Code - Code fusionn\u00e9 vers la branche main/develop</li> <li>Tests Automatis\u00e9s - Tests unitaires et d'int\u00e9gration ex\u00e9cut\u00e9s</li> <li>Processus de Build - Images Docker construites et \u00e9tiquet\u00e9es</li> <li>Scan de S\u00e9curit\u00e9 - Images de conteneurs scann\u00e9es pour les vuln\u00e9rabilit\u00e9s</li> <li>D\u00e9ploiement Staging - D\u00e9ploiement automatique vers staging</li> <li>Approbation Production - Approbation manuelle pour le d\u00e9ploiement en production</li> <li>D\u00e9ploiement Production - D\u00e9ploiement avec strat\u00e9gie blue-green</li> <li>V\u00e9rifications de Sant\u00e9 - V\u00e9rification automatique de la sant\u00e9</li> <li>Rollback - Rollback automatique en cas d'\u00e9chec</li> </ol>"},{"location":"shared/infrastructure/#strategie-de-rollback","title":"Strat\u00e9gie de Rollback","text":"<pre><code># Rollback rapide vers la version pr\u00e9c\u00e9dente\nkubectl rollout undo deployment/optim-app -n production\n\n# Rollback vers une r\u00e9vision sp\u00e9cifique\nkubectl rollout undo deployment/optim-app --to-revision=3 -n production\n\n# V\u00e9rifier le statut du rollout\nkubectl rollout status deployment/optim-app -n production\n</code></pre>"},{"location":"shared/infrastructure/#infrastructure-en-tant-que-code","title":"Infrastructure en tant que Code","text":""},{"location":"shared/infrastructure/#configuration-terraform","title":"Configuration Terraform","text":"<pre><code># main.tf\nprovider \"aws\" {\n  region = var.aws_region\n}\n\nmodule \"eks_cluster\" {\n  source = \"./modules/eks\"\n\n  cluster_name = \"optim-cluster\"\n  node_groups = {\n    main = {\n      instance_types = [\"t3.medium\"]\n      min_size       = 2\n      max_size       = 10\n      desired_size   = 3\n    }\n  }\n}\n\nmodule \"rds_database\" {\n  source = \"./modules/rds\"\n\n  engine         = \"postgres\"\n  engine_version = \"13.7\"\n  instance_class = \"db.t3.micro\"\n  allocated_storage = 20\n}\n\nmodule \"elasticache\" {\n  source = \"./modules/elasticache\"\n\n  engine           = \"redis\"\n  node_type        = \"cache.t3.micro\"\n  num_cache_nodes  = 1\n}\n</code></pre>"},{"location":"shared/infrastructure/#manifestes-kubernetes","title":"Manifestes Kubernetes","text":"<pre><code># k8s/deployment.yml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: optim-app\n  namespace: production\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: optim-app\n  template:\n    metadata:\n      labels:\n        app: optim-app\n    spec:\n      containers:\n        - name: app\n          image: optim/app:latest\n          ports:\n            - containerPort: 3000\n          env:\n            - name: DATABASE_URL\n              valueFrom:\n                secretKeyRef:\n                  name: database-secret\n                  key: url\n          resources:\n            requests:\n              memory: \"256Mi\"\n              cpu: \"250m\"\n            limits:\n              memory: \"512Mi\"\n              cpu: \"500m\"\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: 3000\n            initialDelaySeconds: 30\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /ready\n              port: 3000\n            initialDelaySeconds: 5\n            periodSeconds: 5\n</code></pre>"},{"location":"shared/infrastructure/#surveillance-et-alertes","title":"Surveillance et Alertes","text":""},{"location":"shared/infrastructure/#collecte-de-metriques","title":"Collecte de M\u00e9triques","text":"<pre><code># prometheus/config.yml\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: \"optim-app\"\n    kubernetes_sd_configs:\n      - role: pod\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n</code></pre>"},{"location":"shared/infrastructure/#regles-dalerte","title":"R\u00e8gles d'Alerte","text":"<pre><code># alerts/app.yml\ngroups:\n  - name: optim-app\n    rules:\n      - alert: TauxErreurEleve\n        expr: rate(http_requests_total{status=~\"5..\"}[5m]) &gt; 0.1\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Taux d'erreur \u00e9lev\u00e9 d\u00e9tect\u00e9\"\n          description: \"Le taux d'erreur est de {{ $value }} erreurs par seconde\"\n\n      - alert: UtilisationMemoireElevee\n        expr: container_memory_usage_bytes / container_spec_memory_limit_bytes &gt; 0.9\n        for: 2m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Utilisation m\u00e9moire \u00e9lev\u00e9e\"\n          description: \"L'utilisation m\u00e9moire est sup\u00e9rieure \u00e0 90%\"\n</code></pre>"},{"location":"shared/infrastructure/#tableaux-de-bord","title":"Tableaux de Bord","text":"<pre><code>{\n  \"dashboard\": {\n    \"title\": \"M\u00e9triques Application Optim\",\n    \"panels\": [\n      {\n        \"title\": \"Taux de Requ\u00eates\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(http_requests_total[5m])\",\n            \"legendFormat\": \"{{method}} {{status}}\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Temps de R\u00e9ponse\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))\",\n            \"legendFormat\": \"95e percentile\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"shared/infrastructure/#securite","title":"S\u00e9curit\u00e9","text":""},{"location":"shared/infrastructure/#securite-reseau","title":"S\u00e9curit\u00e9 R\u00e9seau","text":"<pre><code># k8s/network-policy.yml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: optim-app-policy\n  namespace: production\nspec:\n  podSelector:\n    matchLabels:\n      app: optim-app\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - podSelector:\n            matchLabels:\n              app: nginx-ingress\n      ports:\n        - protocol: TCP\n          port: 3000\n  egress:\n    - to:\n        - podSelector:\n            matchLabels:\n              app: postgres\n      ports:\n        - protocol: TCP\n          port: 5432\n</code></pre>"},{"location":"shared/infrastructure/#gestion-des-secrets","title":"Gestion des Secrets","text":"<pre><code># k8s/secrets.yml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: database-secret\n  namespace: production\ntype: Opaque\ndata:\n  url: &lt;url-base-de-donnees-encodee-base64&gt;\n  password: &lt;mot-de-passe-encode-base64&gt;\n</code></pre>"},{"location":"shared/infrastructure/#configuration-ssltls","title":"Configuration SSL/TLS","text":"<pre><code># k8s/ingress.yml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: optim-app-ingress\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\nspec:\n  tls:\n    - hosts:\n        - api.optim.com\n      secretName: optim-tls\n  rules:\n    - host: api.optim.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: optim-app-service\n                port:\n                  number: 80\n</code></pre>"},{"location":"shared/infrastructure/#sauvegarde-et-reprise-apres-sinistre","title":"Sauvegarde et Reprise apr\u00e8s Sinistre","text":""},{"location":"shared/infrastructure/#sauvegardes-de-base-de-donnees","title":"Sauvegardes de Base de Donn\u00e9es","text":"<pre><code>#!/bin/bash\n# scripts/backup-database.sh\n\n# Sauvegarde quotidienne\npg_dump $DATABASE_URL | gzip &gt; backups/$(date +%Y%m%d)-database.sql.gz\n\n# Upload vers S3\naws s3 cp backups/$(date +%Y%m%d)-database.sql.gz s3://optim-backups/database/\n\n# Nettoyage des anciennes sauvegardes (conserver 30 jours)\nfind backups/ -name \"*.sql.gz\" -mtime +30 -delete\n</code></pre>"},{"location":"shared/infrastructure/#plan-de-reprise-apres-sinistre","title":"Plan de Reprise apr\u00e8s Sinistre","text":"<ol> <li>RTO (Objectif de Temps de R\u00e9cup\u00e9ration) : 4 heures</li> <li>RPO (Objectif de Point de R\u00e9cup\u00e9ration) : 1 heure</li> <li>Strat\u00e9gie de Sauvegarde : Sauvegardes quotidiennes de base de donn\u00e9es, r\u00e9plication de fichiers en temps r\u00e9el</li> <li>Processus de Basculement : Basculement DNS automatique vers la r\u00e9gion secondaire</li> </ol>"},{"location":"shared/infrastructure/#optimisation-des-performances","title":"Optimisation des Performances","text":""},{"location":"shared/infrastructure/#strategies-de-mise-a-lechelle","title":"Strat\u00e9gies de Mise \u00e0 l'\u00c9chelle","text":"<pre><code># k8s/hpa.yml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: optim-app-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: optim-app\n  minReplicas: 3\n  maxReplicas: 20\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n    - type: Resource\n      resource:\n        name: memory\n        target:\n          type: Utilization\n          averageUtilization: 80\n</code></pre>"},{"location":"shared/infrastructure/#strategie-de-cache","title":"Strat\u00e9gie de Cache","text":"<pre><code># Configuration Redis\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: redis-config\ndata:\n  redis.conf: |\n    maxmemory 256mb\n    maxmemory-policy allkeys-lru\n    save 900 1\n    save 300 10\n    save 60 10000\n</code></pre>"},{"location":"shared/infrastructure/#snippets-de-code-pour-taches-recurrentes","title":"Snippets de Code pour T\u00e2ches R\u00e9currentes","text":"<p>Cette section contient des extraits de code r\u00e9utilisables pour les t\u00e2ches d'infrastructure courantes et r\u00e9p\u00e9titives.</p>"},{"location":"shared/infrastructure/#gestion-des-deployments-kubernetes","title":"Gestion des Deployments Kubernetes","text":""},{"location":"shared/infrastructure/#deploiement-rapide-dune-nouvelle-version","title":"D\u00e9ploiement Rapide d'une Nouvelle Version","text":"<pre><code>#!/bin/bash\n# D\u00e9ploiement rapide avec v\u00e9rification de sant\u00e9\nAPP_NAME=${1:-optim-app}\nNAMESPACE=${2:-production}\nIMAGE_TAG=${3:-latest}\n\necho \"\ud83d\ude80 D\u00e9ploiement de $APP_NAME:$IMAGE_TAG vers $NAMESPACE...\"\n\n# Mise \u00e0 jour de l'image\nkubectl set image deployment/$APP_NAME app=optim/$APP_NAME:$IMAGE_TAG -n $NAMESPACE\n\n# Attendre que le rollout soit termin\u00e9\nkubectl rollout status deployment/$APP_NAME -n $NAMESPACE --timeout=300s\n\n# V\u00e9rifier la sant\u00e9 des pods\nkubectl get pods -l app=$APP_NAME -n $NAMESPACE\n</code></pre>"},{"location":"shared/infrastructure/#redimensionnement-rapide-dapplication","title":"Redimensionnement Rapide d'Application","text":"<pre><code>#!/bin/bash\n# Script de redimensionnement rapide\nAPP_NAME=${1:-optim-app}\nREPLICAS=${2:-3}\nNAMESPACE=${3:-production}\n\necho \"\ud83d\udcca Redimensionnement de $APP_NAME \u00e0 $REPLICAS r\u00e9pliques...\"\n\nkubectl scale deployment $APP_NAME --replicas=$REPLICAS -n $NAMESPACE\nkubectl rollout status deployment/$APP_NAME -n $NAMESPACE\n</code></pre>"},{"location":"shared/infrastructure/#redemarrage-force-de-pods","title":"Red\u00e9marrage Forc\u00e9 de Pods","text":"<pre><code>#!/bin/bash\n# Red\u00e9marrage complet des pods d'une application\nAPP_NAME=${1:-optim-app}\nNAMESPACE=${2:-production}\n\necho \"\ud83d\udd04 Red\u00e9marrage forc\u00e9 de $APP_NAME...\"\n\nkubectl rollout restart deployment/$APP_NAME -n $NAMESPACE\nkubectl rollout status deployment/$APP_NAME -n $NAMESPACE\n</code></pre>"},{"location":"shared/infrastructure/#gestion-des-bases-de-donnees","title":"Gestion des Bases de Donn\u00e9es","text":""},{"location":"shared/infrastructure/#sauvegarde-complete-de-base-de-donnees","title":"Sauvegarde Compl\u00e8te de Base de Donn\u00e9es","text":"<pre><code>#!/bin/bash\n# Sauvegarde compl\u00e8te avec m\u00e9tadonn\u00e9es\nDB_NAME=${1:-optim_production}\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/backups\"\n\necho \"\ud83d\udcbe Sauvegarde de $DB_NAME...\"\n\n# Cr\u00e9er le r\u00e9pertoire de sauvegarde\nmkdir -p $BACKUP_DIR\n\n# Sauvegarde avec compression\npg_dump $DATABASE_URL \\\n  --verbose \\\n  --clean \\\n  --no-acl \\\n  --no-owner \\\n  | gzip &gt; $BACKUP_DIR/${DB_NAME}_${TIMESTAMP}.sql.gz\n\n# V\u00e9rifier la sauvegarde\nif [ $? -eq 0 ]; then\n  echo \"\u2705 Sauvegarde r\u00e9ussie: ${DB_NAME}_${TIMESTAMP}.sql.gz\"\n\n  # Upload vers S3\n  aws s3 cp $BACKUP_DIR/${DB_NAME}_${TIMESTAMP}.sql.gz \\\n    s3://optim-backups/database/\nelse\n  echo \"\u274c \u00c9chec de la sauvegarde\"\n  exit 1\nfi\n</code></pre>"},{"location":"shared/infrastructure/#restauration-de-base-de-donnees","title":"Restauration de Base de Donn\u00e9es","text":"<pre><code>#!/bin/bash\n# Restauration s\u00e9curis\u00e9e de base de donn\u00e9es\nBACKUP_FILE=${1}\nTARGET_DB=${2:-optim_staging}\n\nif [ -z \"$BACKUP_FILE\" ]; then\n  echo \"\u274c Fichier de sauvegarde requis\"\n  echo \"Usage: $0 &lt;backup_file&gt; [target_db]\"\n  exit 1\nfi\n\necho \"\u26a0\ufe0f  ATTENTION: Restauration vers $TARGET_DB\"\nread -p \"\u00cates-vous s\u00fbr? (oui/non): \" confirm\n\nif [ \"$confirm\" = \"oui\" ]; then\n  echo \"\ud83d\udd04 Restauration en cours...\"\n\n  # D\u00e9compresser et restaurer\n  gunzip -c $BACKUP_FILE | psql $TARGET_DATABASE_URL\n\n  echo \"\u2705 Restauration termin\u00e9e\"\nelse\n  echo \"\u274c Restauration annul\u00e9e\"\nfi\n</code></pre>"},{"location":"shared/infrastructure/#monitoring-et-logs","title":"Monitoring et Logs","text":""},{"location":"shared/infrastructure/#collection-de-logs-durgence","title":"Collection de Logs d'Urgence","text":"<pre><code>#!/bin/bash\n# Collecte rapide de logs pour debug\nAPP_NAME=${1:-optim-app}\nNAMESPACE=${2:-production}\nLINES=${3:-1000}\nOUTPUT_DIR=\"/tmp/logs_$(date +%Y%m%d_%H%M%S)\"\n\necho \"\ud83d\udcdd Collecte des logs de $APP_NAME...\"\n\nmkdir -p $OUTPUT_DIR\n\n# Logs de tous les pods\nfor pod in $(kubectl get pods -l app=$APP_NAME -n $NAMESPACE -o name); do\n  pod_name=$(basename $pod)\n  echo \"Collecte logs de $pod_name...\"\n\n  kubectl logs $pod_name -n $NAMESPACE --tail=$LINES \\\n    &gt; $OUTPUT_DIR/${pod_name}.log\n\n  # Logs du conteneur pr\u00e9c\u00e9dent si red\u00e9marrage\n  kubectl logs $pod_name -n $NAMESPACE --previous --tail=$LINES \\\n    &gt; $OUTPUT_DIR/${pod_name}_previous.log 2&gt;/dev/null || true\ndone\n\n# \u00c9v\u00e9nements Kubernetes\nkubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' \\\n  &gt; $OUTPUT_DIR/k8s_events.log\n\necho \"\u2705 Logs collect\u00e9s dans: $OUTPUT_DIR\"\ntar -czf $OUTPUT_DIR.tar.gz -C /tmp $(basename $OUTPUT_DIR)\necho \"\ud83d\udce6 Archive cr\u00e9\u00e9e: $OUTPUT_DIR.tar.gz\"\n</code></pre>"},{"location":"shared/infrastructure/#verification-de-sante-complete","title":"V\u00e9rification de Sant\u00e9 Compl\u00e8te","text":"<pre><code>#!/bin/bash\n# Script de v\u00e9rification de sant\u00e9 globale\nNAMESPACE=${1:-production}\n\necho \"\ud83c\udfe5 V\u00e9rification de sant\u00e9 globale...\"\n\n# Statut des deployments\necho \"=== DEPLOYMENTS ===\"\nkubectl get deployments -n $NAMESPACE -o wide\n\n# Statut des pods\necho -e \"\\n=== PODS ===\"\nkubectl get pods -n $NAMESPACE -o wide\n\n# Utilisation des ressources\necho -e \"\\n=== RESSOURCES ===\"\nkubectl top pods -n $NAMESPACE --sort-by=memory\n\n# Services et endpoints\necho -e \"\\n=== SERVICES ===\"\nkubectl get services -n $NAMESPACE\n\n# \u00c9v\u00e9nements r\u00e9cents\necho -e \"\\n=== \u00c9V\u00c9NEMENTS R\u00c9CENTS ===\"\nkubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -10\n\n# Alertes actives (si Prometheus)\necho -e \"\\n=== ALERTES ACTIVES ===\"\ncurl -s http://prometheus:9090/api/v1/alerts | jq '.data.alerts[] | select(.state==\"firing\")' 2&gt;/dev/null || echo \"Prometheus non accessible\"\n</code></pre>"},{"location":"shared/infrastructure/#maintenance-et-nettoyage","title":"Maintenance et Nettoyage","text":""},{"location":"shared/infrastructure/#nettoyage-dimages-docker","title":"Nettoyage d'Images Docker","text":"<pre><code>#!/bin/bash\n# Nettoyage des images Docker obsol\u00e8tes\nKEEP_DAYS=${1:-7}\n\necho \"\ud83e\uddf9 Nettoyage des images Docker (conserver $KEEP_DAYS jours)...\"\n\n# Supprimer les images non utilis\u00e9es\ndocker image prune -a -f --filter \"until=${KEEP_DAYS}*24h\"\n\n# Supprimer les volumes orphelins\ndocker volume prune -f\n\n# Supprimer les r\u00e9seaux inutilis\u00e9s\ndocker network prune -f\n\n# Supprimer les conteneurs arr\u00eat\u00e9s\ndocker container prune -f\n\necho \"\u2705 Nettoyage termin\u00e9\"\ndocker system df\n</code></pre>"},{"location":"shared/infrastructure/#rotation-des-secrets-kubernetes","title":"Rotation des Secrets Kubernetes","text":"<pre><code>#!/bin/bash\n# Rotation de secret avec zero-downtime\nSECRET_NAME=${1}\nNAMESPACE=${2:-production}\n\nif [ -z \"$SECRET_NAME\" ]; then\n  echo \"\u274c Nom du secret requis\"\n  echo \"Usage: $0 &lt;secret_name&gt; [namespace]\"\n  exit 1\nfi\n\necho \"\ud83d\udd10 Rotation du secret $SECRET_NAME...\"\n\n# Sauvegarder l'ancien secret\nkubectl get secret $SECRET_NAME -n $NAMESPACE -o yaml &gt; /tmp/${SECRET_NAME}_backup.yaml\n\n# G\u00e9n\u00e9rer nouveau mot de passe\nNEW_PASSWORD=$(openssl rand -base64 32)\n\n# Mettre \u00e0 jour le secret\nkubectl create secret generic $SECRET_NAME \\\n  --from-literal=password=$NEW_PASSWORD \\\n  --dry-run=client -o yaml | kubectl apply -n $NAMESPACE -f -\n\n# Red\u00e9marrer les deployments qui utilisent ce secret\nfor deployment in $(kubectl get deployments -n $NAMESPACE -o json | jq -r '.items[] | select(.spec.template.spec.containers[].env[]?.valueFrom.secretKeyRef.name==\"'$SECRET_NAME'\") | .metadata.name'); do\n  echo \"Red\u00e9marrage de $deployment...\"\n  kubectl rollout restart deployment/$deployment -n $NAMESPACE\ndone\n\necho \"\u2705 Rotation du secret termin\u00e9e\"\n</code></pre>"},{"location":"shared/infrastructure/#scripts-dautomatisation-cicd","title":"Scripts d'Automatisation CI/CD","text":""},{"location":"shared/infrastructure/#validation-pre-deploiement","title":"Validation Pr\u00e9-D\u00e9ploiement","text":""},{"location":"shared/infrastructure/#post-deploiement-health-check","title":"Post-D\u00e9ploiement Health Check","text":""},{"location":"shared/infrastructure/#procedures-dinfrastructure-et-kubernetes","title":"Proc\u00e9dures d'Infrastructure et Kubernetes","text":"<p>Cette section contient des guides \u00e9tape par \u00e9tape pour les manipulations courantes d'infrastructure et de Kubernetes.</p>"},{"location":"shared/infrastructure/#procedures-de-deploiement","title":"\ud83d\ude80 Proc\u00e9dures de D\u00e9ploiement","text":""},{"location":"shared/infrastructure/#deploiement-dune-nouvelle-application","title":"D\u00e9ploiement d'une Nouvelle Application","text":"<p>Pr\u00e9requis: Acc\u00e8s kubectl configur\u00e9, Helm install\u00e9, images Docker pr\u00eates</p> <ol> <li>Pr\u00e9parer l'environnement</li> </ol> <pre><code># V\u00e9rifier la connexion au cluster\nkubectl cluster-info\n\n# V\u00e9rifier l'espace de noms\nkubectl get namespaces\n\n# Cr\u00e9er l'espace de noms si n\u00e9cessaire\nkubectl create namespace nouvelle-app\n</code></pre> <ol> <li>Configurer les secrets</li> </ol> <pre><code># Cr\u00e9er les secrets de base de donn\u00e9es\nkubectl create secret generic db-secret \\\n  --from-literal=username=dbuser \\\n  --from-literal=password=motdepasse \\\n  -n nouvelle-app\n\n# Cr\u00e9er les secrets API\nkubectl create secret generic api-secret \\\n  --from-literal=api-key=votre-cle-api \\\n  -n nouvelle-app\n</code></pre> <ol> <li>D\u00e9ployer avec Helm</li> </ol> <pre><code># Ajouter le d\u00e9p\u00f4t Helm\nhelm repo add optim https://charts.optim.com\nhelm repo update\n\n# Installer l'application\nhelm install nouvelle-app optim/app-chart \\\n  --namespace nouvelle-app \\\n  --set image.tag=v1.0.0 \\\n  --set replicas=3\n</code></pre> <ol> <li>V\u00e9rifier le d\u00e9ploiement</li> </ol> <pre><code># V\u00e9rifier les pods\nkubectl get pods -n nouvelle-app\n\n# V\u00e9rifier les services\nkubectl get services -n nouvelle-app\n\n# V\u00e9rifier les ingress\nkubectl get ingress -n nouvelle-app\n</code></pre>"},{"location":"shared/infrastructure/#mise-a-jour-dapplication-blue-green","title":"Mise \u00e0 Jour d'Application (Blue-Green)","text":""},{"location":"shared/infrastructure/#deploiement-optim-factory-vers-recette","title":"D\u00e9ploiement Optim Factory vers Recette","text":"<p>Pr\u00e9requis:</p> <ul> <li>Acc\u00e8s au d\u00e9p\u00f4t Git configur\u00e9</li> <li>Docker install\u00e9 et configur\u00e9</li> <li>Azure CLI install\u00e9 et configur\u00e9</li> <li>Acc\u00e8s au registry Azure (optimfactoryregistry.azurecr.io)</li> <li>Helm install\u00e9</li> <li>Acc\u00e8s au cluster AKS</li> </ul> <p>Processus complet de d\u00e9ploiement:</p> <ol> <li>Pr\u00e9paration et V\u00e9rification du Code</li> </ol> <pre><code># R\u00e9cup\u00e9rer les derni\u00e8res modifications du d\u00e9p\u00f4t\ngit pull\n\n# V\u00e9rifier les fichiers modifi\u00e9s (vue et art)\ngit status\ngit diff\n\n# V\u00e9rifier que tous les fichiers sont bien suivis\ngit add -A\n</code></pre> <ol> <li>Mise \u00e0 Jour de la Version</li> </ol> <pre><code># Modifier le num\u00e9ro de version dans les fichiers de configuration\n# Exemple: package.json, version.txt, ou fichiers de configuration\n# Format recommand\u00e9: W2024.70.a (Semaine.Num\u00e9ro.R\u00e9vision)\n\n# V\u00e9rifier la nouvelle version\ngrep -r \"version\" package.json\n</code></pre> <ol> <li>Construction des Images Docker</li> </ol> <pre><code># Construire l'image de l'application FastAPI\ndocker compose build fastapi\n\n# Construire l'image de l'application principale\ndocker compose build app\n\n# V\u00e9rifier que les images sont cr\u00e9\u00e9es\ndocker images | grep saas\n</code></pre> <ol> <li>\u00c9tiquetage des Images pour Azure Registry</li> </ol> <pre><code># \u00c9tiqueter l'image FastAPI avec la version et timestamp\n# Format: YYMMDD-HHMM\ndocker tag saas-fastapi optimfactoryregistry.azurecr.io/optim-factory-web-fastapi:250905-1000\n\n# \u00c9tiqueter l'image principale avec la version et timestamp\ndocker tag saas-app optimfactoryregistry.azurecr.io/optim-factory-web-app:250904-1800\n\n# V\u00e9rifier les tags\ndocker images | grep optimfactoryregistry\n</code></pre> <ol> <li>Authentification Azure</li> </ol> <pre><code># Se connecter \u00e0 Azure avec le code de p\u00e9riph\u00e9rique\naz login --use-device-code\n# Suivre les instructions affich\u00e9es et entrer le code sur https://aka.ms/devicelogin\n\n# Se connecter au registry Azure Container Registry\naz acr login --name optimfactoryregistry.azurecr.io\n</code></pre> <ol> <li>Publication des Images</li> </ol> <pre><code># Pousser l'image FastAPI vers le registry\ndocker push optimfactoryregistry.azurecr.io/optim-factory-web-fastapi:250905-1000\n\n# Pousser l'image principale vers le registry\ndocker push optimfactoryregistry.azurecr.io/optim-factory-web-app:250904-1800\n\n# V\u00e9rifier que les images sont bien pouss\u00e9es\naz acr repository list --name optimfactoryregistry\n</code></pre> <ol> <li>Configuration Kubernetes</li> </ol> <pre><code># R\u00e9cup\u00e9rer les credentials du cluster AKS\naz aks get-credentials --resource-group optimfactorykubernetes_group --name optimfactorykubernetes\n# Confirmer avec 'y' si demand\u00e9\n\n# V\u00e9rifier la connexion au cluster\nkubectl cluster-info\nkubectl get nodes\n</code></pre> <ol> <li>D\u00e9ploiement avec Helm (MISE EN LIGNE)</li> </ol> <pre><code># Naviguer vers le r\u00e9pertoire des charts Helm\ncd charts\n\n# D\u00e9ployer vers l'environnement de recette\nhelm upgrade optimbtp-saas-recette ./ -f ./values-recette.yaml\n\n# V\u00e9rifier le d\u00e9ploiement\nkubectl get pods -n recette\nkubectl get services -n recette\n\n# Retourner au r\u00e9pertoire principal\ncd ..\n</code></pre> <ol> <li>Validation du D\u00e9ploiement</li> </ol> <pre><code># V\u00e9rifier le statut des pods\nkubectl get pods -l app=optimbtp-saas-recette\n\n# V\u00e9rifier les logs si n\u00e9cessaire\nkubectl logs -l app=optimbtp-saas-recette --tail=50\n\n# Tester l'endpoint de sant\u00e9\nkubectl port-forward service/optimbtp-saas-recette 8080:80\ncurl http://localhost:8080/health\n</code></pre> <ol> <li> <p>Enregistrement Git (ENREGISTREMENT GIT)</p> <pre><code># Ajouter tous les fichiers modifi\u00e9s\ngit add .\n\n# Cr\u00e9er un commit avec un message descriptif\ngit commit -m \"Mise \u00e0 jour vers version W2024.70.a\"\n\n# Pousser vers le d\u00e9p\u00f4t principal\ngit push\n</code></pre> </li> <li> <p>Gestion des Branches de Version</p> <pre><code># R\u00e9cup\u00e9rer les derni\u00e8res modifications de origin\ngit fetch origin\n\n# Basculer vers la branche de d\u00e9veloppement\ngit checkout dev\n\n# Cr\u00e9er une nouvelle branche de version\ngit checkout -b \"versions/20250904-W2024.70.a\"\n\n# Pousser la nouvelle branche de version\ngit push origin \"versions/20250904-W2024.70.a\"\n\n# R\u00e9cup\u00e9rer les modifications et retourner \u00e0 dev\ngit fetch origin\ngit checkout dev\n</code></pre> </li> </ol> <p>Notes importantes:</p> <ul> <li>Nommage des versions: Utiliser le format <code>YYMMDD-HHMM</code> pour les tags Docker</li> <li>Branches de version: Suivre le format <code>versions/YYYYMMDD-W2024.XX.x</code></li> <li>Environnements: Cette proc\u00e9dure concerne l'environnement <code>recette</code></li> <li>Rollback: En cas de probl\u00e8me, utiliser <code>helm rollback optimbtp-saas-recette [REVISION]</code></li> </ul> <p>V\u00e9rifications post-d\u00e9ploiement:</p> <pre><code># V\u00e9rifier l'\u00e9tat du d\u00e9ploiement Helm\nhelm status optimbtp-saas-recette\n\n# V\u00e9rifier les ressources Kubernetes\nkubectl get all -l app=optimbtp-saas-recette\n\n# V\u00e9rifier les \u00e9v\u00e9nements r\u00e9cents\nkubectl get events --sort-by=.metadata.creationTimestamp | tail -10\n</code></pre>"},{"location":"shared/infrastructure/#gestion-des-clusters-kubernetes","title":"\ud83d\udd27 Gestion des Clusters Kubernetes","text":""},{"location":"shared/infrastructure/#ajout-dun-nouveau-nud-au-cluster","title":"Ajout d'un Nouveau N\u0153ud au Cluster","text":"<ol> <li>Pr\u00e9parer la machine</li> </ol> <pre><code># Sur la nouvelle machine\n# Installer Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n\n# Installer kubeadm, kubelet, kubectl\nsudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https curl\ncurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\necho \"deb https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\nsudo apt-get update &amp;&amp; sudo apt-get install -y kubelet kubeadm kubectl\n</code></pre> <ol> <li>G\u00e9n\u00e9rer le token de join (sur le master)</li> </ol> <pre><code># Cr\u00e9er un nouveau token\nkubeadm token create --print-join-command\n</code></pre> <ol> <li>Joindre le n\u0153ud au cluster</li> </ol> <pre><code># Sur la nouvelle machine, ex\u00e9cuter la commande g\u00e9n\u00e9r\u00e9e\nsudo kubeadm join &lt;master-ip&gt;:6443 --token &lt;token&gt; --discovery-token-ca-cert-hash &lt;hash&gt;\n</code></pre> <ol> <li>V\u00e9rifier l'ajout <pre><code># Sur le master\nkubectl get nodes\nkubectl describe node &lt;nouveau-noeud&gt;\n</code></pre></li> </ol>"},{"location":"shared/infrastructure/#configuration-dun-ingress-controller","title":"Configuration d'un Ingress Controller","text":"<ol> <li>Installer NGINX Ingress</li> </ol> <pre><code># Ajouter le d\u00e9p\u00f4t Helm\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\n\n# Installer l'ingress controller\nhelm install ingress-nginx ingress-nginx/ingress-nginx \\\n  --namespace ingress-nginx \\\n  --create-namespace \\\n  --set controller.replicaCount=2\n</code></pre> <ol> <li>Configurer les certificats SSL</li> </ol> <pre><code># Installer cert-manager\nhelm repo add jetstack https://charts.jetstack.io\nhelm install cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --set installCRDs=true\n</code></pre> <ol> <li>Cr\u00e9er un ClusterIssuer</li> </ol> <pre><code># cluster-issuer.yml\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: admin@optim.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n      - http01:\n          ingress:\n            class: nginx\n</code></pre> <ol> <li>Appliquer la configuration <pre><code>kubectl apply -f cluster-issuer.yml\n</code></pre></li> </ol>"},{"location":"shared/infrastructure/#gestion-des-bases-de-donnees_1","title":"\ud83d\udcbe Gestion des Bases de Donn\u00e9es","text":""},{"location":"shared/infrastructure/#sauvegarde-complete-de-postgresql-dans-kubernetes","title":"Sauvegarde Compl\u00e8te de PostgreSQL dans Kubernetes","text":"<ol> <li>Cr\u00e9er un Job de sauvegarde</li> </ol> <pre><code># backup-job.yml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-backup\n  namespace: database\nspec:\n  template:\n    spec:\n      containers:\n        - name: postgres-backup\n          image: postgres:13\n          env:\n            - name: PGPASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secret\n                  key: password\n          command:\n            - /bin/bash\n            - -c\n            - |\n              pg_dump -h postgres-service -U postgres -d optim_db | gzip &gt; /backup/$(date +%Y%m%d_%H%M%S).sql.gz\n              aws s3 cp /backup/*.sql.gz s3://optim-backups/database/\n          volumeMounts:\n            - name: backup-storage\n              mountPath: /backup\n      volumes:\n        - name: backup-storage\n          emptyDir: {}\n      restartPolicy: Never\n</code></pre> <ol> <li>Ex\u00e9cuter la sauvegarde <pre><code>kubectl apply -f backup-job.yml\nkubectl wait --for=condition=complete job/postgres-backup -n database --timeout=300s\nkubectl logs job/postgres-backup -n database\n</code></pre></li> </ol>"},{"location":"shared/infrastructure/#restauration-de-base-de-donnees_1","title":"Restauration de Base de Donn\u00e9es","text":"<ol> <li>Pr\u00e9parer la restauration</li> </ol> <pre><code># Arr\u00eater l'application\nkubectl scale deployment app-deployment --replicas=0 -n production\n\n# T\u00e9l\u00e9charger la sauvegarde\naws s3 cp s3://optim-backups/database/20240909_120000.sql.gz /tmp/\n</code></pre> <ol> <li>Cr\u00e9er un Job de restauration</li> </ol> <pre><code># restore-job.yml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: postgres-restore\n  namespace: database\nspec:\n  template:\n    spec:\n      containers:\n        - name: postgres-restore\n          image: postgres:13\n          env:\n            - name: PGPASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secret\n                  key: password\n          command:\n            - /bin/bash\n            - -c\n            - |\n              gunzip -c /backup/backup.sql.gz | psql -h postgres-service -U postgres -d optim_db\n          volumeMounts:\n            - name: backup-data\n              mountPath: /backup\n      volumes:\n        - name: backup-data\n          configMap:\n            name: backup-configmap\n      restartPolicy: Never\n</code></pre> <ol> <li>Red\u00e9marrer l'application <pre><code>kubectl scale deployment app-deployment --replicas=3 -n production\n</code></pre></li> </ol>"},{"location":"shared/infrastructure/#gestion-des-secrets-et-securite","title":"\ud83d\udd10 Gestion des Secrets et S\u00e9curit\u00e9","text":""},{"location":"shared/infrastructure/#rotation-des-secrets-de-base-de-donnees","title":"Rotation des Secrets de Base de Donn\u00e9es","text":"<ol> <li>G\u00e9n\u00e9rer un nouveau mot de passe</li> </ol> <pre><code># G\u00e9n\u00e9rer un mot de passe s\u00e9curis\u00e9\nNEW_PASSWORD=$(openssl rand -base64 32)\necho \"Nouveau mot de passe: $NEW_PASSWORD\"\n</code></pre> <ol> <li>Mettre \u00e0 jour le secret Kubernetes</li> </ol> <pre><code># Encoder en base64\necho -n \"$NEW_PASSWORD\" | base64\n\n# Mettre \u00e0 jour le secret\nkubectl patch secret postgres-secret \\\n  -p '{\"data\":{\"password\":\"'$(echo -n \"$NEW_PASSWORD\" | base64)'\"}}' \\\n  -n database\n</code></pre> <ol> <li>Mettre \u00e0 jour la base de donn\u00e9es</li> </ol> <pre><code># Se connecter au pod PostgreSQL\nkubectl exec -it postgres-pod -n database -- bash\n\n# Dans le pod, changer le mot de passe\npsql -U postgres -c \"ALTER USER optim_user PASSWORD '$NEW_PASSWORD';\"\n</code></pre> <ol> <li>Red\u00e9marrer les applications <pre><code>kubectl rollout restart deployment app-deployment -n production\nkubectl rollout status deployment app-deployment -n production\n</code></pre></li> </ol>"},{"location":"shared/infrastructure/#configuration-du-rbac","title":"Configuration du RBAC","text":"<ol> <li>Cr\u00e9er un ServiceAccount</li> </ol> <pre><code># service-account.yml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: app-service-account\n  namespace: production\n</code></pre> <ol> <li>Cr\u00e9er un Role</li> </ol> <pre><code># role.yml\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: production\n  name: app-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"pods\", \"services\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"apps\"]\n    resources: [\"deployments\"]\n    verbs: [\"get\", \"list\", \"watch\", \"update\"]\n</code></pre> <ol> <li>Cr\u00e9er un RoleBinding</li> </ol> <pre><code># role-binding.yml\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: app-role-binding\n  namespace: production\nsubjects:\n  - kind: ServiceAccount\n    name: app-service-account\n    namespace: production\nroleRef:\n  kind: Role\n  name: app-role\n  apiGroup: rbac.authorization.k8s.io\n</code></pre> <ol> <li>Appliquer les configurations <pre><code>kubectl apply -f service-account.yml\nkubectl apply -f role.yml\nkubectl apply -f role-binding.yml\n</code></pre></li> </ol>"},{"location":"shared/infrastructure/#surveillance-et-monitoring","title":"\ud83d\udcca Surveillance et Monitoring","text":""},{"location":"shared/infrastructure/#configuration-de-prometheus-et-grafana","title":"Configuration de Prometheus et Grafana","text":"<ol> <li>Installer Prometheus avec Helm</li> </ol> <pre><code>helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n\nhelm install prometheus prometheus-community/kube-prometheus-stack \\\n  --namespace monitoring \\\n  --create-namespace \\\n  --set grafana.adminPassword=admin123\n</code></pre> <ol> <li>Configurer les ServiceMonitors</li> </ol> <pre><code># app-service-monitor.yml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: app-service-monitor\n  namespace: monitoring\nspec:\n  selector:\n    matchLabels:\n      app: optim-app\n  endpoints:\n    - port: metrics\n      path: /metrics\n      interval: 30s\n</code></pre> <ol> <li>Cr\u00e9er des alertes personnalis\u00e9es</li> </ol> <pre><code># custom-alerts.yml\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  name: app-alerts\n  namespace: monitoring\nspec:\n  groups:\n    - name: optim.rules\n      rules:\n        - alert: HighMemoryUsage\n          expr: container_memory_usage_bytes / container_spec_memory_limit_bytes &gt; 0.9\n          for: 5m\n          labels:\n            severity: warning\n          annotations:\n            summary: \"Utilisation m\u00e9moire \u00e9lev\u00e9e d\u00e9tect\u00e9e\"\n</code></pre> <ol> <li>Acc\u00e9der aux interfaces</li> </ol> <pre><code># Port-forward Grafana\nkubectl port-forward svc/prometheus-grafana 3000:80 -n monitoring\n\n# Port-forward Prometheus\nkubectl port-forward svc/prometheus-kube-prometheus-prometheus 9090:9090 -n monitoring\n</code></pre>"},{"location":"shared/infrastructure/#maintenance-et-mise-a-lechelle","title":"\ud83d\udee0\ufe0f Maintenance et Mise \u00e0 l'\u00c9chelle","text":""},{"location":"shared/infrastructure/#mise-a-lechelle-automatique-hpa","title":"Mise \u00e0 l'\u00c9chelle Automatique (HPA)","text":"<ol> <li>Installer Metrics Server</li> </ol> <pre><code>kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n</code></pre> <ol> <li>Cr\u00e9er un HPA</li> </ol> <pre><code># hpa.yml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: app-hpa\n  namespace: production\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: app-deployment\n  minReplicas: 3\n  maxReplicas: 20\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n    - type: Resource\n      resource:\n        name: memory\n        target:\n          type: Utilization\n          averageUtilization: 80\n</code></pre> <ol> <li>Appliquer et v\u00e9rifier <pre><code>kubectl apply -f hpa.yml\nkubectl get hpa -n production\nkubectl describe hpa app-hpa -n production\n</code></pre></li> </ol>"},{"location":"shared/infrastructure/#nettoyage-et-maintenance","title":"Nettoyage et Maintenance","text":"<ol> <li>Nettoyer les images inutilis\u00e9es</li> </ol> <pre><code># Sur chaque n\u0153ud\ndocker system prune -a -f\n\n# Ou utiliser un DaemonSet\nkubectl create -f - &lt;&lt;EOF\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: docker-cleanup\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      name: docker-cleanup\n  template:\n    metadata:\n      labels:\n        name: docker-cleanup\n    spec:\n      containers:\n      - name: docker-cleanup\n        image: docker:dind\n        command: [\"docker\", \"system\", \"prune\", \"-a\", \"-f\"]\n        volumeMounts:\n        - name: docker-sock\n          mountPath: /var/run/docker.sock\n      volumes:\n      - name: docker-sock\n        hostPath:\n          path: /var/run/docker.sock\nEOF\n</code></pre> <ol> <li>Nettoyer les ressources Kubernetes</li> </ol> <pre><code># Supprimer les pods termin\u00e9s\nkubectl delete pods --field-selector=status.phase=Succeeded --all-namespaces\n\n# Supprimer les jobs termin\u00e9s\nkubectl delete jobs --field-selector=status.successful=1 --all-namespaces\n\n# Nettoyer les \u00e9v\u00e9nements anciens\nkubectl get events --sort-by=.metadata.creationTimestamp --all-namespaces\n</code></pre>"},{"location":"shared/infrastructure/#depannage","title":"D\u00e9pannage","text":""},{"location":"shared/infrastructure/#problemes-courants","title":"Probl\u00e8mes Courants","text":"<ol> <li>Plantages de Pods</li> </ol> <pre><code>kubectl logs &lt;nom-pod&gt; -n production\nkubectl describe pod &lt;nom-pod&gt; -n production\n</code></pre> <ol> <li>Utilisation M\u00e9moire \u00c9lev\u00e9e</li> </ol> <pre><code>kubectl top pods -n production\nkubectl exec -it &lt;nom-pod&gt; -- free -h\n</code></pre> <ol> <li>Probl\u00e8mes de Connexion Base de Donn\u00e9es <pre><code>kubectl exec -it &lt;nom-pod&gt; -- nc -zv postgres-service 5432\n</code></pre></li> </ol>"},{"location":"shared/infrastructure/#procedures-durgence","title":"Proc\u00e9dures d'Urgence","text":"<ol> <li>R\u00e9duire le Trafic</li> </ol> <pre><code>kubectl scale deployment optim-app --replicas=1 -n production\n</code></pre> <ol> <li>Activer le Mode Maintenance</li> </ol> <pre><code>kubectl apply -f k8s/maintenance-page.yml\n</code></pre> <ol> <li>Acc\u00e8s d'Urgence \u00e0 la Base de Donn\u00e9es <pre><code>kubectl port-forward service/postgres-service 5432:5432 -n production\n</code></pre></li> </ol>"},{"location":"shared/infrastructure/#ressources","title":"Ressources","text":"<ul> <li>Documentation Kubernetes</li> <li>Documentation Terraform</li> <li>Documentation AWS EKS</li> <li>Documentation Prometheus</li> </ul> <p>Pour les questions d'infrastructure ou les urgences, contactez imm\u00e9diatement l'\u00e9quipe DevOps.</p>"},{"location":"shared/tools/","title":"Outils de D\u00e9veloppement et de D\u00e9ploiement","text":"<p>Cette section documente les outils et utilitaires utilis\u00e9s dans tous les projets Optim pour le d\u00e9veloppement, les tests et le d\u00e9ploiement.</p>"},{"location":"shared/tools/#outils-de-developpement","title":"Outils de D\u00e9veloppement","text":""},{"location":"shared/tools/#editeurs-de-code-et-ides","title":"\u00c9diteurs de Code et IDEs","text":""},{"location":"shared/tools/#visual-studio-code","title":"Visual Studio Code","text":"<p>Extensions Recommand\u00e9es :</p> <ul> <li>ESLint - Linting JavaScript/TypeScript</li> <li>Prettier - Formatage de code</li> <li>GitLens - Capacit\u00e9s Git am\u00e9lior\u00e9es</li> <li>Thunder Client - Tests d'API</li> <li>Docker - D\u00e9veloppement de conteneurs</li> <li>Kubernetes - Gestion des ressources K8s</li> </ul> <p>Configuration :</p> <pre><code>{\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n  \"typescript.preferences.importModuleSpecifier\": \"relative\",\n  \"git.enableSmartCommit\": true,\n  \"files.exclude\": {\n    \"**/node_modules\": true,\n    \"**/dist\": true,\n    \"**/.git\": true\n  }\n}\n</code></pre>"},{"location":"shared/tools/#ides-jetbrains","title":"IDEs JetBrains","text":"<ul> <li>WebStorm - D\u00e9veloppement JavaScript/TypeScript</li> <li>IntelliJ IDEA - D\u00e9veloppement Java</li> <li>PyCharm - D\u00e9veloppement Python</li> </ul>"},{"location":"shared/tools/#controle-de-version","title":"Contr\u00f4le de Version","text":""},{"location":"shared/tools/#configuration-git","title":"Configuration Git","text":"<pre><code># Configuration Git globale\ngit config --global user.name \"Votre Nom\"\ngit config --global user.email \"your.email@optim.com\"\ngit config --global init.defaultBranch main\ngit config --global pull.rebase true\ngit config --global core.autocrlf input\n\n# Useful aliases\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status\ngit config --global alias.unstage 'reset HEAD --'\ngit config --global alias.last 'log -1 HEAD'\n</code></pre>"},{"location":"shared/tools/#git-hooks-with-husky","title":"Git Hooks with Husky","text":"<pre><code>{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged &amp;&amp; npm run test:unit\",\n      \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\",\n      \"pre-push\": \"npm run test:integration\"\n    }\n  },\n  \"lint-staged\": {\n    \"*.{js,ts,tsx}\": [\"eslint --fix\", \"prettier --write\"],\n    \"*.{css,scss,md}\": [\"prettier --write\"]\n  }\n}\n</code></pre>"},{"location":"shared/tools/#package-managers","title":"Package Managers","text":""},{"location":"shared/tools/#nodejs-npmyarn","title":"Node.js - npm/yarn","text":"<pre><code>{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"eslint . --ext .js,.jsx,.ts,.tsx\",\n    \"lint:fix\": \"eslint . --ext .js,.jsx,.ts,.tsx --fix\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"next\": \"^13.0.0\",\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"@types/react\": \"^18.0.0\",\n    \"eslint\": \"^8.0.0\",\n    \"prettier\": \"^2.7.0\",\n    \"typescript\": \"^4.8.0\"\n  }\n}\n</code></pre>"},{"location":"shared/tools/#python-pippoetry","title":"Python - pip/poetry","text":"<pre><code># pyproject.toml\n[tool.poetry]\nname = \"optim-api\"\nversion = \"1.0.0\"\ndescription = \"Optim API Service\"\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\nfastapi = \"^0.95.0\"\nuvicorn = \"^0.21.0\"\nsqlalchemy = \"^2.0.0\"\nalembic = \"^1.10.0\"\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^7.0.0\"\npytest-asyncio = \"^0.21.0\"\nblack = \"^23.0.0\"\nflake8 = \"^6.0.0\"\nmypy = \"^1.2.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre>"},{"location":"shared/tools/#testing-tools","title":"Testing Tools","text":""},{"location":"shared/tools/#javascripttypescript-testing","title":"JavaScript/TypeScript Testing","text":""},{"location":"shared/tools/#jest-configuration","title":"Jest Configuration","text":"<pre><code>// jest.config.js\nmodule.exports = {\n  preset: \"ts-jest\",\n  testEnvironment: \"node\",\n  roots: [\"&lt;rootDir&gt;/src\", \"&lt;rootDir&gt;/tests\"],\n  testMatch: [\n    \"**/__tests__/**/*.+(ts|tsx|js)\",\n    \"**/*.(test|spec).+(ts|tsx|js)\",\n  ],\n  transform: {\n    \"^.+\\\\.(ts|tsx)$\": \"ts-jest\",\n  },\n  collectCoverageFrom: [\n    \"src/**/*.{ts,tsx}\",\n    \"!src/**/*.d.ts\",\n    \"!src/types/**/*\",\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80,\n    },\n  },\n};\n</code></pre>"},{"location":"shared/tools/#testing-library-setup","title":"Testing Library Setup","text":"<pre><code>// tests/setup.ts\nimport \"@testing-library/jest-dom\";\nimport { configure } from \"@testing-library/react\";\n\nconfigure({ testIdAttribute: \"data-testid\" });\n\n// Mock global objects\nObject.defineProperty(window, \"matchMedia\", {\n  writable: true,\n  value: jest.fn().mockImplementation((query) =&gt; ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(),\n    removeListener: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n</code></pre>"},{"location":"shared/tools/#python-testing","title":"Python Testing","text":""},{"location":"shared/tools/#pytest-configuration","title":"Pytest Configuration","text":"<pre><code># pytest.ini\n[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts =\n    --strict-markers\n    --strict-config\n    --verbose\n    --cov=src\n    --cov-report=term-missing\n    --cov-report=html\n    --cov-fail-under=80\nmarkers =\n    unit: Unit tests\n    integration: Integration tests\n    e2e: End-to-end tests\n    slow: Slow running tests\n</code></pre>"},{"location":"shared/tools/#end-to-end-testing","title":"End-to-End Testing","text":""},{"location":"shared/tools/#playwright-configuration","title":"Playwright Configuration","text":"<pre><code>// playwright.config.ts\nimport { PlaywrightTestConfig } from \"@playwright/test\";\n\nconst config: PlaywrightTestConfig = {\n  testDir: \"./e2e\",\n  timeout: 30000,\n  retries: 2,\n  use: {\n    baseURL: \"http://localhost:3000\",\n    headless: true,\n    viewport: { width: 1280, height: 720 },\n    ignoreHTTPSErrors: true,\n    video: \"retain-on-failure\",\n    screenshot: \"only-on-failure\",\n  },\n  projects: [\n    {\n      name: \"Chrome\",\n      use: { ...devices[\"Desktop Chrome\"] },\n    },\n    {\n      name: \"Firefox\",\n      use: { ...devices[\"Desktop Firefox\"] },\n    },\n    {\n      name: \"Safari\",\n      use: { ...devices[\"Desktop Safari\"] },\n    },\n  ],\n};\n\nexport default config;\n</code></pre>"},{"location":"shared/tools/#build-tools","title":"Build Tools","text":""},{"location":"shared/tools/#frontend-build-tools","title":"Frontend Build Tools","text":""},{"location":"shared/tools/#webpack-configuration","title":"Webpack Configuration","text":"<pre><code>// webpack.config.js\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n\nmodule.exports = {\n  entry: \"./src/index.tsx\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"[name].[contenthash].js\",\n    clean: true,\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: \"ts-loader\",\n        exclude: /node_modules/,\n      },\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, \"css-loader\"],\n      },\n    ],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: \"./public/index.html\",\n    }),\n    new MiniCssExtractPlugin({\n      filename: \"[name].[contenthash].css\",\n    }),\n  ],\n  optimization: {\n    splitChunks: {\n      chunks: \"all\",\n    },\n  },\n};\n</code></pre>"},{"location":"shared/tools/#vite-configuration","title":"Vite Configuration","text":"<pre><code>// vite.config.ts\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport { resolve } from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": resolve(__dirname, \"src\"),\n    },\n  },\n  build: {\n    outDir: \"dist\",\n    sourcemap: true,\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: [\"react\", \"react-dom\"],\n          utils: [\"lodash\", \"date-fns\"],\n        },\n      },\n    },\n  },\n  server: {\n    port: 3000,\n    open: true,\n  },\n});\n</code></pre>"},{"location":"shared/tools/#backend-build-tools","title":"Backend Build Tools","text":""},{"location":"shared/tools/#docker-configuration","title":"Docker Configuration","text":"<pre><code># Dockerfile\nFROM node:18-alpine AS builder\n\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nFROM node:18-alpine AS runtime\n\nWORKDIR /app\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY . .\n\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\n\nUSER nextjs\n\nEXPOSE 3000\nENV PORT 3000\n\nCMD [\"npm\", \"start\"]\n</code></pre>"},{"location":"shared/tools/#multi-stage-docker-build","title":"Multi-stage Docker Build","text":"<pre><code># Multi-stage Dockerfile\nFROM node:18-alpine AS dependencies\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --frozen-lockfile\n\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY --from=dependencies /app/node_modules ./node_modules\nCOPY . .\nRUN npm run build\n\nFROM node:18-alpine AS runner\nWORKDIR /app\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\nCOPY --from=builder /app/dist ./dist\nCOPY --from=builder /app/package.json ./package.json\n\nUSER nextjs\n\nEXPOSE 3000\nENV PORT 3000\n\nCMD [\"node\", \"dist/index.js\"]\n</code></pre>"},{"location":"shared/tools/#deployment-tools","title":"Deployment Tools","text":""},{"location":"shared/tools/#container-orchestration","title":"Container Orchestration","text":""},{"location":"shared/tools/#docker-compose","title":"Docker Compose","text":"<pre><code># docker-compose.yml\nversion: \"3.8\"\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=development\n      - DATABASE_URL=postgres://user:pass@db:5432/optim\n    depends_on:\n      - db\n      - redis\n    volumes:\n      - ./src:/app/src\n\n  db:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_DB: optim\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: pass\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n\nvolumes:\n  postgres_data:\n  redis_data:\n</code></pre>"},{"location":"shared/tools/#kubernetes-helm-charts","title":"Kubernetes Helm Charts","text":"<pre><code># helm/values.yaml\nreplicaCount: 3\n\nimage:\n  repository: optim/app\n  tag: latest\n  pullPolicy: IfNotPresent\n\nservice:\n  type: ClusterIP\n  port: 80\n\ningress:\n  enabled: true\n  className: nginx\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n  hosts:\n    - host: app.optim.com\n      paths:\n        - path: /\n          pathType: Prefix\n  tls:\n    - secretName: app-tls\n      hosts:\n        - app.optim.com\n\nresources:\n  limits:\n    cpu: 500m\n    memory: 512Mi\n  requests:\n    cpu: 250m\n    memory: 256Mi\n\nautoscaling:\n  enabled: true\n  minReplicas: 3\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 80\n</code></pre>"},{"location":"shared/tools/#infrastructure-as-code","title":"Infrastructure as Code","text":""},{"location":"shared/tools/#terraform-configuration","title":"Terraform Configuration","text":"<pre><code># terraform/main.tf\nterraform {\n  required_version = \"&gt;= 1.0\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 5.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n\n  name = \"optim-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  azs             = [\"${var.aws_region}a\", \"${var.aws_region}b\", \"${var.aws_region}c\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\", \"10.0.103.0/24\"]\n\n  enable_nat_gateway = true\n  enable_vpn_gateway = true\n}\n</code></pre>"},{"location":"shared/tools/#monitoring-and-debugging-tools","title":"Monitoring and Debugging Tools","text":""},{"location":"shared/tools/#application-monitoring","title":"Application Monitoring","text":""},{"location":"shared/tools/#prometheus-configuration","title":"Prometheus Configuration","text":"<pre><code># prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - \"alerts/*.yml\"\n\nscrape_configs:\n  - job_name: \"optim-app\"\n    static_configs:\n      - targets: [\"localhost:3000\"]\n    metrics_path: \"/metrics\"\n    scrape_interval: 5s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n            - alertmanager:9093\n</code></pre>"},{"location":"shared/tools/#grafana-dashboard","title":"Grafana Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"id\": null,\n    \"title\": \"Optim Application Dashboard\",\n    \"tags\": [\"optim\"],\n    \"timezone\": \"browser\",\n    \"panels\": [\n      {\n        \"id\": 1,\n        \"title\": \"Request Rate\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(http_requests_total[5m])\",\n            \"legendFormat\": \"{{method}} {{status}}\"\n          }\n        ]\n      }\n    ],\n    \"time\": {\n      \"from\": \"now-1h\",\n      \"to\": \"now\"\n    },\n    \"refresh\": \"5s\"\n  }\n}\n</code></pre>"},{"location":"shared/tools/#error-tracking","title":"Error Tracking","text":""},{"location":"shared/tools/#sentry-configuration","title":"Sentry Configuration","text":"<pre><code>// sentry.client.config.ts\nimport * as Sentry from \"@sentry/nextjs\";\n\nSentry.init({\n  dsn: process.env.SENTRY_DSN,\n  environment: process.env.NODE_ENV,\n  tracesSampleRate: 1.0,\n  beforeSend(event) {\n    if (event.exception) {\n      const error = event.exception.values?.[0];\n      if (error?.value?.includes(\"Non-Error\")) {\n        return null;\n      }\n    }\n    return event;\n  },\n});\n</code></pre>"},{"location":"shared/tools/#service-uptime-monitoring","title":"Service Uptime Monitoring","text":""},{"location":"shared/tools/#uptimerobot","title":"UptimeRobot","text":"<p>UptimeRobot est notre solution principale pour surveiller la disponibilit\u00e9 de nos services en production. Il surveille en continu nos applications web, API et services backend pour d\u00e9tecter les temps d'arr\u00eat et les probl\u00e8mes de performance.</p> <p>Services Surveill\u00e9s :</p> <ul> <li>Web App SAAS - Application frontend React</li> <li>Web API SAAS - API backend FastAPI</li> <li>Backoffice App - Interface d'administration</li> <li>Backoffice API - API de gestion interne</li> </ul> <p>Fonctionnalit\u00e9s Principales :</p> <ul> <li>Surveillance 24/7 - V\u00e9rifications automatiques toutes les 5 minutes</li> <li>Notifications Instantan\u00e9es - Alertes par email/SMS en cas de panne</li> <li>Statistiques D\u00e9taill\u00e9es - Historique de disponibilit\u00e9 et temps de r\u00e9ponse</li> <li>Page de Status Public - Transparence pour les utilisateurs</li> </ul> <p>Dashboard de Monitoring : \ud83d\udd17 Status Page Optim</p> <p>Configuration des Alertes :</p> <pre><code># Configuration type pour UptimeRobot\nmonitors:\n  - name: \"SAAS Web App\"\n    url: \"https://ref.web.optimbtp.fr\"\n    type: \"HTTP(s)\"\n    interval: 300 # 5 minutes\n\n  - name: \"SAAS API\"\n    url: \"https://api.ref.web.optimbtp.fr/docs\"\n    type: \"HTTP(s)\"\n    interval: 300\n\n  - name: \"Backoffice App\"\n    url: \"https://admin.web.optimbtp.fr/login\"\n    type: \"HTTP(s)\"\n    interval: 300\n\n  - name: \"Backoffice API\"\n    url: \"https://api.admin.web.optimbtp.fr/admin\"\n    type: \"HTTP(s)\"\n    interval: 300\n\nalert_contacts:\n  - type: \"email\"\n    value: \"technique@optim-factory.fr\"\n</code></pre> <p>Bonnes Pratiques :</p> <ul> <li>Endpoints de Health Check - Impl\u00e9menter des endpoints <code>/health</code> d\u00e9di\u00e9s</li> <li>Seuils d'Alerte - Configurer des alertes apr\u00e8s 2 \u00e9checs cons\u00e9cutifs</li> <li>Escalation - Alertes par email puis SMS si le probl\u00e8me persiste</li> <li>Maintenance Windows - Programmer les fen\u00eatres de maintenance pour \u00e9viter les fausses alertes</li> </ul> <p>Int\u00e9gration avec les Autres Outils :</p> <ul> <li>Slack - Notifications dans le canal <code>#alerts</code></li> <li>PagerDuty - Escalation pour les incidents critiques</li> <li>Grafana - Corr\u00e9lation avec les m\u00e9triques de performance</li> </ul>"},{"location":"shared/tools/#code-quality-tools","title":"Code Quality Tools","text":""},{"location":"shared/tools/#linting-and-formatting","title":"Linting and Formatting","text":""},{"location":"shared/tools/#eslint-configuration","title":"ESLint Configuration","text":"<pre><code>// .eslintrc.js\nmodule.exports = {\n  extends: [\n    \"eslint:recommended\",\n    \"@typescript-eslint/recommended\",\n    \"next/core-web-vitals\",\n    \"prettier\",\n  ],\n  parser: \"@typescript-eslint/parser\",\n  plugins: [\"@typescript-eslint\"],\n  rules: {\n    \"@typescript-eslint/no-unused-vars\": \"error\",\n    \"@typescript-eslint/explicit-function-return-type\": \"warn\",\n    \"prefer-const\": \"error\",\n    \"no-var\": \"error\",\n  },\n};\n</code></pre>"},{"location":"shared/tools/#prettier-configuration","title":"Prettier Configuration","text":"<pre><code>{\n  \"semi\": true,\n  \"trailingComma\": \"es5\",\n  \"singleQuote\": true,\n  \"printWidth\": 80,\n  \"tabWidth\": 2,\n  \"useTabs\": false\n}\n</code></pre>"},{"location":"shared/tools/#security-scanning","title":"Security Scanning","text":""},{"location":"shared/tools/#github-security-workflows","title":"GitHub Security Workflows","text":"<pre><code># .github/workflows/security.yml\nname: Security Scan\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Run npm audit\n        run: npm audit --audit-level moderate\n\n      - name: Run Snyk test\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n\n      - name: Run CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n        with:\n          languages: javascript\n</code></pre>"},{"location":"shared/tools/#utility-scripts","title":"Utility Scripts","text":""},{"location":"shared/tools/#development-scripts","title":"Development Scripts","text":"<pre><code>#!/bin/bash\n# scripts/dev-setup.sh\n\necho \"Setting up development environment...\"\n\n# Install dependencies\nnpm install\n\n# Copy environment file\ncp .env.example .env\n\n# Generate SSL certificates for local development\nmkcert localhost 127.0.0.1 ::1\n\n# Start database\ndocker-compose up -d db redis\n\n# Run database migrations\nnpm run migrate\n\n# Seed database\nnpm run seed\n\necho \"Development environment ready.\"\necho \"Run 'npm run dev' to start the application\"\n</code></pre>"},{"location":"shared/tools/#deployment-scripts","title":"Deployment Scripts","text":"<pre><code>#!/bin/bash\n# scripts/deploy.sh\n\nset -e\n\nENVIRONMENT=${1:-staging}\nVERSION=${2:-latest}\n\necho \"Deploying to $ENVIRONMENT with version $VERSION\"\n\n# Build and push Docker image\ndocker build -t optim/app:$VERSION .\ndocker push optim/app:$VERSION\n\n# Deploy with Helm\nhelm upgrade --install optim-app ./helm/optim-app \\\n  --set image.tag=$VERSION \\\n  --namespace $ENVIRONMENT \\\n  --wait\n\necho \"Deployment complete!\"\n</code></pre>"},{"location":"shared/tools/#resources-and-documentation","title":"Resources and Documentation","text":""},{"location":"shared/tools/#tool-documentation-links","title":"Tool Documentation Links","text":"<ul> <li>Docker Documentation</li> <li>Kubernetes Documentation</li> <li>Terraform Documentation</li> <li>Jest Documentation</li> <li>Playwright Documentation</li> </ul>"},{"location":"shared/tools/#internal-tool-guides","title":"Internal Tool Guides","text":"<ul> <li>Development Environment Setup</li> <li>Testing Best Practices</li> <li>Deployment Procedures</li> <li>Monitoring Setup</li> </ul> <p>For tool-specific questions or issues, consult the respective documentation or contact the DevOps team.</p>"}]}